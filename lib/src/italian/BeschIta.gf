--# -path=.:../romance:../common:../abstract:../../prelude

resource BeschIta = open Prelude, CommonRomance in {

flags optimize=values ; coding=utf8 ; -- smaller than noexpand

oper Verbo = {s : VForm => Str} ;

-- machine-generated GF file

oper essere_1 : Str -> Verbo = \essere ->
  let x_ = Predef.tk 6 essere in
 {s = table {
    Inf => x_ + "essere" ;
    InfClit => x_ + "r" ;
    Indi Pres Sg P1 => x_ + "sono" ;
    Indi Pres Sg P2 => x_ + "sei" ;
    Indi Pres Sg P3 => x_ + "è" ;
    Indi Pres Pl P1 => x_ + "siamo" ;
    Indi Pres Pl P2 => x_ + "siete" ;
    Indi Pres Pl P3 => x_ + "sono" ;
    Indi Imperf Sg P1 => x_ + "ero" ; --# notpresent
    Indi Imperf Sg P2 => x_ + "eri" ; --# notpresent
    Indi Imperf Sg P3 => x_ + "era" ; --# notpresent
    Indi Imperf Pl P1 => x_ + "eravamo" ; --# notpresent
    Indi Imperf Pl P2 => x_ + "eravate" ; --# notpresent
    Indi Imperf Pl P3 => x_ + "erano" ; --# notpresent
    Pass Sg P1 => x_ + "fui" ; --# notpresent
    Pass Sg P2 => x_ + "fosti" ; --# notpresent
    Pass Sg P3 => x_ + "fu" ; --# notpresent
    Pass Pl P1 => x_ + "fummo" ; --# notpresent
    Pass Pl P2 => x_ + "foste" ; --# notpresent
    Pass Pl P3 => x_ + "furono" ; --# notpresent
    Fut Sg P1 => x_ + "sarò" ; --# notpresent
    Fut Sg P2 => x_ + "sarai" ; --# notpresent
    Fut Sg P3 => x_ + "sarà" ; --# notpresent
    Fut Pl P1 => x_ + "saremo" ; --# notpresent
    Fut Pl P2 => x_ + "sarete" ; --# notpresent
    Fut Pl P3 => x_ + "saranno" ; --# notpresent
    Cong Pres Sg P1 => x_ + "sia" ;
    Cong Pres Sg P2 => x_ + "sia" ;
    Cong Pres Sg P3 => x_ + "sia" ;
    Cong Pres Pl P1 => x_ + "siamo" ;
    Cong Pres Pl P2 => x_ + "siate" ;
    Cong Pres Pl P3 => x_ + "siano" ;
    Cong Imperf Sg P1 => x_ + "fossi" ; --# notpresent
    Cong Imperf Sg P2 => x_ + "fossi" ; --# notpresent
    Cong Imperf Sg P3 => x_ + "fosse" ; --# notpresent
    Cong Imperf Pl P1 => x_ + "fossimo" ; --# notpresent
    Cong Imperf Pl P2 => x_ + "foste" ; --# notpresent
    Cong Imperf Pl P3 => x_ + "fossero" ; --# notpresent
    Cond Sg P1 => x_ + "sarei" ; --# notpresent
    Cond Sg P2 => x_ + "saresti" ; --# notpresent
    Cond Sg P3 => x_ + "sarebbe" ; --# notpresent
    Cond Pl P1 => x_ + "saremmo" ; --# notpresent
    Cond Pl P2 => x_ + "sareste" ; --# notpresent
    Cond Pl P3 => x_ + "sarebbero" ; --# notpresent
    Imper SgP2 => x_ + "sii" ;
    Imper PlP1 => x_ + "siamo" ;
    Imper PlP2 => x_ + "siate" ;
    Ger => x_ + "essendo" ;
    Part PresP Masc Sg => variants {} ;
    Part PresP Masc Pl => variants {} ;
    Part PresP Fem Sg => variants {} ;
    Part PresP Fem Pl => variants {} ;
    Part PassP Masc Sg => x_ + "stato" ;
    Part PassP Masc Pl => x_ + "stati" ;
    Part PassP Fem Sg => x_ + "stata" ;
    Part PassP Fem Pl => x_ + "state"
    }
  } ;

oper avere_2 : Str -> Verbo = \avere ->
  let x_ = Predef.tk 5 avere in
 {s = table {
    Inf => x_ + "avere" ;
    InfClit => x_ + "aver" ;
    Indi Pres Sg P1 => x_ + "ho" ;
    Indi Pres Sg P2 => x_ + "hai" ;
    Indi Pres Sg P3 => x_ + "ha" ;
    Indi Pres Pl P1 => x_ + "abbiamo" ;
    Indi Pres Pl P2 => x_ + "avete" ;
    Indi Pres Pl P3 => x_ + "hanno" ;
    Indi Imperf Sg P1 => x_ + "avevo" ; --# notpresent
    Indi Imperf Sg P2 => x_ + "avevi" ; --# notpresent
    Indi Imperf Sg P3 => x_ + "aveva" ; --# notpresent
    Indi Imperf Pl P1 => x_ + "avevamo" ; --# notpresent
    Indi Imperf Pl P2 => x_ + "avevate" ; --# notpresent
    Indi Imperf Pl P3 => x_ + "avevano" ; --# notpresent
    Pass Sg P1 => x_ + "ebbi" ; --# notpresent
    Pass Sg P2 => x_ + "avesti" ; --# notpresent
    Pass Sg P3 => x_ + "ebbe" ; --# notpresent
    Pass Pl P1 => x_ + "avemmo" ; --# notpresent
    Pass Pl P2 => x_ + "aveste" ; --# notpresent
    Pass Pl P3 => x_ + "ebbero" ; --# notpresent
    Fut Sg P1 => x_ + "avrò" ; --# notpresent
    Fut Sg P2 => x_ + "avrai" ; --# notpresent
    Fut Sg P3 => x_ + "avrà" ; --# notpresent
    Fut Pl P1 => x_ + "avremo" ; --# notpresent
    Fut Pl P2 => x_ + "avrete" ; --# notpresent
    Fut Pl P3 => x_ + "avranno" ; --# notpresent
    Cong Pres Sg P1 => x_ + "abbia" ;
    Cong Pres Sg P2 => x_ + "abbia" ;
    Cong Pres Sg P3 => x_ + "abbia" ;
    Cong Pres Pl P1 => x_ + "abbiamo" ;
    Cong Pres Pl P2 => x_ + "abbiate" ;
    Cong Pres Pl P3 => x_ + "abbiano" ;
    Cong Imperf Sg P1 => x_ + "avessi" ; --# notpresent
    Cong Imperf Sg P2 => x_ + "avessi" ; --# notpresent
    Cong Imperf Sg P3 => x_ + "avesse" ; --# notpresent
    Cong Imperf Pl P1 => x_ + "avessimo" ; --# notpresent
    Cong Imperf Pl P2 => x_ + "aveste" ; --# notpresent
    Cong Imperf Pl P3 => x_ + "avessero" ; --# notpresent
    Cond Sg P1 => x_ + "avrei" ; --# notpresent
    Cond Sg P2 => x_ + "avresti" ; --# notpresent
    Cond Sg P3 => x_ + "avrebbe" ; --# notpresent
    Cond Pl P1 => x_ + "avremmo" ; --# notpresent
    Cond Pl P2 => x_ + "avreste" ; --# notpresent
    Cond Pl P3 => x_ + "avrebbero" ; --# notpresent
    Imper SgP2 => x_ + "abbi" ;
    Imper PlP1 => x_ + "abbiamo" ;
    Imper PlP2 => x_ + "abbiate" ;
    Ger => x_ + "avendo" ;
    Part PresP Masc Sg => x_ + "avente" ;
    Part PresP Masc Pl => x_ + "aventi" ;
    Part PresP Fem Sg => x_ + "avente" ;
    Part PresP Fem Pl => x_ + "aventi" ;
    Part PassP Masc Sg => x_ + "avuto" ;
    Part PassP Masc Pl => x_ + "avuti" ;
    Part PassP Fem Sg => x_ + "avuta" ;
    Part PassP Fem Pl => x_ + "avute"
    }
  } ;

oper amare_6 : Str -> Verbo = \amare ->
  let am_ = Predef.tk 3 amare in
 {s = table {
    Inf => am_ + "are" ;
    InfClit => am_ + "ar" ;
    Indi Pres Sg P1 => am_ + "o" ;
    Indi Pres Sg P2 => am_ + "i" ;
    Indi Pres Sg P3 => am_ + "a" ;
    Indi Pres Pl P1 => am_ + "iamo" ;
    Indi Pres Pl P2 => am_ + "ate" ;
    Indi Pres Pl P3 => am_ + "ano" ;
    Indi Imperf Sg P1 => am_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => am_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => am_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => am_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => am_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => am_ + "avano" ; --# notpresent
    Pass Sg P1 => am_ + "ai" ; --# notpresent
    Pass Sg P2 => am_ + "asti" ; --# notpresent
    Pass Sg P3 => am_ + "ò" ; --# notpresent
    Pass Pl P1 => am_ + "ammo" ; --# notpresent
    Pass Pl P2 => am_ + "aste" ; --# notpresent
    Pass Pl P3 => am_ + "arono" ; --# notpresent
    Fut Sg P1 => am_ + "erò" ; --# notpresent
    Fut Sg P2 => am_ + "erai" ; --# notpresent
    Fut Sg P3 => am_ + "erà" ; --# notpresent
    Fut Pl P1 => am_ + "eremo" ; --# notpresent
    Fut Pl P2 => am_ + "erete" ; --# notpresent
    Fut Pl P3 => am_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => am_ + "i" ;
    Cong Pres Sg P2 => am_ + "i" ;
    Cong Pres Sg P3 => am_ + "i" ;
    Cong Pres Pl P1 => am_ + "iamo" ;
    Cong Pres Pl P2 => am_ + "iate" ;
    Cong Pres Pl P3 => am_ + "ino" ;
    Cong Imperf Sg P1 => am_ + "assi" ; --# notpresent
    Cong Imperf Sg P2 => am_ + "assi" ; --# notpresent
    Cong Imperf Sg P3 => am_ + "asse" ; --# notpresent
    Cong Imperf Pl P1 => am_ + "assimo" ; --# notpresent
    Cong Imperf Pl P2 => am_ + "aste" ; --# notpresent
    Cong Imperf Pl P3 => am_ + "assero" ; --# notpresent
    Cond Sg P1 => am_ + "erei" ; --# notpresent
    Cond Sg P2 => am_ + "eresti" ; --# notpresent
    Cond Sg P3 => am_ + "erebbe" ; --# notpresent
    Cond Pl P1 => am_ + "eremmo" ; --# notpresent
    Cond Pl P2 => am_ + "ereste" ; --# notpresent
    Cond Pl P3 => am_ + "erebbero" ; --# notpresent
    Imper SgP2 => am_ + "a" ;
    Imper PlP1 => am_ + "iamo" ;
    Imper PlP2 => am_ + "ate" ;
    Ger => am_ + "ando" ;
    Part PresP Masc Sg => am_ + "ante" ;
    Part PresP Masc Pl => am_ + "anti" ;
    Part PresP Fem Sg => am_ + "ante" ;
    Part PresP Fem Pl => am_ + "anti" ;
    Part PassP Masc Sg => am_ + "ato" ;
    Part PassP Masc Pl => am_ + "ati" ;
    Part PassP Fem Sg => am_ + "ata" ;
    Part PassP Fem Pl => am_ + "ate"
    }
  } ;

oper cercare_7 : Str -> Verbo = \cercare ->
  let cerc_ = Predef.tk 3 cercare in
 {s = table {
    Inf => cerc_ + "are" ;
    InfClit => cerc_ + "ar" ;
    Indi Pres Sg P1 => cerc_ + "o" ;
    Indi Pres Sg P2 => cerc_ + "hi" ;
    Indi Pres Sg P3 => cerc_ + "a" ;
    Indi Pres Pl P1 => cerc_ + "hiamo" ;
    Indi Pres Pl P2 => cerc_ + "ate" ;
    Indi Pres Pl P3 => cerc_ + "ano" ;
    Indi Imperf Sg P1 => cerc_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => cerc_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => cerc_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => cerc_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => cerc_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => cerc_ + "avano" ; --# notpresent
    Pass Sg P1 => cerc_ + "ai" ; --# notpresent
    Pass Sg P2 => cerc_ + "asti" ; --# notpresent
    Pass Sg P3 => cerc_ + "ò" ; --# notpresent
    Pass Pl P1 => cerc_ + "ammo" ; --# notpresent
    Pass Pl P2 => cerc_ + "aste" ; --# notpresent
    Pass Pl P3 => cerc_ + "arono" ; --# notpresent
    Fut Sg P1 => cerc_ + "herò" ; --# notpresent
    Fut Sg P2 => cerc_ + "herai" ; --# notpresent
    Fut Sg P3 => cerc_ + "herà" ; --# notpresent
    Fut Pl P1 => cerc_ + "heremo" ; --# notpresent
    Fut Pl P2 => cerc_ + "herete" ; --# notpresent
    Fut Pl P3 => cerc_ + "heranno" ; --# notpresent
    Cong Pres Sg P1 => cerc_ + "hi" ;
    Cong Pres Sg P2 => cerc_ + "hi" ;
    Cong Pres Sg P3 => cerc_ + "hi" ;
    Cong Pres Pl P1 => cerc_ + "hiamo" ;
    Cong Pres Pl P2 => cerc_ + "hiate" ;
    Cong Pres Pl P3 => cerc_ + "hino" ;
    Cong Imperf Sg P1 => cerc_ + "assi" ; --# notpresent
    Cong Imperf Sg P2 => cerc_ + "assi" ; --# notpresent
    Cong Imperf Sg P3 => cerc_ + "asse" ; --# notpresent
    Cong Imperf Pl P1 => cerc_ + "assimo" ; --# notpresent
    Cong Imperf Pl P2 => cerc_ + "aste" ; --# notpresent
    Cong Imperf Pl P3 => cerc_ + "assero" ; --# notpresent
    Cond Sg P1 => cerc_ + "herei" ; --# notpresent
    Cond Sg P2 => cerc_ + "heresti" ; --# notpresent
    Cond Sg P3 => cerc_ + "herebbe" ; --# notpresent
    Cond Pl P1 => cerc_ + "heremmo" ; --# notpresent
    Cond Pl P2 => cerc_ + "hereste" ; --# notpresent
    Cond Pl P3 => cerc_ + "herebbero" ; --# notpresent
    Imper SgP2 => cerc_ + "a" ;
    Imper PlP1 => cerc_ + "hiamo" ;
    Imper PlP2 => cerc_ + "ate" ;
    Ger => cerc_ + "ando" ;
    Part PresP Masc Sg => cerc_ + "ante" ;
    Part PresP Masc Pl => cerc_ + "anti" ;
    Part PresP Fem Sg => cerc_ + "ante" ;
    Part PresP Fem Pl => cerc_ + "anti" ;
    Part PassP Masc Sg => cerc_ + "ato" ;
    Part PassP Masc Pl => cerc_ + "ati" ;
    Part PassP Fem Sg => cerc_ + "ata" ;
    Part PassP Fem Pl => cerc_ + "ate"
    }
  } ;

oper legare_8 : Str -> Verbo = \legare ->
  let leg_ = Predef.tk 3 legare in
 {s = table {
    Inf => leg_ + "are" ;
    InfClit => leg_ + "ar" ;
    Indi Pres Sg P1 => leg_ + "o" ;
    Indi Pres Sg P2 => leg_ + "hi" ;
    Indi Pres Sg P3 => leg_ + "a" ;
    Indi Pres Pl P1 => leg_ + "hiamo" ;
    Indi Pres Pl P2 => leg_ + "ate" ;
    Indi Pres Pl P3 => leg_ + "ano" ;
    Indi Imperf Sg P1 => leg_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => leg_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => leg_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => leg_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => leg_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => leg_ + "avano" ; --# notpresent
    Pass Sg P1 => leg_ + "ai" ; --# notpresent
    Pass Sg P2 => leg_ + "asti" ; --# notpresent
    Pass Sg P3 => leg_ + "ò" ; --# notpresent
    Pass Pl P1 => leg_ + "ammo" ; --# notpresent
    Pass Pl P2 => leg_ + "aste" ; --# notpresent
    Pass Pl P3 => leg_ + "arono" ; --# notpresent
    Fut Sg P1 => leg_ + "herò" ; --# notpresent
    Fut Sg P2 => leg_ + "herai" ; --# notpresent
    Fut Sg P3 => leg_ + "herà" ; --# notpresent
    Fut Pl P1 => leg_ + "heremo" ; --# notpresent
    Fut Pl P2 => leg_ + "herete" ; --# notpresent
    Fut Pl P3 => leg_ + "heranno" ; --# notpresent
    Cong Pres Sg P1 => leg_ + "hi" ;
    Cong Pres Sg P2 => leg_ + "hi" ;
    Cong Pres Sg P3 => leg_ + "hi" ;
    Cong Pres Pl P1 => leg_ + "hiamo" ;
    Cong Pres Pl P2 => leg_ + "hiate" ;
    Cong Pres Pl P3 => leg_ + "hino" ;
    Cong Imperf Sg P1 => leg_ + "assi" ; --# notpresent
    Cong Imperf Sg P2 => leg_ + "assi" ; --# notpresent
    Cong Imperf Sg P3 => leg_ + "asse" ; --# notpresent
    Cong Imperf Pl P1 => leg_ + "assimo" ; --# notpresent
    Cong Imperf Pl P2 => leg_ + "aste" ; --# notpresent
    Cong Imperf Pl P3 => leg_ + "assero" ; --# notpresent
    Cond Sg P1 => leg_ + "herei" ; --# notpresent
    Cond Sg P2 => leg_ + "heresti" ; --# notpresent
    Cond Sg P3 => leg_ + "herebbe" ; --# notpresent
    Cond Pl P1 => leg_ + "heremmo" ; --# notpresent
    Cond Pl P2 => leg_ + "hereste" ; --# notpresent
    Cond Pl P3 => leg_ + "herebbero" ; --# notpresent
    Imper SgP2 => leg_ + "a" ;
    Imper PlP1 => leg_ + "hiamo" ;
    Imper PlP2 => leg_ + "ate" ;
    Ger => leg_ + "ando" ;
    Part PresP Masc Sg => leg_ + "ante" ;
    Part PresP Masc Pl => leg_ + "anti" ;
    Part PresP Fem Sg => leg_ + "ante" ;
    Part PresP Fem Pl => leg_ + "anti" ;
    Part PassP Masc Sg => leg_ + "ato" ;
    Part PassP Masc Pl => leg_ + "ati" ;
    Part PassP Fem Sg => leg_ + "ata" ;
    Part PassP Fem Pl => leg_ + "ate"
    }
  } ;

oper cominciare_9 : Str -> Verbo = \cominciare ->
  let cominc_ = Predef.tk 4 cominciare in
 {s = table {
    Inf => cominc_ + "iare" ;
    InfClit => cominc_ + "iar" ;
    Indi Pres Sg P1 => cominc_ + "io" ;
    Indi Pres Sg P2 => cominc_ + "i" ;
    Indi Pres Sg P3 => cominc_ + "ia" ;
    Indi Pres Pl P1 => cominc_ + "iamo" ;
    Indi Pres Pl P2 => cominc_ + "iate" ;
    Indi Pres Pl P3 => cominc_ + "iano" ;
    Indi Imperf Sg P1 => cominc_ + "iavo" ; --# notpresent
    Indi Imperf Sg P2 => cominc_ + "iavi" ; --# notpresent
    Indi Imperf Sg P3 => cominc_ + "iava" ; --# notpresent
    Indi Imperf Pl P1 => cominc_ + "iavamo" ; --# notpresent
    Indi Imperf Pl P2 => cominc_ + "iavate" ; --# notpresent
    Indi Imperf Pl P3 => cominc_ + "iavano" ; --# notpresent
    Pass Sg P1 => cominc_ + "iai" ; --# notpresent
    Pass Sg P2 => cominc_ + "iasti" ; --# notpresent
    Pass Sg P3 => cominc_ + "iò" ; --# notpresent
    Pass Pl P1 => cominc_ + "iammo" ; --# notpresent
    Pass Pl P2 => cominc_ + "iaste" ; --# notpresent
    Pass Pl P3 => cominc_ + "iarono" ; --# notpresent
    Fut Sg P1 => cominc_ + "erò" ; --# notpresent
    Fut Sg P2 => cominc_ + "erai" ; --# notpresent
    Fut Sg P3 => cominc_ + "erà" ; --# notpresent
    Fut Pl P1 => cominc_ + "eremo" ; --# notpresent
    Fut Pl P2 => cominc_ + "erete" ; --# notpresent
    Fut Pl P3 => cominc_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => cominc_ + "i" ;
    Cong Pres Sg P2 => cominc_ + "i" ;
    Cong Pres Sg P3 => cominc_ + "i" ;
    Cong Pres Pl P1 => cominc_ + "iamo" ;
    Cong Pres Pl P2 => cominc_ + "iate" ;
    Cong Pres Pl P3 => cominc_ + "ino" ;
    Cong Imperf Sg P1 => cominc_ + "iassi" ; --# notpresent
    Cong Imperf Sg P2 => cominc_ + "iassi" ; --# notpresent
    Cong Imperf Sg P3 => cominc_ + "iasse" ; --# notpresent
    Cong Imperf Pl P1 => cominc_ + "iassimo" ; --# notpresent
    Cong Imperf Pl P2 => cominc_ + "iaste" ; --# notpresent
    Cong Imperf Pl P3 => cominc_ + "iassero" ; --# notpresent
    Cond Sg P1 => cominc_ + "erei" ; --# notpresent
    Cond Sg P2 => cominc_ + "eresti" ; --# notpresent
    Cond Sg P3 => cominc_ + "erebbe" ; --# notpresent
    Cond Pl P1 => cominc_ + "eremmo" ; --# notpresent
    Cond Pl P2 => cominc_ + "ereste" ; --# notpresent
    Cond Pl P3 => cominc_ + "erebbero" ; --# notpresent
    Imper SgP2 => cominc_ + "ia" ;
    Imper PlP1 => cominc_ + "iamo" ;
    Imper PlP2 => cominc_ + "iate" ;
    Ger => cominc_ + "iando" ;
    Part PresP Masc Sg => cominc_ + "iante" ;
    Part PresP Masc Pl => cominc_ + "ianti" ;
    Part PresP Fem Sg => cominc_ + "iante" ;
    Part PresP Fem Pl => cominc_ + "ianti" ;
    Part PassP Masc Sg => cominc_ + "iato" ;
    Part PassP Masc Pl => cominc_ + "iati" ;
    Part PassP Fem Sg => cominc_ + "iata" ;
    Part PassP Fem Pl => cominc_ + "iate"
    }
  } ;

oper mangiare_10 : Str -> Verbo = \mangiare ->
  let mang_ = Predef.tk 4 mangiare in
 {s = table {
    Inf => mang_ + "iare" ;
    InfClit => mang_ + "iar" ;
    Indi Pres Sg P1 => mang_ + "io" ;
    Indi Pres Sg P2 => mang_ + "i" ;
    Indi Pres Sg P3 => mang_ + "ia" ;
    Indi Pres Pl P1 => mang_ + "iamo" ;
    Indi Pres Pl P2 => mang_ + "iate" ;
    Indi Pres Pl P3 => mang_ + "iano" ;
    Indi Imperf Sg P1 => mang_ + "iavo" ; --# notpresent
    Indi Imperf Sg P2 => mang_ + "iavi" ; --# notpresent
    Indi Imperf Sg P3 => mang_ + "iava" ; --# notpresent
    Indi Imperf Pl P1 => mang_ + "iavamo" ; --# notpresent
    Indi Imperf Pl P2 => mang_ + "iavate" ; --# notpresent
    Indi Imperf Pl P3 => mang_ + "iavano" ; --# notpresent
    Pass Sg P1 => mang_ + "iai" ; --# notpresent
    Pass Sg P2 => mang_ + "iasti" ; --# notpresent
    Pass Sg P3 => mang_ + "iò" ; --# notpresent
    Pass Pl P1 => mang_ + "iammo" ; --# notpresent
    Pass Pl P2 => mang_ + "iaste" ; --# notpresent
    Pass Pl P3 => mang_ + "iarono" ; --# notpresent
    Fut Sg P1 => mang_ + "erò" ; --# notpresent
    Fut Sg P2 => mang_ + "erai" ; --# notpresent
    Fut Sg P3 => mang_ + "erà" ; --# notpresent
    Fut Pl P1 => mang_ + "eremo" ; --# notpresent
    Fut Pl P2 => mang_ + "erete" ; --# notpresent
    Fut Pl P3 => mang_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => mang_ + "i" ;
    Cong Pres Sg P2 => mang_ + "i" ;
    Cong Pres Sg P3 => mang_ + "i" ;
    Cong Pres Pl P1 => mang_ + "iamo" ;
    Cong Pres Pl P2 => mang_ + "iate" ;
    Cong Pres Pl P3 => mang_ + "ino" ;
    Cong Imperf Sg P1 => mang_ + "iassi" ; --# notpresent
    Cong Imperf Sg P2 => mang_ + "iassi" ; --# notpresent
    Cong Imperf Sg P3 => mang_ + "iasse" ; --# notpresent
    Cong Imperf Pl P1 => mang_ + "iassimo" ; --# notpresent
    Cong Imperf Pl P2 => mang_ + "iaste" ; --# notpresent
    Cong Imperf Pl P3 => mang_ + "iassero" ; --# notpresent
    Cond Sg P1 => mang_ + "erei" ; --# notpresent
    Cond Sg P2 => mang_ + "eresti" ; --# notpresent
    Cond Sg P3 => mang_ + "erebbe" ; --# notpresent
    Cond Pl P1 => mang_ + "eremmo" ; --# notpresent
    Cond Pl P2 => mang_ + "ereste" ; --# notpresent
    Cond Pl P3 => mang_ + "erebbero" ; --# notpresent
    Imper SgP2 => mang_ + "ia" ;
    Imper PlP1 => mang_ + "iamo" ;
    Imper PlP2 => mang_ + "iate" ;
    Ger => mang_ + "iando" ;
    Part PresP Masc Sg => mang_ + "iante" ;
    Part PresP Masc Pl => mang_ + "ianti" ;
    Part PresP Fem Sg => mang_ + "iante" ;
    Part PresP Fem Pl => mang_ + "ianti" ;
    Part PassP Masc Sg => mang_ + "iato" ;
    Part PassP Masc Pl => mang_ + "iati" ;
    Part PassP Fem Sg => mang_ + "iata" ;
    Part PassP Fem Pl => mang_ + "iate"
    }
  } ;

oper inviare_11 : Str -> Verbo = \inviare ->
  let invi_ = Predef.tk 3 inviare in
 {s = table {
    Inf => invi_ + "are" ;
    InfClit => invi_ + "ar" ;
    Indi Pres Sg P1 => invi_ + "o" ;
    Indi Pres Sg P2 => invi_ + "i" ;
    Indi Pres Sg P3 => invi_ + "a" ;
    Indi Pres Pl P1 => invi_ + "iamo" ;
    Indi Pres Pl P2 => invi_ + "ate" ;
    Indi Pres Pl P3 => invi_ + "ano" ;
    Indi Imperf Sg P1 => invi_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => invi_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => invi_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => invi_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => invi_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => invi_ + "avano" ; --# notpresent
    Pass Sg P1 => invi_ + "ai" ; --# notpresent
    Pass Sg P2 => invi_ + "asti" ; --# notpresent
    Pass Sg P3 => invi_ + "ò" ; --# notpresent
    Pass Pl P1 => invi_ + "ammo" ; --# notpresent
    Pass Pl P2 => invi_ + "aste" ; --# notpresent
    Pass Pl P3 => invi_ + "arono" ; --# notpresent
    Fut Sg P1 => invi_ + "erò" ; --# notpresent
    Fut Sg P2 => invi_ + "erai" ; --# notpresent
    Fut Sg P3 => invi_ + "erà" ; --# notpresent
    Fut Pl P1 => invi_ + "eremo" ; --# notpresent
    Fut Pl P2 => invi_ + "erete" ; --# notpresent
    Fut Pl P3 => invi_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => invi_ + "i" ;
    Cong Pres Sg P2 => invi_ + "i" ;
    Cong Pres Sg P3 => invi_ + "i" ;
    Cong Pres Pl P1 => invi_ + "iamo" ;
    Cong Pres Pl P2 => invi_ + "iate" ;
    Cong Pres Pl P3 => invi_ + "ino" ;
    Cong Imperf Sg P1 => invi_ + "assi" ; --# notpresent
    Cong Imperf Sg P2 => invi_ + "assi" ; --# notpresent
    Cong Imperf Sg P3 => invi_ + "asse" ; --# notpresent
    Cong Imperf Pl P1 => invi_ + "assimo" ; --# notpresent
    Cong Imperf Pl P2 => invi_ + "aste" ; --# notpresent
    Cong Imperf Pl P3 => invi_ + "assero" ; --# notpresent
    Cond Sg P1 => invi_ + "erei" ; --# notpresent
    Cond Sg P2 => invi_ + "eresti" ; --# notpresent
    Cond Sg P3 => invi_ + "erebbe" ; --# notpresent
    Cond Pl P1 => invi_ + "eremmo" ; --# notpresent
    Cond Pl P2 => invi_ + "ereste" ; --# notpresent
    Cond Pl P3 => invi_ + "erebbero" ; --# notpresent
    Imper SgP2 => invi_ + "a" ;
    Imper PlP1 => invi_ + "iamo" ;
    Imper PlP2 => invi_ + "ate" ;
    Ger => invi_ + "ando" ;
    Part PresP Masc Sg => invi_ + "ante" ;
    Part PresP Masc Pl => invi_ + "anti" ;
    Part PresP Fem Sg => invi_ + "ante" ;
    Part PresP Fem Pl => invi_ + "anti" ;
    Part PassP Masc Sg => invi_ + "ato" ;
    Part PassP Masc Pl => invi_ + "ati" ;
    Part PassP Fem Sg => invi_ + "ata" ;
    Part PassP Fem Pl => invi_ + "ate"
    }
  } ;

oper studiare_12 : Str -> Verbo = \studiare ->
  let studi_ = Predef.tk 3 studiare in
 {s = table {
    Inf => studi_ + "are" ;
    InfClit => studi_ + "ar" ;
    Indi Pres Sg P1 => studi_ + "o" ;
    Indi Pres Sg P2 => studi_ + "" ;
    Indi Pres Sg P3 => studi_ + "a" ;
    Indi Pres Pl P1 => studi_ + "amo" ;
    Indi Pres Pl P2 => studi_ + "ate" ;
    Indi Pres Pl P3 => studi_ + "ano" ;
    Indi Imperf Sg P1 => studi_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => studi_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => studi_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => studi_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => studi_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => studi_ + "avano" ; --# notpresent
    Pass Sg P1 => studi_ + "ai" ; --# notpresent
    Pass Sg P2 => studi_ + "asti" ; --# notpresent
    Pass Sg P3 => studi_ + "ò" ; --# notpresent
    Pass Pl P1 => studi_ + "ammo" ; --# notpresent
    Pass Pl P2 => studi_ + "aste" ; --# notpresent
    Pass Pl P3 => studi_ + "arono" ; --# notpresent
    Fut Sg P1 => studi_ + "erò" ; --# notpresent
    Fut Sg P2 => studi_ + "erai" ; --# notpresent
    Fut Sg P3 => studi_ + "erà" ; --# notpresent
    Fut Pl P1 => studi_ + "eremo" ; --# notpresent
    Fut Pl P2 => studi_ + "erete" ; --# notpresent
    Fut Pl P3 => studi_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => studi_ + "" ;
    Cong Pres Sg P2 => studi_ + "" ;
    Cong Pres Sg P3 => studi_ + "" ;
    Cong Pres Pl P1 => studi_ + "amo" ;
    Cong Pres Pl P2 => studi_ + "ate" ;
    Cong Pres Pl P3 => studi_ + "no" ;
    Cong Imperf Sg P1 => studi_ + "assi" ; --# notpresent
    Cong Imperf Sg P2 => studi_ + "assi" ; --# notpresent
    Cong Imperf Sg P3 => studi_ + "asse" ; --# notpresent
    Cong Imperf Pl P1 => studi_ + "assimo" ; --# notpresent
    Cong Imperf Pl P2 => studi_ + "aste" ; --# notpresent
    Cong Imperf Pl P3 => studi_ + "assero" ; --# notpresent
    Cond Sg P1 => studi_ + "erei" ; --# notpresent
    Cond Sg P2 => studi_ + "eresti" ; --# notpresent
    Cond Sg P3 => studi_ + "erebbe" ; --# notpresent
    Cond Pl P1 => studi_ + "eremmo" ; --# notpresent
    Cond Pl P2 => studi_ + "ereste" ; --# notpresent
    Cond Pl P3 => studi_ + "erebbero" ; --# notpresent
    Imper SgP2 => studi_ + "a" ;
    Imper PlP1 => studi_ + "amo" ;
    Imper PlP2 => studi_ + "ate" ;
    Ger => studi_ + "ando" ;
    Part PresP Masc Sg => studi_ + "ante" ;
    Part PresP Masc Pl => studi_ + "anti" ;
    Part PresP Fem Sg => studi_ + "ante" ;
    Part PresP Fem Pl => studi_ + "anti" ;
    Part PassP Masc Sg => studi_ + "ato" ;
    Part PassP Masc Pl => studi_ + "ati" ;
    Part PassP Fem Sg => studi_ + "ata" ;
    Part PassP Fem Pl => studi_ + "ate"
    }
  } ;

oper giocare_13 : Str -> Verbo = \giocare ->
  let gioc_ = Predef.tk 3 giocare in
 {s = table {
    Inf => gioc_ + "are" ;
    InfClit => gioc_ + "ar" ;
    Indi Pres Sg P1 => gioc_ + "o" ;
    Indi Pres Sg P2 => gioc_ + "hi" ;
    Indi Pres Sg P3 => gioc_ + "a" ;
    Indi Pres Pl P1 => gioc_ + "hiamo" ;
    Indi Pres Pl P2 => gioc_ + "ate" ;
    Indi Pres Pl P3 => gioc_ + "ano" ;
    Indi Imperf Sg P1 => gioc_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => gioc_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => gioc_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => gioc_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => gioc_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => gioc_ + "avano" ; --# notpresent
    Pass Sg P1 => gioc_ + "ai" ; --# notpresent
    Pass Sg P2 => gioc_ + "asti" ; --# notpresent
    Pass Sg P3 => gioc_ + "ò" ; --# notpresent
    Pass Pl P1 => gioc_ + "ammo" ; --# notpresent
    Pass Pl P2 => gioc_ + "aste" ; --# notpresent
    Pass Pl P3 => gioc_ + "arono" ; --# notpresent
    Fut Sg P1 => gioc_ + "herò" ; --# notpresent
    Fut Sg P2 => gioc_ + "herai" ; --# notpresent
    Fut Sg P3 => gioc_ + "herà" ; --# notpresent
    Fut Pl P1 => gioc_ + "heremo" ; --# notpresent
    Fut Pl P2 => gioc_ + "herete" ; --# notpresent
    Fut Pl P3 => gioc_ + "heranno" ; --# notpresent
    Cong Pres Sg P1 => gioc_ + "hi" ;
    Cong Pres Sg P2 => gioc_ + "hi" ;
    Cong Pres Sg P3 => gioc_ + "hi" ;
    Cong Pres Pl P1 => gioc_ + "hiamo" ;
    Cong Pres Pl P2 => gioc_ + "hiate" ;
    Cong Pres Pl P3 => gioc_ + "hino" ;
    Cong Imperf Sg P1 => gioc_ + "assi" ; --# notpresent
    Cong Imperf Sg P2 => gioc_ + "assi" ; --# notpresent
    Cong Imperf Sg P3 => gioc_ + "asse" ; --# notpresent
    Cong Imperf Pl P1 => gioc_ + "assimo" ; --# notpresent
    Cong Imperf Pl P2 => gioc_ + "aste" ; --# notpresent
    Cong Imperf Pl P3 => gioc_ + "assero" ; --# notpresent
    Cond Sg P1 => gioc_ + "herei" ; --# notpresent
    Cond Sg P2 => gioc_ + "heresti" ; --# notpresent
    Cond Sg P3 => gioc_ + "herebbe" ; --# notpresent
    Cond Pl P1 => gioc_ + "heremmo" ; --# notpresent
    Cond Pl P2 => gioc_ + "hereste" ; --# notpresent
    Cond Pl P3 => gioc_ + "herebbero" ; --# notpresent
    Imper SgP2 => gioc_ + "a" ;
    Imper PlP1 => gioc_ + "hiamo" ;
    Imper PlP2 => gioc_ + "ate" ;
    Ger => gioc_ + "ando" ;
    Part PresP Masc Sg => gioc_ + "ante" ;
    Part PresP Masc Pl => gioc_ + "anti" ;
    Part PresP Fem Sg => gioc_ + "ante" ;
    Part PresP Fem Pl => gioc_ + "anti" ;
    Part PassP Masc Sg => gioc_ + "ato" ;
    Part PassP Masc Pl => gioc_ + "ati" ;
    Part PassP Fem Sg => gioc_ + "ata" ;
    Part PassP Fem Pl => gioc_ + "ate"
    }
  } ;

oper andare_14 : Str -> Verbo = \andare ->
  let x_ = Predef.tk 6 andare in
 {s = table {
    Inf => x_ + "andare" ;
    InfClit => x_ + "andar" ;
    Indi Pres Sg P1 => variants {x_ + "vo" ; x_ + "vado"} ;
    Indi Pres Sg P2 => x_ + "vai" ;
    Indi Pres Sg P3 => x_ + "va" ;
    Indi Pres Pl P1 => x_ + "andiamo" ;
    Indi Pres Pl P2 => x_ + "andate" ;
    Indi Pres Pl P3 => x_ + "vanno" ;
    Indi Imperf Sg P1 => x_ + "andavo" ; --# notpresent
    Indi Imperf Sg P2 => x_ + "andavi" ; --# notpresent
    Indi Imperf Sg P3 => x_ + "andava" ; --# notpresent
    Indi Imperf Pl P1 => x_ + "andavamo" ; --# notpresent
    Indi Imperf Pl P2 => x_ + "andavate" ; --# notpresent
    Indi Imperf Pl P3 => x_ + "andavano" ; --# notpresent
    Pass Sg P1 => x_ + "andai" ; --# notpresent
    Pass Sg P2 => x_ + "andasti" ; --# notpresent
    Pass Sg P3 => x_ + "andò" ; --# notpresent
    Pass Pl P1 => x_ + "andammo" ; --# notpresent
    Pass Pl P2 => x_ + "andaste" ; --# notpresent
    Pass Pl P3 => x_ + "andarono" ; --# notpresent
    Fut Sg P1 => x_ + "andrò" ; --# notpresent
    Fut Sg P2 => x_ + "andrai" ; --# notpresent
    Fut Sg P3 => x_ + "andrà" ; --# notpresent
    Fut Pl P1 => x_ + "andremo" ; --# notpresent
    Fut Pl P2 => x_ + "andrete" ; --# notpresent
    Fut Pl P3 => x_ + "andranno" ; --# notpresent
    Cong Pres Sg P1 => x_ + "vada" ;
    Cong Pres Sg P2 => x_ + "vada" ;
    Cong Pres Sg P3 => x_ + "vada" ;
    Cong Pres Pl P1 => x_ + "andiamo" ;
    Cong Pres Pl P2 => x_ + "andiate" ;
    Cong Pres Pl P3 => x_ + "vadano" ;
    Cong Imperf Sg P1 => x_ + "andassi" ; --# notpresent
    Cong Imperf Sg P2 => x_ + "andassi" ; --# notpresent
    Cong Imperf Sg P3 => x_ + "andasse" ; --# notpresent
    Cong Imperf Pl P1 => x_ + "andassimo" ; --# notpresent
    Cong Imperf Pl P2 => x_ + "andaste" ; --# notpresent
    Cong Imperf Pl P3 => x_ + "andassero" ; --# notpresent
    Cond Sg P1 => x_ + "andrei" ; --# notpresent
    Cond Sg P2 => x_ + "andresti" ; --# notpresent
    Cond Sg P3 => x_ + "andrebbe" ; --# notpresent
    Cond Pl P1 => x_ + "andremmo" ; --# notpresent
    Cond Pl P2 => x_ + "andreste" ; --# notpresent
    Cond Pl P3 => x_ + "andrebbero" ; --# notpresent
    Imper SgP2 => x_ + "vai" ;
    Imper PlP1 => x_ + "andiamo" ;
    Imper PlP2 => x_ + "andate" ;
    Ger => x_ + "andando" ;
    Part PresP Masc Sg => x_ + "andante" ;
    Part PresP Masc Pl => x_ + "andanti" ;
    Part PresP Fem Sg => x_ + "andante" ;
    Part PresP Fem Pl => x_ + "andanti" ;
    Part PassP Masc Sg => x_ + "andato" ;
    Part PassP Masc Pl => x_ + "andati" ;
    Part PassP Fem Sg => x_ + "andata" ;
    Part PassP Fem Pl => x_ + "andate"
    }
  } ;

oper riandare_14b : Str -> Verbo = \riandare ->
  let ri_ = Predef.tk 6 riandare in
 {s = table {
    Inf => ri_ + "andare" ;
    InfClit => ri_ + "andar" ;
    Indi Pres Sg P1 => variants {ri_ + "vo" ; ri_ + "vado"} ;
    Indi Pres Sg P2 => ri_ + "vai" ;
    Indi Pres Sg P3 => ri_ + "và" ;
    Indi Pres Pl P1 => ri_ + "andiamo" ;
    Indi Pres Pl P2 => ri_ + "andate" ;
    Indi Pres Pl P3 => ri_ + "vanno" ;
    Indi Imperf Sg P1 => ri_ + "andavo" ; --# notpresent
    Indi Imperf Sg P2 => ri_ + "andavi" ; --# notpresent
    Indi Imperf Sg P3 => ri_ + "andava" ; --# notpresent
    Indi Imperf Pl P1 => ri_ + "andavamo" ; --# notpresent
    Indi Imperf Pl P2 => ri_ + "andavate" ; --# notpresent
    Indi Imperf Pl P3 => ri_ + "andavano" ; --# notpresent
    Pass Sg P1 => ri_ + "andai" ; --# notpresent
    Pass Sg P2 => ri_ + "andasti" ; --# notpresent
    Pass Sg P3 => ri_ + "andò" ; --# notpresent
    Pass Pl P1 => ri_ + "andammo" ; --# notpresent
    Pass Pl P2 => ri_ + "andaste" ; --# notpresent
    Pass Pl P3 => ri_ + "andarono" ; --# notpresent
    Fut Sg P1 => ri_ + "andrò" ; --# notpresent
    Fut Sg P2 => ri_ + "andrai" ; --# notpresent
    Fut Sg P3 => ri_ + "andrà" ; --# notpresent
    Fut Pl P1 => ri_ + "andremo" ; --# notpresent
    Fut Pl P2 => ri_ + "andrete" ; --# notpresent
    Fut Pl P3 => ri_ + "andranno" ; --# notpresent
    Cong Pres Sg P1 => ri_ + "vada" ;
    Cong Pres Sg P2 => ri_ + "vada" ;
    Cong Pres Sg P3 => ri_ + "vada" ;
    Cong Pres Pl P1 => ri_ + "andiamo" ;
    Cong Pres Pl P2 => ri_ + "andiate" ;
    Cong Pres Pl P3 => ri_ + "vadano" ;
    Cong Imperf Sg P1 => ri_ + "andassi" ; --# notpresent
    Cong Imperf Sg P2 => ri_ + "andassi" ; --# notpresent
    Cong Imperf Sg P3 => ri_ + "andasse" ; --# notpresent
    Cong Imperf Pl P1 => ri_ + "andassimo" ; --# notpresent
    Cong Imperf Pl P2 => ri_ + "andaste" ; --# notpresent
    Cong Imperf Pl P3 => ri_ + "andassero" ; --# notpresent
    Cond Sg P1 => ri_ + "andrei" ; --# notpresent
    Cond Sg P2 => ri_ + "andresti" ; --# notpresent
    Cond Sg P3 => ri_ + "andrebbe" ; --# notpresent
    Cond Pl P1 => ri_ + "andremmo" ; --# notpresent
    Cond Pl P2 => ri_ + "andreste" ; --# notpresent
    Cond Pl P3 => ri_ + "andrebbero" ; --# notpresent
    Imper SgP2 => ri_ + "vai" ;
    Imper PlP1 => ri_ + "andiamo" ;
    Imper PlP2 => ri_ + "andate" ;
    Ger => ri_ + "andando" ;
    Part PresP Masc Sg => ri_ + "andante" ;
    Part PresP Masc Pl => ri_ + "andanti" ;
    Part PresP Fem Sg => ri_ + "andante" ;
    Part PresP Fem Pl => ri_ + "andanti" ;
    Part PassP Masc Sg => ri_ + "andato" ;
    Part PassP Masc Pl => ri_ + "andati" ;
    Part PassP Fem Sg => ri_ + "andata" ;
    Part PassP Fem Pl => ri_ + "andate"
    }
  } ;

oper dare_15 : Str -> Verbo = \dare ->
  let d_ = Predef.tk 3 dare in
 {s = table {
    Inf => d_ + "are" ;
    InfClit => d_ + "a" ;
    Indi Pres Sg P1 => d_ + "o" ;
    Indi Pres Sg P2 => d_ + "ai" ;
    Indi Pres Sg P3 => d_ + "à" ;
    Indi Pres Pl P1 => d_ + "iamo" ;
    Indi Pres Pl P2 => d_ + "ate" ;
    Indi Pres Pl P3 => d_ + "anno" ;
    Indi Imperf Sg P1 => d_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => d_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => d_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => d_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => d_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => d_ + "avano" ; --# notpresent
    Pass Sg P1 => d_ + "iedi" ; --# notpresent
    Pass Sg P2 => d_ + "esti" ; --# notpresent
    Pass Sg P3 => d_ + "iede" ; --# notpresent
    Pass Pl P1 => d_ + "emmo" ; --# notpresent
    Pass Pl P2 => d_ + "este" ; --# notpresent
    Pass Pl P3 => d_ + "iedero" ; --# notpresent
    Fut Sg P1 => d_ + "arò" ; --# notpresent
    Fut Sg P2 => d_ + "arai" ; --# notpresent
    Fut Sg P3 => d_ + "arà" ; --# notpresent
    Fut Pl P1 => d_ + "aremo" ; --# notpresent
    Fut Pl P2 => d_ + "arete" ; --# notpresent
    Fut Pl P3 => d_ + "aranno" ; --# notpresent
    Cong Pres Sg P1 => d_ + "ia" ;
    Cong Pres Sg P2 => d_ + "ia" ;
    Cong Pres Sg P3 => d_ + "ia" ;
    Cong Pres Pl P1 => d_ + "iamo" ;
    Cong Pres Pl P2 => d_ + "iate" ;
    Cong Pres Pl P3 => d_ + "iano" ;
    Cong Imperf Sg P1 => d_ + "essi" ; --# notpresent
    Cong Imperf Sg P2 => d_ + "essi" ; --# notpresent
    Cong Imperf Sg P3 => d_ + "esse" ; --# notpresent
    Cong Imperf Pl P1 => d_ + "essimo" ; --# notpresent
    Cong Imperf Pl P2 => d_ + "este" ; --# notpresent
    Cong Imperf Pl P3 => d_ + "essero" ; --# notpresent
    Cond Sg P1 => d_ + "arei" ; --# notpresent
    Cond Sg P2 => d_ + "aresti" ; --# notpresent
    Cond Sg P3 => d_ + "arebbe" ; --# notpresent
    Cond Pl P1 => d_ + "aremmo" ; --# notpresent
    Cond Pl P2 => d_ + "areste" ; --# notpresent
    Cond Pl P3 => d_ + "arebbero" ; --# notpresent
    Imper SgP2 => d_ + "ai" ;
    Imper PlP1 => d_ + "iamo" ;
    Imper PlP2 => d_ + "iate" ;
    Ger => d_ + "ando" ;
    Part PresP Masc Sg => d_ + "ante" ;
    Part PresP Masc Pl => d_ + "anti" ;
    Part PresP Fem Sg => d_ + "ante" ;
    Part PresP Fem Pl => d_ + "anti" ;
    Part PassP Masc Sg => d_ + "ato" ;
    Part PassP Masc Pl => d_ + "ati" ;
    Part PassP Fem Sg => d_ + "ata" ;
    Part PassP Fem Pl => d_ + "ate"
    }
  } ;

oper stare_16 : Str -> Verbo = \stare ->
  let st_ = Predef.tk 3 stare in
 {s = table {
    Inf => st_ + "are" ;
    InfClit => st_ + "a" ;
    Indi Pres Sg P1 => st_ + "o" ;
    Indi Pres Sg P2 => st_ + "ai" ;
    Indi Pres Sg P3 => st_ + "a" ;
    Indi Pres Pl P1 => st_ + "iamo" ;
    Indi Pres Pl P2 => st_ + "ate" ;
    Indi Pres Pl P3 => st_ + "anno" ;
    Indi Imperf Sg P1 => st_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => st_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => st_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => st_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => st_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => st_ + "avano" ; --# notpresent
    Pass Sg P1 => st_ + "etti" ; --# notpresent
    Pass Sg P2 => st_ + "esti" ; --# notpresent
    Pass Sg P3 => st_ + "ette" ; --# notpresent
    Pass Pl P1 => st_ + "emmo" ; --# notpresent
    Pass Pl P2 => st_ + "este" ; --# notpresent
    Pass Pl P3 => st_ + "ettero" ; --# notpresent
    Fut Sg P1 => st_ + "arò" ; --# notpresent
    Fut Sg P2 => st_ + "arai" ; --# notpresent
    Fut Sg P3 => st_ + "arà" ; --# notpresent
    Fut Pl P1 => st_ + "aremo" ; --# notpresent
    Fut Pl P2 => st_ + "arete" ; --# notpresent
    Fut Pl P3 => st_ + "aranno" ; --# notpresent
    Cong Pres Sg P1 => st_ + "ia" ;
    Cong Pres Sg P2 => st_ + "ia" ;
    Cong Pres Sg P3 => st_ + "ia" ;
    Cong Pres Pl P1 => st_ + "iamo" ;
    Cong Pres Pl P2 => st_ + "iate" ;
    Cong Pres Pl P3 => st_ + "iano" ;
    Cong Imperf Sg P1 => st_ + "essi" ; --# notpresent
    Cong Imperf Sg P2 => st_ + "essi" ; --# notpresent
    Cong Imperf Sg P3 => st_ + "esse" ; --# notpresent
    Cong Imperf Pl P1 => st_ + "essimo" ; --# notpresent
    Cong Imperf Pl P2 => st_ + "este" ; --# notpresent
    Cong Imperf Pl P3 => st_ + "essero" ; --# notpresent
    Cond Sg P1 => st_ + "arei" ; --# notpresent
    Cond Sg P2 => st_ + "aresti" ; --# notpresent
    Cond Sg P3 => st_ + "arebbe" ; --# notpresent
    Cond Pl P1 => st_ + "aremmo" ; --# notpresent
    Cond Pl P2 => st_ + "areste" ; --# notpresent
    Cond Pl P3 => st_ + "arebbero" ; --# notpresent
    Imper SgP2 => variants {st_ + "a`" ; st_ + "ai"} ;
    Imper PlP1 => st_ + "iamo" ;
    Imper PlP2 => st_ + "iate" ;
    Ger => st_ + "ando" ;
    Part PresP Masc Sg => st_ + "ante" ;
    Part PresP Masc Pl => st_ + "anti" ;
    Part PresP Fem Sg => st_ + "ante" ;
    Part PresP Fem Pl => st_ + "anti" ;
    Part PassP Masc Sg => st_ + "ato" ;
    Part PassP Masc Pl => st_ + "ati" ;
    Part PassP Fem Sg => st_ + "ata" ;
    Part PassP Fem Pl => st_ + "ate"
    }
  } ;

oper agitare_17 : Str -> Verbo = \agitare ->
  let agit_ = Predef.tk 3 agitare in
 {s = table {
    Inf => agit_ + "are" ;
    InfClit => agit_ + "ar" ;
    Indi Pres Sg P1 => agit_ + "o" ;
    Indi Pres Sg P2 => agit_ + "i" ;
    Indi Pres Sg P3 => agit_ + "a" ;
    Indi Pres Pl P1 => agit_ + "iamo" ;
    Indi Pres Pl P2 => agit_ + "ate" ;
    Indi Pres Pl P3 => agit_ + "ano" ;
    Indi Imperf Sg P1 => agit_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => agit_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => agit_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => agit_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => agit_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => agit_ + "avano" ; --# notpresent
    Pass Sg P1 => agit_ + "ai" ; --# notpresent
    Pass Sg P2 => agit_ + "asti" ; --# notpresent
    Pass Sg P3 => agit_ + "ò" ; --# notpresent
    Pass Pl P1 => agit_ + "ammo" ; --# notpresent
    Pass Pl P2 => agit_ + "aste" ; --# notpresent
    Pass Pl P3 => agit_ + "arono" ; --# notpresent
    Fut Sg P1 => agit_ + "erò" ; --# notpresent
    Fut Sg P2 => agit_ + "erai" ; --# notpresent
    Fut Sg P3 => agit_ + "erà" ; --# notpresent
    Fut Pl P1 => agit_ + "eremo" ; --# notpresent
    Fut Pl P2 => agit_ + "erete" ; --# notpresent
    Fut Pl P3 => agit_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => agit_ + "i" ;
    Cong Pres Sg P2 => agit_ + "i" ;
    Cong Pres Sg P3 => agit_ + "i" ;
    Cong Pres Pl P1 => agit_ + "iamo" ;
    Cong Pres Pl P2 => agit_ + "iate" ;
    Cong Pres Pl P3 => agit_ + "ino" ;
    Cong Imperf Sg P1 => agit_ + "assi" ; --# notpresent
    Cong Imperf Sg P2 => agit_ + "assi" ; --# notpresent
    Cong Imperf Sg P3 => agit_ + "asse" ; --# notpresent
    Cong Imperf Pl P1 => agit_ + "assimo" ; --# notpresent
    Cong Imperf Pl P2 => agit_ + "aste" ; --# notpresent
    Cong Imperf Pl P3 => agit_ + "assero" ; --# notpresent
    Cond Sg P1 => agit_ + "erei" ; --# notpresent
    Cond Sg P2 => agit_ + "eresti" ; --# notpresent
    Cond Sg P3 => agit_ + "erebbe" ; --# notpresent
    Cond Pl P1 => agit_ + "eremmo" ; --# notpresent
    Cond Pl P2 => agit_ + "ereste" ; --# notpresent
    Cond Pl P3 => agit_ + "erebbero" ; --# notpresent
    Imper SgP2 => agit_ + "a" ;
    Imper PlP1 => agit_ + "iamo" ;
    Imper PlP2 => agit_ + "ate" ;
    Ger => agit_ + "ando" ;
    Part PresP Masc Sg => agit_ + "ante" ;
    Part PresP Masc Pl => agit_ + "anti" ;
    Part PresP Fem Sg => agit_ + "ante" ;
    Part PresP Fem Pl => agit_ + "anti" ;
    Part PassP Masc Sg => agit_ + "ato" ;
    Part PassP Masc Pl => agit_ + "ati" ;
    Part PassP Fem Sg => agit_ + "ata" ;
    Part PassP Fem Pl => agit_ + "ate"
    }
  } ;

oper immaginare_18 : Str -> Verbo = \immaginare ->
  let immagin_ = Predef.tk 3 immaginare in
 {s = table {
    Inf => immagin_ + "are" ;
    InfClit => immagin_ + "ar" ;
    Indi Pres Sg P1 => immagin_ + "o" ;
    Indi Pres Sg P2 => immagin_ + "i" ;
    Indi Pres Sg P3 => immagin_ + "a" ;
    Indi Pres Pl P1 => immagin_ + "iamo" ;
    Indi Pres Pl P2 => immagin_ + "ate" ;
    Indi Pres Pl P3 => immagin_ + "ano" ;
    Indi Imperf Sg P1 => immagin_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => immagin_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => immagin_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => immagin_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => immagin_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => immagin_ + "avano" ; --# notpresent
    Pass Sg P1 => immagin_ + "ai" ; --# notpresent
    Pass Sg P2 => immagin_ + "asti" ; --# notpresent
    Pass Sg P3 => immagin_ + "ò" ; --# notpresent
    Pass Pl P1 => immagin_ + "ammo" ; --# notpresent
    Pass Pl P2 => immagin_ + "aste" ; --# notpresent
    Pass Pl P3 => immagin_ + "arono" ; --# notpresent
    Fut Sg P1 => immagin_ + "erò" ; --# notpresent
    Fut Sg P2 => immagin_ + "erai" ; --# notpresent
    Fut Sg P3 => immagin_ + "erà" ; --# notpresent
    Fut Pl P1 => immagin_ + "eremo" ; --# notpresent
    Fut Pl P2 => immagin_ + "erete" ; --# notpresent
    Fut Pl P3 => immagin_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => immagin_ + "i" ;
    Cong Pres Sg P2 => immagin_ + "i" ;
    Cong Pres Sg P3 => immagin_ + "i" ;
    Cong Pres Pl P1 => immagin_ + "iamo" ;
    Cong Pres Pl P2 => immagin_ + "iate" ;
    Cong Pres Pl P3 => immagin_ + "ino" ;
    Cong Imperf Sg P1 => immagin_ + "assi" ; --# notpresent
    Cong Imperf Sg P2 => immagin_ + "assi" ; --# notpresent
    Cong Imperf Sg P3 => immagin_ + "asse" ; --# notpresent
    Cong Imperf Pl P1 => immagin_ + "assimo" ; --# notpresent
    Cong Imperf Pl P2 => immagin_ + "aste" ; --# notpresent
    Cong Imperf Pl P3 => immagin_ + "assero" ; --# notpresent
    Cond Sg P1 => immagin_ + "erei" ; --# notpresent
    Cond Sg P2 => immagin_ + "eresti" ; --# notpresent
    Cond Sg P3 => immagin_ + "erebbe" ; --# notpresent
    Cond Pl P1 => immagin_ + "eremmo" ; --# notpresent
    Cond Pl P2 => immagin_ + "ereste" ; --# notpresent
    Cond Pl P3 => immagin_ + "erebbero" ; --# notpresent
    Imper SgP2 => immagin_ + "a" ;
    Imper PlP1 => immagin_ + "iamo" ;
    Imper PlP2 => immagin_ + "ate" ;
    Ger => immagin_ + "ando" ;
    Part PresP Masc Sg => immagin_ + "ante" ;
    Part PresP Masc Pl => immagin_ + "anti" ;
    Part PresP Fem Sg => immagin_ + "ante" ;
    Part PresP Fem Pl => immagin_ + "anti" ;
    Part PassP Masc Sg => immagin_ + "ato" ;
    Part PassP Masc Pl => immagin_ + "ati" ;
    Part PassP Fem Sg => immagin_ + "ata" ;
    Part PassP Fem Pl => immagin_ + "ate"
    }
  } ;

oper modificare_19 : Str -> Verbo = \modificare ->
  let modific_ = Predef.tk 3 modificare in
 {s = table {
    Inf => modific_ + "are" ;
    InfClit => modific_ + "ar" ;
    Indi Pres Sg P1 => modific_ + "o" ;
    Indi Pres Sg P2 => modific_ + "hi" ;
    Indi Pres Sg P3 => modific_ + "a" ;
    Indi Pres Pl P1 => modific_ + "hiamo" ;
    Indi Pres Pl P2 => modific_ + "ate" ;
    Indi Pres Pl P3 => modific_ + "ano" ;
    Indi Imperf Sg P1 => modific_ + "avo" ; --# notpresent
    Indi Imperf Sg P2 => modific_ + "avi" ; --# notpresent
    Indi Imperf Sg P3 => modific_ + "ava" ; --# notpresent
    Indi Imperf Pl P1 => modific_ + "avamo" ; --# notpresent
    Indi Imperf Pl P2 => modific_ + "avate" ; --# notpresent
    Indi Imperf Pl P3 => modific_ + "avano" ; --# notpresent
    Pass Sg P1 => modific_ + "ai" ; --# notpresent
    Pass Sg P2 => modific_ + "asti" ; --# notpresent
    Pass Sg P3 => modific_ + "ò" ; --# notpresent
    Pass Pl P1 => modific_ + "ammo" ; --# notpresent
    Pass Pl P2 => modific_ + "aste" ; --# notpresent
    Pass Pl P3 => modific_ + "arono" ; --# notpresent
    Fut Sg P1 => modific_ + "herò" ; --# notpresent
    Fut Sg P2 => modific_ + "herai" ; --# notpresent
    Fut Sg P3 => modific_ + "herà" ; --# notpresent
    Fut Pl P1 => modific_ + "heremo" ; --# notpresent
    Fut Pl P2 => modific_ + "herete" ; --# notpresent
    Fut Pl P3 => modific_ + "heranno" ; --# notpresent
    Cong Pres Sg P1 => modific_ + "hi" ;
    Cong Pres Sg P2 => modific_ + "hi" ;
    Cong Pres Sg P3 => modific_ + "hi" ;
    Cong Pres Pl P1 => modific_ + "hiamo" ;
    Cong Pres Pl P2 => modific_ + "hiate" ;
    Cong Pres Pl P3 => modific_ + "hino" ;
    Cong Imperf Sg P1 => modific_ + "assi" ; --# notpresent
    Cong Imperf Sg P2 => modific_ + "assi" ; --# notpresent
    Cong Imperf Sg P3 => modific_ + "asse" ; --# notpresent
    Cong Imperf Pl P1 => modific_ + "assimo" ; --# notpresent
    Cong Imperf Pl P2 => modific_ + "aste" ; --# notpresent
    Cong Imperf Pl P3 => modific_ + "assero" ; --# notpresent
    Cond Sg P1 => modific_ + "herei" ; --# notpresent
    Cond Sg P2 => modific_ + "heresti" ; --# notpresent
    Cond Sg P3 => modific_ + "herebbe" ; --# notpresent
    Cond Pl P1 => modific_ + "heremmo" ; --# notpresent
    Cond Pl P2 => modific_ + "hereste" ; --# notpresent
    Cond Pl P3 => modific_ + "herebbero" ; --# notpresent
    Imper SgP2 => modific_ + "a" ;
    Imper PlP1 => modific_ + "hiamo" ;
    Imper PlP2 => modific_ + "ate" ;
    Ger => modific_ + "ando" ;
    Part PresP Masc Sg => modific_ + "ante" ;
    Part PresP Masc Pl => modific_ + "anti" ;
    Part PresP Fem Sg => modific_ + "ante" ;
    Part PresP Fem Pl => modific_ + "anti" ;
    Part PassP Masc Sg => modific_ + "ato" ;
    Part PassP Masc Pl => modific_ + "ati" ;
    Part PassP Fem Sg => modific_ + "ata" ;
    Part PassP Fem Pl => modific_ + "ate"
    }
  } ;

oper temere_20 : Str -> Verbo = \temere ->
  let tem_ = Predef.tk 3 temere in
 {s = table {
    Inf => tem_ + "ere" ;
    InfClit => tem_ + "er" ;
    Indi Pres Sg P1 => tem_ + "o" ;
    Indi Pres Sg P2 => tem_ + "i" ;
    Indi Pres Sg P3 => tem_ + "e" ;
    Indi Pres Pl P1 => tem_ + "iamo" ;
    Indi Pres Pl P2 => tem_ + "ete" ;
    Indi Pres Pl P3 => tem_ + "ono" ;
    Indi Imperf Sg P1 => tem_ + "evo" ; --# notpresent
    Indi Imperf Sg P2 => tem_ + "evi" ; --# notpresent
    Indi Imperf Sg P3 => tem_ + "eva" ; --# notpresent
    Indi Imperf Pl P1 => tem_ + "evamo" ; --# notpresent
    Indi Imperf Pl P2 => tem_ + "evate" ; --# notpresent
    Indi Imperf Pl P3 => tem_ + "evano" ; --# notpresent
    Pass Sg P1 => tem_ + "etti" ; --# notpresent
    Pass Sg P2 => tem_ + "esti" ; --# notpresent
    Pass Sg P3 => tem_ + "ette" ; --# notpresent
    Pass Pl P1 => tem_ + "emmo" ; --# notpresent
    Pass Pl P2 => tem_ + "este" ; --# notpresent
    Pass Pl P3 => tem_ + "ettero" ; --# notpresent
    Fut Sg P1 => tem_ + "erò" ; --# notpresent
    Fut Sg P2 => tem_ + "erai" ; --# notpresent
    Fut Sg P3 => tem_ + "erà" ; --# notpresent
    Fut Pl P1 => tem_ + "eremo" ; --# notpresent
    Fut Pl P2 => tem_ + "erete" ; --# notpresent
    Fut Pl P3 => tem_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => tem_ + "a" ;
    Cong Pres Sg P2 => tem_ + "a" ;
    Cong Pres Sg P3 => tem_ + "a" ;
    Cong Pres Pl P1 => tem_ + "iamo" ;
    Cong Pres Pl P2 => tem_ + "iate" ;
    Cong Pres Pl P3 => tem_ + "ano" ;
    Cong Imperf Sg P1 => tem_ + "essi" ; --# notpresent
    Cong Imperf Sg P2 => tem_ + "essi" ; --# notpresent
    Cong Imperf Sg P3 => tem_ + "esse" ; --# notpresent
    Cong Imperf Pl P1 => tem_ + "essimo" ; --# notpresent
    Cong Imperf Pl P2 => tem_ + "este" ; --# notpresent
    Cong Imperf Pl P3 => tem_ + "essero" ; --# notpresent
    Cond Sg P1 => tem_ + "erei" ; --# notpresent
    Cond Sg P2 => tem_ + "eresti" ; --# notpresent
    Cond Sg P3 => tem_ + "erebbe" ; --# notpresent
    Cond Pl P1 => tem_ + "eremmo" ; --# notpresent
    Cond Pl P2 => tem_ + "ereste" ; --# notpresent
    Cond Pl P3 => tem_ + "erebbero" ; --# notpresent
    Imper SgP2 => tem_ + "i" ;
    Imper PlP1 => tem_ + "iamo" ;
    Imper PlP2 => tem_ + "ete" ;
    Ger => tem_ + "endo" ;
    Part PresP Masc Sg => tem_ + "ente" ;
    Part PresP Masc Pl => tem_ + "enti" ;
    Part PresP Fem Sg => tem_ + "ente" ;
    Part PresP Fem Pl => tem_ + "enti" ;
    Part PassP Masc Sg => tem_ + "uto" ;
    Part PassP Masc Pl => tem_ + "uti" ;
    Part PassP Fem Sg => tem_ + "uta" ;
    Part PassP Fem Pl => tem_ + "ute"
    }
  } ;

oper accendere_21 : Str -> Verbo = \accendere ->
  let acce_ = Predef.tk 5 accendere in
 {s = table {
    Inf => acce_ + "ndere" ;
    InfClit => acce_ + "nder" ;
    Indi Pres Sg P1 => acce_ + "ndo" ;
    Indi Pres Sg P2 => acce_ + "ndi" ;
    Indi Pres Sg P3 => acce_ + "nde" ;
    Indi Pres Pl P1 => acce_ + "ndiamo" ;
    Indi Pres Pl P2 => acce_ + "ndete" ;
    Indi Pres Pl P3 => acce_ + "ndono" ;
    Indi Imperf Sg P1 => acce_ + "ndevo" ; --# notpresent
    Indi Imperf Sg P2 => acce_ + "ndevi" ; --# notpresent
    Indi Imperf Sg P3 => acce_ + "ndeva" ; --# notpresent
    Indi Imperf Pl P1 => acce_ + "ndevamo" ; --# notpresent
    Indi Imperf Pl P2 => acce_ + "ndevate" ; --# notpresent
    Indi Imperf Pl P3 => acce_ + "ndevano" ; --# notpresent
    Pass Sg P1 => acce_ + "si" ; --# notpresent
    Pass Sg P2 => acce_ + "ndesti" ; --# notpresent
    Pass Sg P3 => acce_ + "se" ; --# notpresent
    Pass Pl P1 => acce_ + "ndemmo" ; --# notpresent
    Pass Pl P2 => acce_ + "ndeste" ; --# notpresent
    Pass Pl P3 => acce_ + "sero" ; --# notpresent
    Fut Sg P1 => acce_ + "nderò" ; --# notpresent
    Fut Sg P2 => acce_ + "nderai" ; --# notpresent
    Fut Sg P3 => acce_ + "nderà" ; --# notpresent
    Fut Pl P1 => acce_ + "nderemo" ; --# notpresent
    Fut Pl P2 => acce_ + "nderete" ; --# notpresent
    Fut Pl P3 => acce_ + "nderanno" ; --# notpresent
    Cong Pres Sg P1 => acce_ + "nda" ;
    Cong Pres Sg P2 => acce_ + "nda" ;
    Cong Pres Sg P3 => acce_ + "nda" ;
    Cong Pres Pl P1 => acce_ + "ndiamo" ;
    Cong Pres Pl P2 => acce_ + "ndiate" ;
    Cong Pres Pl P3 => acce_ + "ndano" ;
    Cong Imperf Sg P1 => acce_ + "ndessi" ; --# notpresent
    Cong Imperf Sg P2 => acce_ + "ndessi" ; --# notpresent
    Cong Imperf Sg P3 => acce_ + "ndesse" ; --# notpresent
    Cong Imperf Pl P1 => acce_ + "ndessimo" ; --# notpresent
    Cong Imperf Pl P2 => acce_ + "ndeste" ; --# notpresent
    Cong Imperf Pl P3 => acce_ + "ndessero" ; --# notpresent
    Cond Sg P1 => acce_ + "nderei" ; --# notpresent
    Cond Sg P2 => acce_ + "nderesti" ; --# notpresent
    Cond Sg P3 => acce_ + "nderebbe" ; --# notpresent
    Cond Pl P1 => acce_ + "nderemmo" ; --# notpresent
    Cond Pl P2 => acce_ + "ndereste" ; --# notpresent
    Cond Pl P3 => acce_ + "nderebbero" ; --# notpresent
    Imper SgP2 => acce_ + "ndi" ;
    Imper PlP1 => acce_ + "ndiamo" ;
    Imper PlP2 => acce_ + "ndete" ;
    Ger => acce_ + "ndendo" ;
    Part PresP Masc Sg => acce_ + "ndente" ;
    Part PresP Masc Pl => acce_ + "ndenti" ;
    Part PresP Fem Sg => acce_ + "ndente" ;
    Part PresP Fem Pl => acce_ + "ndenti" ;
    Part PassP Masc Sg => acce_ + "so" ;
    Part PassP Masc Pl => acce_ + "si" ;
    Part PassP Fem Sg => acce_ + "sa" ;
    Part PassP Fem Pl => acce_ + "se"
    }
  } ;

oper affiggere_22 : Str -> Verbo = \affiggere ->
  let affi_ = Predef.tk 5 affiggere in
 {s = table {
    Inf => affi_ + "ggere" ;
    InfClit => affi_ + "gger" ;
    Indi Pres Sg P1 => affi_ + "ggo" ;
    Indi Pres Sg P2 => affi_ + "ggi" ;
    Indi Pres Sg P3 => affi_ + "gge" ;
    Indi Pres Pl P1 => affi_ + "ggiamo" ;
    Indi Pres Pl P2 => affi_ + "ggete" ;
    Indi Pres Pl P3 => affi_ + "ggono" ;
    Indi Imperf Sg P1 => affi_ + "ggevo" ; --# notpresent
    Indi Imperf Sg P2 => affi_ + "ggevi" ; --# notpresent
    Indi Imperf Sg P3 => affi_ + "ggeva" ; --# notpresent
    Indi Imperf Pl P1 => affi_ + "ggevamo" ; --# notpresent
    Indi Imperf Pl P2 => affi_ + "ggevate" ; --# notpresent
    Indi Imperf Pl P3 => affi_ + "ggevano" ; --# notpresent
    Pass Sg P1 => affi_ + "ssi" ; --# notpresent
    Pass Sg P2 => affi_ + "ggesti" ; --# notpresent
    Pass Sg P3 => affi_ + "sse" ; --# notpresent
    Pass Pl P1 => affi_ + "ggemmo" ; --# notpresent
    Pass Pl P2 => affi_ + "ggeste" ; --# notpresent
    Pass Pl P3 => affi_ + "ssero" ; --# notpresent
    Fut Sg P1 => affi_ + "ggerò" ; --# notpresent
    Fut Sg P2 => affi_ + "ggerai" ; --# notpresent
    Fut Sg P3 => affi_ + "ggerà" ; --# notpresent
    Fut Pl P1 => affi_ + "ggeremo" ; --# notpresent
    Fut Pl P2 => affi_ + "ggerete" ; --# notpresent
    Fut Pl P3 => affi_ + "ggeranno" ; --# notpresent
    Cong Pres Sg P1 => affi_ + "gga" ;
    Cong Pres Sg P2 => affi_ + "gga" ;
    Cong Pres Sg P3 => affi_ + "gga" ;
    Cong Pres Pl P1 => affi_ + "ggiamo" ;
    Cong Pres Pl P2 => affi_ + "ggiate" ;
    Cong Pres Pl P3 => affi_ + "ggano" ;
    Cong Imperf Sg P1 => affi_ + "ggessi" ; --# notpresent
    Cong Imperf Sg P2 => affi_ + "ggessi" ; --# notpresent
    Cong Imperf Sg P3 => affi_ + "ggesse" ; --# notpresent
    Cong Imperf Pl P1 => affi_ + "ggessimo" ; --# notpresent
    Cong Imperf Pl P2 => affi_ + "ggeste" ; --# notpresent
    Cong Imperf Pl P3 => affi_ + "ggessero" ; --# notpresent
    Cond Sg P1 => affi_ + "ggerei" ; --# notpresent
    Cond Sg P2 => affi_ + "ggeresti" ; --# notpresent
    Cond Sg P3 => affi_ + "ggerebbe" ; --# notpresent
    Cond Pl P1 => affi_ + "ggeremmo" ; --# notpresent
    Cond Pl P2 => affi_ + "ggereste" ; --# notpresent
    Cond Pl P3 => affi_ + "ggerebbero" ; --# notpresent
    Imper SgP2 => affi_ + "ggi" ;
    Imper PlP1 => affi_ + "ggiamo" ;
    Imper PlP2 => affi_ + "ggete" ;
    Ger => affi_ + "ggendo" ;
    Part PresP Masc Sg => affi_ + "ggente" ;
    Part PresP Masc Pl => affi_ + "ggenti" ;
    Part PresP Fem Sg => affi_ + "ggente" ;
    Part PresP Fem Pl => affi_ + "ggenti" ;
    Part PassP Masc Sg => affi_ + "sso" ;
    Part PassP Masc Pl => affi_ + "ssi" ;
    Part PassP Fem Sg => affi_ + "ssa" ;
    Part PassP Fem Pl => affi_ + "sse"
    }
  } ;

oper ardere_23 : Str -> Verbo = \ardere ->
  let ar_ = Predef.tk 4 ardere in
 {s = table {
    Inf => ar_ + "dere" ;
    InfClit => ar_ + "der" ;
    Indi Pres Sg P1 => ar_ + "do" ;
    Indi Pres Sg P2 => ar_ + "di" ;
    Indi Pres Sg P3 => ar_ + "de" ;
    Indi Pres Pl P1 => ar_ + "diamo" ;
    Indi Pres Pl P2 => ar_ + "dete" ;
    Indi Pres Pl P3 => ar_ + "dono" ;
    Indi Imperf Sg P1 => ar_ + "devo" ; --# notpresent
    Indi Imperf Sg P2 => ar_ + "devi" ; --# notpresent
    Indi Imperf Sg P3 => ar_ + "deva" ; --# notpresent
    Indi Imperf Pl P1 => ar_ + "devamo" ; --# notpresent
    Indi Imperf Pl P2 => ar_ + "devate" ; --# notpresent
    Indi Imperf Pl P3 => ar_ + "devano" ; --# notpresent
    Pass Sg P1 => ar_ + "si" ; --# notpresent
    Pass Sg P2 => ar_ + "desti" ; --# notpresent
    Pass Sg P3 => ar_ + "se" ; --# notpresent
    Pass Pl P1 => ar_ + "demmo" ; --# notpresent
    Pass Pl P2 => ar_ + "deste" ; --# notpresent
    Pass Pl P3 => ar_ + "sero" ; --# notpresent
    Fut Sg P1 => ar_ + "derò" ; --# notpresent
    Fut Sg P2 => ar_ + "derai" ; --# notpresent
    Fut Sg P3 => ar_ + "derà" ; --# notpresent
    Fut Pl P1 => ar_ + "deremo" ; --# notpresent
    Fut Pl P2 => ar_ + "derete" ; --# notpresent
    Fut Pl P3 => ar_ + "deranno" ; --# notpresent
    Cong Pres Sg P1 => ar_ + "da" ;
    Cong Pres Sg P2 => ar_ + "da" ;
    Cong Pres Sg P3 => ar_ + "da" ;
    Cong Pres Pl P1 => ar_ + "diamo" ;
    Cong Pres Pl P2 => ar_ + "diate" ;
    Cong Pres Pl P3 => ar_ + "dano" ;
    Cong Imperf Sg P1 => ar_ + "dessi" ; --# notpresent
    Cong Imperf Sg P2 => ar_ + "dessi" ; --# notpresent
    Cong Imperf Sg P3 => ar_ + "desse" ; --# notpresent
    Cong Imperf Pl P1 => ar_ + "dessimo" ; --# notpresent
    Cong Imperf Pl P2 => ar_ + "deste" ; --# notpresent
    Cong Imperf Pl P3 => ar_ + "dessero" ; --# notpresent
    Cond Sg P1 => ar_ + "derei" ; --# notpresent
    Cond Sg P2 => ar_ + "deresti" ; --# notpresent
    Cond Sg P3 => ar_ + "derebbe" ; --# notpresent
    Cond Pl P1 => ar_ + "deremmo" ; --# notpresent
    Cond Pl P2 => ar_ + "dereste" ; --# notpresent
    Cond Pl P3 => ar_ + "derebbero" ; --# notpresent
    Imper SgP2 => ar_ + "di" ;
    Imper PlP1 => ar_ + "diamo" ;
    Imper PlP2 => ar_ + "dete" ;
    Ger => ar_ + "dendo" ;
    Part PresP Masc Sg => ar_ + "dente" ;
    Part PresP Masc Pl => ar_ + "denti" ;
    Part PresP Fem Sg => ar_ + "dente" ;
    Part PresP Fem Pl => ar_ + "denti" ;
    Part PassP Masc Sg => ar_ + "so" ;
    Part PassP Masc Pl => ar_ + "si" ;
    Part PassP Fem Sg => ar_ + "sa" ;
    Part PassP Fem Pl => ar_ + "se"
    }
  } ;

oper assistere_24 : Str -> Verbo = \assistere ->
  let assist_ = Predef.tk 3 assistere in
 {s = table {
    Inf => assist_ + "ere" ;
    InfClit => assist_ + "er" ;
    Indi Pres Sg P1 => assist_ + "o" ;
    Indi Pres Sg P2 => assist_ + "i" ;
    Indi Pres Sg P3 => assist_ + "e" ;
    Indi Pres Pl P1 => assist_ + "iamo" ;
    Indi Pres Pl P2 => assist_ + "ete" ;
    Indi Pres Pl P3 => assist_ + "ono" ;
    Indi Imperf Sg P1 => assist_ + "evo" ; --# notpresent
    Indi Imperf Sg P2 => assist_ + "evi" ; --# notpresent
    Indi Imperf Sg P3 => assist_ + "eva" ; --# notpresent
    Indi Imperf Pl P1 => assist_ + "evamo" ; --# notpresent
    Indi Imperf Pl P2 => assist_ + "evate" ; --# notpresent
    Indi Imperf Pl P3 => assist_ + "evano" ; --# notpresent
    Pass Sg P1 => assist_ + "ei" ; --# notpresent
    Pass Sg P2 => assist_ + "esti" ; --# notpresent
    Pass Sg P3 => assist_ + "é" ; --# notpresent
    Pass Pl P1 => assist_ + "emmo" ; --# notpresent
    Pass Pl P2 => assist_ + "este" ; --# notpresent
    Pass Pl P3 => assist_ + "erono" ; --# notpresent
    Fut Sg P1 => assist_ + "erò" ; --# notpresent
    Fut Sg P2 => assist_ + "erai" ; --# notpresent
    Fut Sg P3 => assist_ + "erà" ; --# notpresent
    Fut Pl P1 => assist_ + "eremo" ; --# notpresent
    Fut Pl P2 => assist_ + "erete" ; --# notpresent
    Fut Pl P3 => assist_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => assist_ + "a" ;
    Cong Pres Sg P2 => assist_ + "a" ;
    Cong Pres Sg P3 => assist_ + "a" ;
    Cong Pres Pl P1 => assist_ + "iamo" ;
    Cong Pres Pl P2 => assist_ + "iate" ;
    Cong Pres Pl P3 => assist_ + "ano" ;
    Cong Imperf Sg P1 => assist_ + "essi" ; --# notpresent
    Cong Imperf Sg P2 => assist_ + "essi" ; --# notpresent
    Cong Imperf Sg P3 => assist_ + "esse" ; --# notpresent
    Cong Imperf Pl P1 => assist_ + "essimo" ; --# notpresent
    Cong Imperf Pl P2 => assist_ + "este" ; --# notpresent
    Cong Imperf Pl P3 => assist_ + "essero" ; --# notpresent
    Cond Sg P1 => assist_ + "erei" ; --# notpresent
    Cond Sg P2 => assist_ + "eresti" ; --# notpresent
    Cond Sg P3 => assist_ + "erebbe" ; --# notpresent
    Cond Pl P1 => assist_ + "eremmo" ; --# notpresent
    Cond Pl P2 => assist_ + "ereste" ; --# notpresent
    Cond Pl P3 => assist_ + "erebbero" ; --# notpresent
    Imper SgP2 => assist_ + "i" ;
    Imper PlP1 => assist_ + "iamo" ;
    Imper PlP2 => assist_ + "ete" ;
    Ger => assist_ + "endo" ;
    Part PresP Masc Sg => assist_ + "ente" ;
    Part PresP Masc Pl => assist_ + "enti" ;
    Part PresP Fem Sg => assist_ + "ente" ;
    Part PresP Fem Pl => assist_ + "enti" ;
    Part PassP Masc Sg => assist_ + "ito" ;
    Part PassP Masc Pl => assist_ + "iti" ;
    Part PassP Fem Sg => assist_ + "ita" ;
    Part PassP Fem Pl => assist_ + "ite"
    }
  } ;

oper assolvere_25 : Str -> Verbo = \assolvere ->
  let assol_ = Predef.tk 4 assolvere in
 {s = table {
    Inf => assol_ + "vere" ;
    InfClit => assol_ + "ver" ;
    Indi Pres Sg P1 => assol_ + "vo" ;
    Indi Pres Sg P2 => assol_ + "vi" ;
    Indi Pres Sg P3 => assol_ + "ve" ;
    Indi Pres Pl P1 => assol_ + "viamo" ;
    Indi Pres Pl P2 => assol_ + "vete" ;
    Indi Pres Pl P3 => assol_ + "vono" ;
    Indi Imperf Sg P1 => assol_ + "vevo" ; --# notpresent
    Indi Imperf Sg P2 => assol_ + "vevi" ; --# notpresent
    Indi Imperf Sg P3 => assol_ + "veva" ; --# notpresent
    Indi Imperf Pl P1 => assol_ + "vevamo" ; --# notpresent
    Indi Imperf Pl P2 => assol_ + "vevate" ; --# notpresent
    Indi Imperf Pl P3 => assol_ + "vevano" ; --# notpresent
    Pass Sg P1 => assol_ + "si" ; --# notpresent
    Pass Sg P2 => assol_ + "vesti" ; --# notpresent
    Pass Sg P3 => assol_ + "se" ; --# notpresent
    Pass Pl P1 => assol_ + "vemmo" ; --# notpresent
    Pass Pl P2 => assol_ + "veste" ; --# notpresent
    Pass Pl P3 => assol_ + "sero" ; --# notpresent
    Fut Sg P1 => assol_ + "verò" ; --# notpresent
    Fut Sg P2 => assol_ + "verai" ; --# notpresent
    Fut Sg P3 => assol_ + "verà" ; --# notpresent
    Fut Pl P1 => assol_ + "veremo" ; --# notpresent
    Fut Pl P2 => assol_ + "verete" ; --# notpresent
    Fut Pl P3 => assol_ + "veranno" ; --# notpresent
    Cong Pres Sg P1 => assol_ + "va" ;
    Cong Pres Sg P2 => assol_ + "va" ;
    Cong Pres Sg P3 => assol_ + "va" ;
    Cong Pres Pl P1 => assol_ + "viamo" ;
    Cong Pres Pl P2 => assol_ + "viate" ;
    Cong Pres Pl P3 => assol_ + "vano" ;
    Cong Imperf Sg P1 => assol_ + "vessi" ; --# notpresent
    Cong Imperf Sg P2 => assol_ + "vessi" ; --# notpresent
    Cong Imperf Sg P3 => assol_ + "vesse" ; --# notpresent
    Cong Imperf Pl P1 => assol_ + "vessimo" ; --# notpresent
    Cong Imperf Pl P2 => assol_ + "veste" ; --# notpresent
    Cong Imperf Pl P3 => assol_ + "vessero" ; --# notpresent
    Cond Sg P1 => assol_ + "verei" ; --# notpresent
    Cond Sg P2 => assol_ + "veresti" ; --# notpresent
    Cond Sg P3 => assol_ + "verebbe" ; --# notpresent
    Cond Pl P1 => assol_ + "veremmo" ; --# notpresent
    Cond Pl P2 => assol_ + "vereste" ; --# notpresent
    Cond Pl P3 => assol_ + "verebbero" ; --# notpresent
    Imper SgP2 => assol_ + "vi" ;
    Imper PlP1 => assol_ + "viamo" ;
    Imper PlP2 => assol_ + "vete" ;
    Ger => assol_ + "vendo" ;
    Part PresP Masc Sg => assol_ + "vente" ;
    Part PresP Masc Pl => assol_ + "venti" ;
    Part PresP Fem Sg => assol_ + "vente" ;
    Part PresP Fem Pl => assol_ + "venti" ;
    Part PassP Masc Sg => assol_ + "to" ;
    Part PassP Masc Pl => assol_ + "ti" ;
    Part PassP Fem Sg => assol_ + "ta" ;
    Part PassP Fem Pl => assol_ + "te"
    }
  } ;

oper assumere_26 : Str -> Verbo = \assumere ->
  let assu_ = Predef.tk 4 assumere in
 {s = table {
    Inf => assu_ + "mere" ;
    InfClit => assu_ + "mer" ;
    Indi Pres Sg P1 => assu_ + "mo" ;
    Indi Pres Sg P2 => assu_ + "mi" ;
    Indi Pres Sg P3 => assu_ + "me" ;
    Indi Pres Pl P1 => assu_ + "miamo" ;
    Indi Pres Pl P2 => assu_ + "mete" ;
    Indi Pres Pl P3 => assu_ + "mono" ;
    Indi Imperf Sg P1 => assu_ + "mevo" ; --# notpresent
    Indi Imperf Sg P2 => assu_ + "mevi" ; --# notpresent
    Indi Imperf Sg P3 => assu_ + "meva" ; --# notpresent
    Indi Imperf Pl P1 => assu_ + "mevamo" ; --# notpresent
    Indi Imperf Pl P2 => assu_ + "mevate" ; --# notpresent
    Indi Imperf Pl P3 => assu_ + "mevano" ; --# notpresent
    Pass Sg P1 => assu_ + "nsi" ; --# notpresent
    Pass Sg P2 => assu_ + "mesti" ; --# notpresent
    Pass Sg P3 => assu_ + "nse" ; --# notpresent
    Pass Pl P1 => assu_ + "memmo" ; --# notpresent
    Pass Pl P2 => assu_ + "meste" ; --# notpresent
    Pass Pl P3 => assu_ + "nsero" ; --# notpresent
    Fut Sg P1 => assu_ + "merò" ; --# notpresent
    Fut Sg P2 => assu_ + "merai" ; --# notpresent
    Fut Sg P3 => assu_ + "merà" ; --# notpresent
    Fut Pl P1 => assu_ + "meremo" ; --# notpresent
    Fut Pl P2 => assu_ + "merete" ; --# notpresent
    Fut Pl P3 => assu_ + "meranno" ; --# notpresent
    Cong Pres Sg P1 => assu_ + "ma" ;
    Cong Pres Sg P2 => assu_ + "ma" ;
    Cong Pres Sg P3 => assu_ + "ma" ;
    Cong Pres Pl P1 => assu_ + "miamo" ;
    Cong Pres Pl P2 => assu_ + "miate" ;
    Cong Pres Pl P3 => assu_ + "mano" ;
    Cong Imperf Sg P1 => assu_ + "messi" ; --# notpresent
    Cong Imperf Sg P2 => assu_ + "messi" ; --# notpresent
    Cong Imperf Sg P3 => assu_ + "messe" ; --# notpresent
    Cong Imperf Pl P1 => assu_ + "messimo" ; --# notpresent
    Cong Imperf Pl P2 => assu_ + "meste" ; --# notpresent
    Cong Imperf Pl P3 => assu_ + "messero" ; --# notpresent
    Cond Sg P1 => assu_ + "merei" ; --# notpresent
    Cond Sg P2 => assu_ + "meresti" ; --# notpresent
    Cond Sg P3 => assu_ + "merebbe" ; --# notpresent
    Cond Pl P1 => assu_ + "meremmo" ; --# notpresent
    Cond Pl P2 => assu_ + "mereste" ; --# notpresent
    Cond Pl P3 => assu_ + "merebbero" ; --# notpresent
    Imper SgP2 => assu_ + "mi" ;
    Imper PlP1 => assu_ + "miamo" ;
    Imper PlP2 => assu_ + "mete" ;
    Ger => assu_ + "mendo" ;
    Part PresP Masc Sg => assu_ + "mente" ;
    Part PresP Masc Pl => assu_ + "menti" ;
    Part PresP Fem Sg => assu_ + "mente" ;
    Part PresP Fem Pl => assu_ + "menti" ;
    Part PassP Masc Sg => assu_ + "nto" ;
    Part PassP Masc Pl => assu_ + "nti" ;
    Part PassP Fem Sg => assu_ + "nta" ;
    Part PassP Fem Pl => assu_ + "nte"
    }
  } ;

oper bere_27 : Str -> Verbo = \bere ->
  let be_ = Predef.tk 2 bere in
 {s = table {
    Inf => be_ + "re" ;
    InfClit => be_ + "r" ;
    Indi Pres Sg P1 => be_ + "vo" ;
    Indi Pres Sg P2 => be_ + "vi" ;
    Indi Pres Sg P3 => be_ + "ve" ;
    Indi Pres Pl P1 => be_ + "viamo" ;
    Indi Pres Pl P2 => be_ + "vete" ;
    Indi Pres Pl P3 => be_ + "vono" ;
    Indi Imperf Sg P1 => be_ + "vevo" ; --# notpresent
    Indi Imperf Sg P2 => be_ + "vevi" ; --# notpresent
    Indi Imperf Sg P3 => be_ + "veva" ; --# notpresent
    Indi Imperf Pl P1 => be_ + "vevamo" ; --# notpresent
    Indi Imperf Pl P2 => be_ + "vevate" ; --# notpresent
    Indi Imperf Pl P3 => be_ + "vevano" ; --# notpresent
    Pass Sg P1 => be_ + "vvi" ; --# notpresent
    Pass Sg P2 => be_ + "vesti" ; --# notpresent
    Pass Sg P3 => be_ + "vve" ; --# notpresent
    Pass Pl P1 => be_ + "vemmo" ; --# notpresent
    Pass Pl P2 => be_ + "veste" ; --# notpresent
    Pass Pl P3 => be_ + "vvero" ; --# notpresent
    Fut Sg P1 => be_ + "rrò" ; --# notpresent
    Fut Sg P2 => be_ + "rrai" ; --# notpresent
    Fut Sg P3 => be_ + "rrà" ; --# notpresent
    Fut Pl P1 => be_ + "rremo" ; --# notpresent
    Fut Pl P2 => be_ + "rrete" ; --# notpresent
    Fut Pl P3 => be_ + "rranno" ; --# notpresent
    Cong Pres Sg P1 => be_ + "va" ;
    Cong Pres Sg P2 => be_ + "va" ;
    Cong Pres Sg P3 => be_ + "va" ;
    Cong Pres Pl P1 => be_ + "viamo" ;
    Cong Pres Pl P2 => be_ + "viate" ;
    Cong Pres Pl P3 => be_ + "vano" ;
    Cong Imperf Sg P1 => be_ + "vessi" ; --# notpresent
    Cong Imperf Sg P2 => be_ + "vessi" ; --# notpresent
    Cong Imperf Sg P3 => be_ + "vesse" ; --# notpresent
    Cong Imperf Pl P1 => be_ + "vessimo" ; --# notpresent
    Cong Imperf Pl P2 => be_ + "veste" ; --# notpresent
    Cong Imperf Pl P3 => be_ + "vessero" ; --# notpresent
    Cond Sg P1 => be_ + "rrei" ; --# notpresent
    Cond Sg P2 => be_ + "rresti" ; --# notpresent
    Cond Sg P3 => be_ + "rrebbe" ; --# notpresent
    Cond Pl P1 => be_ + "rremmo" ; --# notpresent
    Cond Pl P2 => be_ + "rreste" ; --# notpresent
    Cond Pl P3 => be_ + "rrebbero" ; --# notpresent
    Imper SgP2 => be_ + "vi" ;
    Imper PlP1 => be_ + "viamo" ;
    Imper PlP2 => be_ + "vete" ;
    Ger => be_ + "vendo" ;
    Part PresP Masc Sg => be_ + "vente" ;
    Part PresP Masc Pl => be_ + "venti" ;
    Part PresP Fem Sg => be_ + "vente" ;
    Part PresP Fem Pl => be_ + "venti" ;
    Part PassP Masc Sg => be_ + "vuto" ;
    Part PassP Masc Pl => be_ + "vuti" ;
    Part PassP Fem Sg => be_ + "vuta" ;
    Part PassP Fem Pl => be_ + "vute"
    }
  } ;

oper cadere_28 : Str -> Verbo = \caere ->
  let ca_ = Predef.tk 3 caere in
 {s = table {
    Inf => ca_ + "ere" ;
    InfClit => ca_ + "er" ;
    Indi Pres Sg P1 => ca_ + "o" ;
    Indi Pres Sg P2 => ca_ + "i" ;
    Indi Pres Sg P3 => ca_ + "e" ;
    Indi Pres Pl P1 => ca_ + "iamo" ;
    Indi Pres Pl P2 => ca_ + "ete" ;
    Indi Pres Pl P3 => ca_ + "ono" ;
    Indi Imperf Sg P1 => ca_ + "evo" ; --# notpresent
    Indi Imperf Sg P2 => ca_ + "evi" ; --# notpresent
    Indi Imperf Sg P3 => ca_ + "eva" ; --# notpresent
    Indi Imperf Pl P1 => ca_ + "evamo" ; --# notpresent
    Indi Imperf Pl P2 => ca_ + "evate" ; --# notpresent
    Indi Imperf Pl P3 => ca_ + "evano" ; --# notpresent
    Pass Sg P1 => ca_ + "di" ; --# notpresent
    Pass Sg P2 => ca_ + "esti" ; --# notpresent
    Pass Sg P3 => ca_ + "de" ; --# notpresent
    Pass Pl P1 => ca_ + "emmo" ; --# notpresent
    Pass Pl P2 => ca_ + "este" ; --# notpresent
    Pass Pl P3 => ca_ + "dero" ; --# notpresent
    Fut Sg P1 => ca_ + "rò" ; --# notpresent
    Fut Sg P2 => ca_ + "rai" ; --# notpresent
    Fut Sg P3 => ca_ + "rà" ; --# notpresent
    Fut Pl P1 => ca_ + "remo" ; --# notpresent
    Fut Pl P2 => ca_ + "rete" ; --# notpresent
    Fut Pl P3 => ca_ + "ranno" ; --# notpresent
    Cong Pres Sg P1 => ca_ + "a" ;
    Cong Pres Sg P2 => ca_ + "a" ;
    Cong Pres Sg P3 => ca_ + "a" ;
    Cong Pres Pl P1 => ca_ + "iamo" ;
    Cong Pres Pl P2 => ca_ + "iate" ;
    Cong Pres Pl P3 => ca_ + "ano" ;
    Cong Imperf Sg P1 => ca_ + "essi" ; --# notpresent
    Cong Imperf Sg P2 => ca_ + "essi" ; --# notpresent
    Cong Imperf Sg P3 => ca_ + "esse" ; --# notpresent
    Cong Imperf Pl P1 => ca_ + "essimo" ; --# notpresent
    Cong Imperf Pl P2 => ca_ + "este" ; --# notpresent
    Cong Imperf Pl P3 => ca_ + "essero" ; --# notpresent
    Cond Sg P1 => ca_ + "rei" ; --# notpresent
    Cond Sg P2 => ca_ + "resti" ; --# notpresent
    Cond Sg P3 => ca_ + "rebbe" ; --# notpresent
    Cond Pl P1 => ca_ + "remmo" ; --# notpresent
    Cond Pl P2 => ca_ + "reste" ; --# notpresent
    Cond Pl P3 => ca_ + "rebbero" ; --# notpresent
    Imper SgP2 => ca_ + "i" ;
    Imper PlP1 => ca_ + "iamo" ;
    Imper PlP2 => ca_ + "ete" ;
    Ger => ca_ + "endo" ;
    Part PresP Masc Sg => ca_ + "ente" ;
    Part PresP Masc Pl => ca_ + "enti" ;
    Part PresP Fem Sg => ca_ + "ente" ;
    Part PresP Fem Pl => ca_ + "enti" ;
    Part PassP Masc Sg => ca_ + "uto" ;
    Part PassP Masc Pl => ca_ + "uti" ;
    Part PassP Fem Sg => ca_ + "uta" ;
    Part PassP Fem Pl => ca_ + "ute"
    }
  } ;

oper chiedere_29 : Str -> Verbo = \chiedere ->
  let chie_ = Predef.tk 4 chiedere in
 {s = table {
    Inf => chie_ + "dere" ;
    InfClit => chie_ + "der" ;
    Indi Pres Sg P1 => chie_ + "do" ;
    Indi Pres Sg P2 => chie_ + "di" ;
    Indi Pres Sg P3 => chie_ + "de" ;
    Indi Pres Pl P1 => chie_ + "diamo" ;
    Indi Pres Pl P2 => chie_ + "dete" ;
    Indi Pres Pl P3 => chie_ + "dono" ;
    Indi Imperf Sg P1 => chie_ + "devo" ; --# notpresent
    Indi Imperf Sg P2 => chie_ + "devi" ; --# notpresent
    Indi Imperf Sg P3 => chie_ + "deva" ; --# notpresent
    Indi Imperf Pl P1 => chie_ + "devamo" ; --# notpresent
    Indi Imperf Pl P2 => chie_ + "devate" ; --# notpresent
    Indi Imperf Pl P3 => chie_ + "devano" ; --# notpresent
    Pass Sg P1 => chie_ + "si" ; --# notpresent
    Pass Sg P2 => chie_ + "desti" ; --# notpresent
    Pass Sg P3 => chie_ + "se" ; --# notpresent
    Pass Pl P1 => chie_ + "demmo" ; --# notpresent
    Pass Pl P2 => chie_ + "deste" ; --# notpresent
    Pass Pl P3 => chie_ + "sero" ; --# notpresent
    Fut Sg P1 => chie_ + "derò" ; --# notpresent
    Fut Sg P2 => chie_ + "derai" ; --# notpresent
    Fut Sg P3 => chie_ + "derà" ; --# notpresent
    Fut Pl P1 => chie_ + "deremo" ; --# notpresent
    Fut Pl P2 => chie_ + "derete" ; --# notpresent
    Fut Pl P3 => chie_ + "deranno" ; --# notpresent
    Cong Pres Sg P1 => chie_ + "da" ;
    Cong Pres Sg P2 => chie_ + "da" ;
    Cong Pres Sg P3 => chie_ + "da" ;
    Cong Pres Pl P1 => chie_ + "diamo" ;
    Cong Pres Pl P2 => chie_ + "diate" ;
    Cong Pres Pl P3 => chie_ + "dano" ;
    Cong Imperf Sg P1 => chie_ + "dessi" ; --# notpresent
    Cong Imperf Sg P2 => chie_ + "dessi" ; --# notpresent
    Cong Imperf Sg P3 => chie_ + "desse" ; --# notpresent
    Cong Imperf Pl P1 => chie_ + "dessimo" ; --# notpresent
    Cong Imperf Pl P2 => chie_ + "deste" ; --# notpresent
    Cong Imperf Pl P3 => chie_ + "dessero" ; --# notpresent
    Cond Sg P1 => chie_ + "derei" ; --# notpresent
    Cond Sg P2 => chie_ + "deresti" ; --# notpresent
    Cond Sg P3 => chie_ + "derebbe" ; --# notpresent
    Cond Pl P1 => chie_ + "deremmo" ; --# notpresent
    Cond Pl P2 => chie_ + "dereste" ; --# notpresent
    Cond Pl P3 => chie_ + "derebbero" ; --# notpresent
    Imper SgP2 => chie_ + "di" ;
    Imper PlP1 => chie_ + "diamo" ;
    Imper PlP2 => chie_ + "dete" ;
    Ger => chie_ + "dendo" ;
    Part PresP Masc Sg => chie_ + "dente" ;
    Part PresP Masc Pl => chie_ + "denti" ;
    Part PresP Fem Sg => chie_ + "dente" ;
    Part PresP Fem Pl => chie_ + "denti" ;
    Part PassP Masc Sg => chie_ + "sto" ;
    Part PassP Masc Pl => chie_ + "sti" ;
    Part PassP Fem Sg => chie_ + "sta" ;
    Part PassP Fem Pl => chie_ + "ste"
    }
  } ;

oper chiudere_30 : Str -> Verbo = \chiudere ->
  let chiu_ = Predef.tk 4 chiudere in
 {s = table {
    Inf => chiu_ + "dere" ;
    InfClit => chiu_ + "der" ;
    Indi Pres Sg P1 => chiu_ + "do" ;
    Indi Pres Sg P2 => chiu_ + "di" ;
    Indi Pres Sg P3 => chiu_ + "de" ;
    Indi Pres Pl P1 => chiu_ + "diamo" ;
    Indi Pres Pl P2 => chiu_ + "dete" ;
    Indi Pres Pl P3 => chiu_ + "dono" ;
    Indi Imperf Sg P1 => chiu_ + "devo" ; --# notpresent
    Indi Imperf Sg P2 => chiu_ + "devi" ; --# notpresent
    Indi Imperf Sg P3 => chiu_ + "deva" ; --# notpresent
    Indi Imperf Pl P1 => chiu_ + "devamo" ; --# notpresent
    Indi Imperf Pl P2 => chiu_ + "devate" ; --# notpresent
    Indi Imperf Pl P3 => chiu_ + "devano" ; --# notpresent
    Pass Sg P1 => chiu_ + "si" ; --# notpresent
    Pass Sg P2 => chiu_ + "desti" ; --# notpresent
    Pass Sg P3 => chiu_ + "se" ; --# notpresent
    Pass Pl P1 => chiu_ + "demmo" ; --# notpresent
    Pass Pl P2 => chiu_ + "deste" ; --# notpresent
    Pass Pl P3 => chiu_ + "sero" ; --# notpresent
    Fut Sg P1 => chiu_ + "derò" ; --# notpresent
    Fut Sg P2 => chiu_ + "derai" ; --# notpresent
    Fut Sg P3 => chiu_ + "derà" ; --# notpresent
    Fut Pl P1 => chiu_ + "deremo" ; --# notpresent
    Fut Pl P2 => chiu_ + "derete" ; --# notpresent
    Fut Pl P3 => chiu_ + "deranno" ; --# notpresent
    Cong Pres Sg P1 => chiu_ + "da" ;
    Cong Pres Sg P2 => chiu_ + "da" ;
    Cong Pres Sg P3 => chiu_ + "da" ;
    Cong Pres Pl P1 => chiu_ + "diamo" ;
    Cong Pres Pl P2 => chiu_ + "diate" ;
    Cong Pres Pl P3 => chiu_ + "dano" ;
    Cong Imperf Sg P1 => chiu_ + "dessi" ; --# notpresent
    Cong Imperf Sg P2 => chiu_ + "dessi" ; --# notpresent
    Cong Imperf Sg P3 => chiu_ + "desse" ; --# notpresent
    Cong Imperf Pl P1 => chiu_ + "dessimo" ; --# notpresent
    Cong Imperf Pl P2 => chiu_ + "deste" ; --# notpresent
    Cong Imperf Pl P3 => chiu_ + "dessero" ; --# notpresent
    Cond Sg P1 => chiu_ + "derei" ; --# notpresent
    Cond Sg P2 => chiu_ + "deresti" ; --# notpresent
    Cond Sg P3 => chiu_ + "derebbe" ; --# notpresent
    Cond Pl P1 => chiu_ + "deremmo" ; --# notpresent
    Cond Pl P2 => chiu_ + "dereste" ; --# notpresent
    Cond Pl P3 => chiu_ + "derebbero" ; --# notpresent
    Imper SgP2 => chiu_ + "di" ;
    Imper PlP1 => chiu_ + "diamo" ;
    Imper PlP2 => chiu_ + "dete" ;
    Ger => chiu_ + "dendo" ;
    Part PresP Masc Sg => chiu_ + "dente" ;
    Part PresP Masc Pl => chiu_ + "denti" ;
    Part PresP Fem Sg => chiu_ + "dente" ;
    Part PresP Fem Pl => chiu_ + "denti" ;
    Part PassP Masc Sg => chiu_ + "so" ;
    Part PassP Masc Pl => chiu_ + "si" ;
    Part PassP Fem Sg => chiu_ + "sa" ;
    Part PassP Fem Pl => chiu_ + "se"
    }
  } ;

oper cingere_31 : Str -> Verbo = \cingere ->
  let cin_ = Predef.tk 4 cingere in
 {s = table {
    Inf => cin_ + "gere" ;
    InfClit => cin_ + "ger" ;
    Indi Pres Sg P1 => cin_ + "go" ;
    Indi Pres Sg P2 => cin_ + "gi" ;
    Indi Pres Sg P3 => cin_ + "ge" ;
    Indi Pres Pl P1 => cin_ + "giamo" ;
    Indi Pres Pl P2 => cin_ + "gete" ;
    Indi Pres Pl P3 => cin_ + "gono" ;
    Indi Imperf Sg P1 => cin_ + "gevo" ; --# notpresent
    Indi Imperf Sg P2 => cin_ + "gevi" ; --# notpresent
    Indi Imperf Sg P3 => cin_ + "geva" ; --# notpresent
    Indi Imperf Pl P1 => cin_ + "gevamo" ; --# notpresent
    Indi Imperf Pl P2 => cin_ + "gevate" ; --# notpresent
    Indi Imperf Pl P3 => cin_ + "gevano" ; --# notpresent
    Pass Sg P1 => cin_ + "si" ; --# notpresent
    Pass Sg P2 => cin_ + "gesti" ; --# notpresent
    Pass Sg P3 => cin_ + "se" ; --# notpresent
    Pass Pl P1 => cin_ + "gemmo" ; --# notpresent
    Pass Pl P2 => cin_ + "geste" ; --# notpresent
    Pass Pl P3 => cin_ + "sero" ; --# notpresent
    Fut Sg P1 => cin_ + "gerò" ; --# notpresent
    Fut Sg P2 => cin_ + "gerai" ; --# notpresent
    Fut Sg P3 => cin_ + "gerà" ; --# notpresent
    Fut Pl P1 => cin_ + "geremo" ; --# notpresent
    Fut Pl P2 => cin_ + "gerete" ; --# notpresent
    Fut Pl P3 => cin_ + "geranno" ; --# notpresent
    Cong Pres Sg P1 => cin_ + "ga" ;
    Cong Pres Sg P2 => cin_ + "ga" ;
    Cong Pres Sg P3 => cin_ + "ga" ;
    Cong Pres Pl P1 => cin_ + "giamo" ;
    Cong Pres Pl P2 => cin_ + "giate" ;
    Cong Pres Pl P3 => cin_ + "gano" ;
    Cong Imperf Sg P1 => cin_ + "gessi" ; --# notpresent
    Cong Imperf Sg P2 => cin_ + "gessi" ; --# notpresent
    Cong Imperf Sg P3 => cin_ + "gesse" ; --# notpresent
    Cong Imperf Pl P1 => cin_ + "gessimo" ; --# notpresent
    Cong Imperf Pl P2 => cin_ + "geste" ; --# notpresent
    Cong Imperf Pl P3 => cin_ + "gessero" ; --# notpresent
    Cond Sg P1 => cin_ + "gerei" ; --# notpresent
    Cond Sg P2 => cin_ + "geresti" ; --# notpresent
    Cond Sg P3 => cin_ + "gerebbe" ; --# notpresent
    Cond Pl P1 => cin_ + "geremmo" ; --# notpresent
    Cond Pl P2 => cin_ + "gereste" ; --# notpresent
    Cond Pl P3 => cin_ + "gerebbero" ; --# notpresent
    Imper SgP2 => cin_ + "gi" ;
    Imper PlP1 => cin_ + "giamo" ;
    Imper PlP2 => cin_ + "gete" ;
    Ger => cin_ + "gendo" ;
    Part PresP Masc Sg => cin_ + "gente" ;
    Part PresP Masc Pl => cin_ + "genti" ;
    Part PresP Fem Sg => cin_ + "gente" ;
    Part PresP Fem Pl => cin_ + "genti" ;
    Part PassP Masc Sg => cin_ + "to" ;
    Part PassP Masc Pl => cin_ + "ti" ;
    Part PassP Fem Sg => cin_ + "ta" ;
    Part PassP Fem Pl => cin_ + "te"
    }
  } ;

oper cogliere_32 : Str -> Verbo = \cogliere ->
  let co_ = Predef.tk 6 cogliere in
 {s = table {
    Inf => co_ + "gliere" ;
    InfClit => co_ + "glier" ;
    Indi Pres Sg P1 => co_ + "lgo" ;
    Indi Pres Sg P2 => co_ + "gli" ;
    Indi Pres Sg P3 => co_ + "glie" ;
    Indi Pres Pl P1 => co_ + "gliamo" ;
    Indi Pres Pl P2 => co_ + "gliete" ;
    Indi Pres Pl P3 => co_ + "lgono" ;
    Indi Imperf Sg P1 => co_ + "glievo" ; --# notpresent
    Indi Imperf Sg P2 => co_ + "glievi" ; --# notpresent
    Indi Imperf Sg P3 => co_ + "glieva" ; --# notpresent
    Indi Imperf Pl P1 => co_ + "glievamo" ; --# notpresent
    Indi Imperf Pl P2 => co_ + "glievate" ; --# notpresent
    Indi Imperf Pl P3 => co_ + "glievano" ; --# notpresent
    Pass Sg P1 => co_ + "lsi" ; --# notpresent
    Pass Sg P2 => co_ + "gliesti" ; --# notpresent
    Pass Sg P3 => co_ + "lse" ; --# notpresent
    Pass Pl P1 => co_ + "gliemmo" ; --# notpresent
    Pass Pl P2 => co_ + "glieste" ; --# notpresent
    Pass Pl P3 => co_ + "lsero" ; --# notpresent
    Fut Sg P1 => co_ + "glierò" ; --# notpresent
    Fut Sg P2 => co_ + "glierai" ; --# notpresent
    Fut Sg P3 => co_ + "glierà" ; --# notpresent
    Fut Pl P1 => co_ + "glieremo" ; --# notpresent
    Fut Pl P2 => co_ + "glierete" ; --# notpresent
    Fut Pl P3 => co_ + "glieranno" ; --# notpresent
    Cong Pres Sg P1 => co_ + "lga" ;
    Cong Pres Sg P2 => co_ + "lga" ;
    Cong Pres Sg P3 => co_ + "lga" ;
    Cong Pres Pl P1 => co_ + "gliamo" ;
    Cong Pres Pl P2 => co_ + "gliate" ;
    Cong Pres Pl P3 => co_ + "lgano" ;
    Cong Imperf Sg P1 => co_ + "gliessi" ; --# notpresent
    Cong Imperf Sg P2 => co_ + "gliessi" ; --# notpresent
    Cong Imperf Sg P3 => co_ + "gliesse" ; --# notpresent
    Cong Imperf Pl P1 => co_ + "gliessimo" ; --# notpresent
    Cong Imperf Pl P2 => co_ + "glieste" ; --# notpresent
    Cong Imperf Pl P3 => co_ + "gliessero" ; --# notpresent
    Cond Sg P1 => co_ + "glierei" ; --# notpresent
    Cond Sg P2 => co_ + "glieresti" ; --# notpresent
    Cond Sg P3 => co_ + "glierebbe" ; --# notpresent
    Cond Pl P1 => co_ + "glieremmo" ; --# notpresent
    Cond Pl P2 => co_ + "gliereste" ; --# notpresent
    Cond Pl P3 => co_ + "glierebbero" ; --# notpresent
    Imper SgP2 => co_ + "gli" ;
    Imper PlP1 => co_ + "gliamo" ;
    Imper PlP2 => co_ + "gliete" ;
    Ger => co_ + "gliendo" ;
    Part PresP Masc Sg => co_ + "gliente" ;
    Part PresP Masc Pl => co_ + "glienti" ;
    Part PresP Fem Sg => co_ + "gliente" ;
    Part PresP Fem Pl => co_ + "glienti" ;
    Part PassP Masc Sg => co_ + "lto" ;
    Part PassP Masc Pl => co_ + "lti" ;
    Part PassP Fem Sg => co_ + "lta" ;
    Part PassP Fem Pl => co_ + "lte"
    }
  } ;

oper compiere_33 : Str -> Verbo = \compiere ->
  let compi_ = Predef.tk 3 compiere in
 {s = table {
    Inf => compi_ + "ere" ;
    InfClit => compi_ + "er" ;
    Indi Pres Sg P1 => compi_ + "o" ;
    Indi Pres Sg P2 => compi_ + "" ;
    Indi Pres Sg P3 => compi_ + "e" ;
    Indi Pres Pl P1 => compi_ + "amo" ;
    Indi Pres Pl P2 => compi_ + "te" ;
    Indi Pres Pl P3 => compi_ + "ono" ;
    Indi Imperf Sg P1 => compi_ + "evo" ; --# notpresent
    Indi Imperf Sg P2 => compi_ + "evi" ; --# notpresent
    Indi Imperf Sg P3 => compi_ + "eva" ; --# notpresent
    Indi Imperf Pl P1 => compi_ + "evamo" ; --# notpresent
    Indi Imperf Pl P2 => compi_ + "evate" ; --# notpresent
    Indi Imperf Pl P3 => compi_ + "evano" ; --# notpresent
    Pass Sg P1 => compi_ + "ei" ; --# notpresent
    Pass Sg P2 => compi_ + "esti" ; --# notpresent
    Pass Sg P3 => compi_ + "é" ; --# notpresent
    Pass Pl P1 => compi_ + "emmo" ; --# notpresent
    Pass Pl P2 => compi_ + "este" ; --# notpresent
    Pass Pl P3 => compi_ + "erono" ; --# notpresent
    Fut Sg P1 => compi_ + "rò" ; --# notpresent
    Fut Sg P2 => compi_ + "rai" ; --# notpresent
    Fut Sg P3 => compi_ + "rà" ; --# notpresent
    Fut Pl P1 => compi_ + "remo" ; --# notpresent
    Fut Pl P2 => compi_ + "rete" ; --# notpresent
    Fut Pl P3 => compi_ + "ranno" ; --# notpresent
    Cong Pres Sg P1 => compi_ + "a" ;
    Cong Pres Sg P2 => compi_ + "a" ;
    Cong Pres Sg P3 => compi_ + "a" ;
    Cong Pres Pl P1 => compi_ + "amo" ;
    Cong Pres Pl P2 => compi_ + "ate" ;
    Cong Pres Pl P3 => compi_ + "ano" ;
    Cong Imperf Sg P1 => compi_ + "essi" ; --# notpresent
    Cong Imperf Sg P2 => compi_ + "essi" ; --# notpresent
    Cong Imperf Sg P3 => compi_ + "esse" ; --# notpresent
    Cong Imperf Pl P1 => compi_ + "essimo" ; --# notpresent
    Cong Imperf Pl P2 => compi_ + "este" ; --# notpresent
    Cong Imperf Pl P3 => compi_ + "essero" ; --# notpresent
    Cond Sg P1 => compi_ + "rei" ; --# notpresent
    Cond Sg P2 => compi_ + "resti" ; --# notpresent
    Cond Sg P3 => compi_ + "rebbe" ; --# notpresent
    Cond Pl P1 => compi_ + "remmo" ; --# notpresent
    Cond Pl P2 => compi_ + "reste" ; --# notpresent
    Cond Pl P3 => compi_ + "rebbero" ; --# notpresent
    Imper SgP2 => compi_ + "" ;
    Imper PlP1 => compi_ + "amo" ;
    Imper PlP2 => compi_ + "ete" ;
    Ger => compi_ + "endo" ;
    Part PresP Masc Sg => compi_ + "ente" ;
    Part PresP Masc Pl => compi_ + "enti" ;
    Part PresP Fem Sg => compi_ + "ente" ;
    Part PresP Fem Pl => compi_ + "enti" ;
    Part PassP Masc Sg => compi_ + "uto" ;
    Part PassP Masc Pl => compi_ + "uti" ;
    Part PassP Fem Sg => compi_ + "uta" ;
    Part PassP Fem Pl => compi_ + "ute"
    }
  } ;

oper compire_33b : Str -> Verbo = \cire ->
  let c_ = Predef.tk 3 cire in
 {s = table {
    Inf => c_ + "ire" ;
    InfClit => c_ + "ir" ;
    Indi Pres Sg P1 => c_ + "isco" ;
    Indi Pres Sg P2 => c_ + "isci" ;
    Indi Pres Sg P3 => c_ + "isce" ;
    Indi Pres Pl P1 => c_ + "iamo" ;
    Indi Pres Pl P2 => c_ + "ite" ;
    Indi Pres Pl P3 => c_ + "iscono" ;
    Indi Imperf Sg P1 => c_ + "ivo" ; --# notpresent
    Indi Imperf Sg P2 => c_ + "ivi" ; --# notpresent
    Indi Imperf Sg P3 => c_ + "iva" ; --# notpresent
    Indi Imperf Pl P1 => c_ + "ivamo" ; --# notpresent
    Indi Imperf Pl P2 => c_ + "ivate" ; --# notpresent
    Indi Imperf Pl P3 => c_ + "ivano" ; --# notpresent
    Pass Sg P1 => c_ + "ii" ; --# notpresent
    Pass Sg P2 => c_ + "isti" ; --# notpresent
    Pass Sg P3 => c_ + "ì" ; --# notpresent
    Pass Pl P1 => c_ + "immo" ; --# notpresent
    Pass Pl P2 => c_ + "iste" ; --# notpresent
    Pass Pl P3 => c_ + "irono" ; --# notpresent
    Fut Sg P1 => c_ + "irò" ; --# notpresent
    Fut Sg P2 => c_ + "irai" ; --# notpresent
    Fut Sg P3 => c_ + "irà" ; --# notpresent
    Fut Pl P1 => c_ + "iremo" ; --# notpresent
    Fut Pl P2 => c_ + "irete" ; --# notpresent
    Fut Pl P3 => c_ + "iranno" ; --# notpresent
    Cong Pres Sg P1 => c_ + "isca" ;
    Cong Pres Sg P2 => c_ + "isca" ;
    Cong Pres Sg P3 => c_ + "isca" ;
    Cong Pres Pl P1 => c_ + "iamo" ;
    Cong Pres Pl P2 => c_ + "iate" ;
    Cong Pres Pl P3 => c_ + "iscano" ;
    Cong Imperf Sg P1 => c_ + "issi" ; --# notpresent
    Cong Imperf Sg P2 => c_ + "issi" ; --# notpresent
    Cong Imperf Sg P3 => c_ + "isse" ; --# notpresent
    Cong Imperf Pl P1 => c_ + "issimo" ; --# notpresent
    Cong Imperf Pl P2 => c_ + "iste" ; --# notpresent
    Cong Imperf Pl P3 => c_ + "issero" ; --# notpresent
    Cond Sg P1 => c_ + "irei" ; --# notpresent
    Cond Sg P2 => c_ + "iresti" ; --# notpresent
    Cond Sg P3 => c_ + "irebbe" ; --# notpresent
    Cond Pl P1 => c_ + "iremmo" ; --# notpresent
    Cond Pl P2 => c_ + "ireste" ; --# notpresent
    Cond Pl P3 => c_ + "irebbero" ; --# notpresent
    Imper SgP2 => c_ + "isci" ;
    Imper PlP1 => c_ + "iamo" ;
    Imper PlP2 => c_ + "ite" ;
    Ger => c_ + "ompiendo" ;
    Part PresP Masc Sg => c_ + "ompiente" ;
    Part PresP Masc Pl => c_ + "ompienti" ;
    Part PresP Fem Sg => c_ + "ompiente" ;
    Part PresP Fem Pl => c_ + "ompienti" ;
    Part PassP Masc Sg => c_ + "ito" ;
    Part PassP Masc Pl => c_ + "iti" ;
    Part PassP Fem Sg => c_ + "ita" ;
    Part PassP Fem Pl => c_ + "ite"
    }
  } ;

oper comprimere_34 : Str -> Verbo = \comprimere ->
  let compr_ = Predef.tk 5 comprimere in
 {s = table {
    Inf => compr_ + "imere" ;
    InfClit => compr_ + "imer" ;
    Indi Pres Sg P1 => compr_ + "imo" ;
    Indi Pres Sg P2 => compr_ + "imi" ;
    Indi Pres Sg P3 => compr_ + "ime" ;
    Indi Pres Pl P1 => compr_ + "imiamo" ;
    Indi Pres Pl P2 => compr_ + "imete" ;
    Indi Pres Pl P3 => compr_ + "imono" ;
    Indi Imperf Sg P1 => compr_ + "imevo" ; --# notpresent
    Indi Imperf Sg P2 => compr_ + "imevi" ; --# notpresent
    Indi Imperf Sg P3 => compr_ + "imeva" ; --# notpresent
    Indi Imperf Pl P1 => compr_ + "imevamo" ; --# notpresent
    Indi Imperf Pl P2 => compr_ + "imevate" ; --# notpresent
    Indi Imperf Pl P3 => compr_ + "imevano" ; --# notpresent
    Pass Sg P1 => compr_ + "essi" ; --# notpresent
    Pass Sg P2 => compr_ + "imesti" ; --# notpresent
    Pass Sg P3 => compr_ + "esse" ; --# notpresent
    Pass Pl P1 => compr_ + "imemmo" ; --# notpresent
    Pass Pl P2 => compr_ + "imeste" ; --# notpresent
    Pass Pl P3 => compr_ + "essero" ; --# notpresent
    Fut Sg P1 => compr_ + "imerò" ; --# notpresent
    Fut Sg P2 => compr_ + "imerai" ; --# notpresent
    Fut Sg P3 => compr_ + "imerà" ; --# notpresent
    Fut Pl P1 => compr_ + "imeremo" ; --# notpresent
    Fut Pl P2 => compr_ + "imerete" ; --# notpresent
    Fut Pl P3 => compr_ + "imeranno" ; --# notpresent
    Cong Pres Sg P1 => compr_ + "ima" ;
    Cong Pres Sg P2 => compr_ + "ima" ;
    Cong Pres Sg P3 => compr_ + "ima" ;
    Cong Pres Pl P1 => compr_ + "imiamo" ;
    Cong Pres Pl P2 => compr_ + "imiate" ;
    Cong Pres Pl P3 => compr_ + "imano" ;
    Cong Imperf Sg P1 => compr_ + "imessi" ; --# notpresent
    Cong Imperf Sg P2 => compr_ + "imessi" ; --# notpresent
    Cong Imperf Sg P3 => compr_ + "imesse" ; --# notpresent
    Cong Imperf Pl P1 => compr_ + "imessimo" ; --# notpresent
    Cong Imperf Pl P2 => compr_ + "imeste" ; --# notpresent
    Cong Imperf Pl P3 => compr_ + "imessero" ; --# notpresent
    Cond Sg P1 => compr_ + "imerei" ; --# notpresent
    Cond Sg P2 => compr_ + "imeresti" ; --# notpresent
    Cond Sg P3 => compr_ + "imerebbe" ; --# notpresent
    Cond Pl P1 => compr_ + "imeremmo" ; --# notpresent
    Cond Pl P2 => compr_ + "imereste" ; --# notpresent
    Cond Pl P3 => compr_ + "imerebbero" ; --# notpresent
    Imper SgP2 => compr_ + "imi" ;
    Imper PlP1 => compr_ + "imiamo" ;
    Imper PlP2 => compr_ + "imete" ;
    Ger => compr_ + "imendo" ;
    Part PresP Masc Sg => compr_ + "imente" ;
    Part PresP Masc Pl => compr_ + "imenti" ;
    Part PresP Fem Sg => compr_ + "imente" ;
    Part PresP Fem Pl => compr_ + "imenti" ;
    Part PassP Masc Sg => compr_ + "esso" ;
    Part PassP Masc Pl => compr_ + "essi" ;
    Part PassP Fem Sg => compr_ + "essa" ;
    Part PassP Fem Pl => compr_ + "esse"
    }
  } ;

oper concedere_35 : Str -> Verbo = \concedere ->
  let conce_ = Predef.tk 4 concedere in
 {s = table {
    Inf => conce_ + "dere" ;
    InfClit => conce_ + "der" ;
    Indi Pres Sg P1 => conce_ + "do" ;
    Indi Pres Sg P2 => conce_ + "di" ;
    Indi Pres Sg P3 => conce_ + "de" ;
    Indi Pres Pl P1 => conce_ + "diamo" ;
    Indi Pres Pl P2 => conce_ + "dete" ;
    Indi Pres Pl P3 => conce_ + "dono" ;
    Indi Imperf Sg P1 => conce_ + "devo" ; --# notpresent
    Indi Imperf Sg P2 => conce_ + "devi" ; --# notpresent
    Indi Imperf Sg P3 => conce_ + "deva" ; --# notpresent
    Indi Imperf Pl P1 => conce_ + "devamo" ; --# notpresent
    Indi Imperf Pl P2 => conce_ + "devate" ; --# notpresent
    Indi Imperf Pl P3 => conce_ + "devano" ; --# notpresent
    Pass Sg P1 => conce_ + "ssi" ; --# notpresent
    Pass Sg P2 => conce_ + "desti" ; --# notpresent
    Pass Sg P3 => conce_ + "sse" ; --# notpresent
    Pass Pl P1 => conce_ + "demmo" ; --# notpresent
    Pass Pl P2 => conce_ + "deste" ; --# notpresent
    Pass Pl P3 => conce_ + "ssero" ; --# notpresent
    Fut Sg P1 => conce_ + "derò" ; --# notpresent
    Fut Sg P2 => conce_ + "derai" ; --# notpresent
    Fut Sg P3 => conce_ + "derà" ; --# notpresent
    Fut Pl P1 => conce_ + "deremo" ; --# notpresent
    Fut Pl P2 => conce_ + "derete" ; --# notpresent
    Fut Pl P3 => conce_ + "deranno" ; --# notpresent
    Cong Pres Sg P1 => conce_ + "da" ;
    Cong Pres Sg P2 => conce_ + "da" ;
    Cong Pres Sg P3 => conce_ + "da" ;
    Cong Pres Pl P1 => conce_ + "diamo" ;
    Cong Pres Pl P2 => conce_ + "diate" ;
    Cong Pres Pl P3 => conce_ + "dano" ;
    Cong Imperf Sg P1 => conce_ + "dessi" ; --# notpresent
    Cong Imperf Sg P2 => conce_ + "dessi" ; --# notpresent
    Cong Imperf Sg P3 => conce_ + "desse" ; --# notpresent
    Cong Imperf Pl P1 => conce_ + "dessimo" ; --# notpresent
    Cong Imperf Pl P2 => conce_ + "deste" ; --# notpresent
    Cong Imperf Pl P3 => conce_ + "dessero" ; --# notpresent
    Cond Sg P1 => conce_ + "derei" ; --# notpresent
    Cond Sg P2 => conce_ + "deresti" ; --# notpresent
    Cond Sg P3 => conce_ + "derebbe" ; --# notpresent
    Cond Pl P1 => conce_ + "deremmo" ; --# notpresent
    Cond Pl P2 => conce_ + "dereste" ; --# notpresent
    Cond Pl P3 => conce_ + "derebbero" ; --# notpresent
    Imper SgP2 => conce_ + "di" ;
    Imper PlP1 => conce_ + "diamo" ;
    Imper PlP2 => conce_ + "dete" ;
    Ger => conce_ + "dendo" ;
    Part PresP Masc Sg => conce_ + "dente" ;
    Part PresP Masc Pl => conce_ + "denti" ;
    Part PresP Fem Sg => conce_ + "dente" ;
    Part PresP Fem Pl => conce_ + "denti" ;
    Part PassP Masc Sg => conce_ + "sso" ;
    Part PassP Masc Pl => conce_ + "ssi" ;
    Part PassP Fem Sg => conce_ + "ssa" ;
    Part PassP Fem Pl => conce_ + "sse"
    }
  } ;

oper condurre_36 : Str -> Verbo = \condurre ->
  let cond_ = Predef.tk 4 condurre in
 {s = table {
    Inf => cond_ + "urre" ;
    InfClit => cond_ + "ur" ;
    Indi Pres Sg P1 => cond_ + "uco" ;
    Indi Pres Sg P2 => cond_ + "uci" ;
    Indi Pres Sg P3 => cond_ + "uce" ;
    Indi Pres Pl P1 => cond_ + "uciamo" ;
    Indi Pres Pl P2 => cond_ + "ucete" ;
    Indi Pres Pl P3 => cond_ + "ucono" ;
    Indi Imperf Sg P1 => cond_ + "ucevo" ; --# notpresent
    Indi Imperf Sg P2 => cond_ + "ucevi" ; --# notpresent
    Indi Imperf Sg P3 => cond_ + "uceva" ; --# notpresent
    Indi Imperf Pl P1 => cond_ + "ucevamo" ; --# notpresent
    Indi Imperf Pl P2 => cond_ + "ucevate" ; --# notpresent
    Indi Imperf Pl P3 => cond_ + "ucevano" ; --# notpresent
    Pass Sg P1 => cond_ + "ussi" ; --# notpresent
    Pass Sg P2 => cond_ + "ucesti" ; --# notpresent
    Pass Sg P3 => cond_ + "usse" ; --# notpresent
    Pass Pl P1 => cond_ + "ucemmo" ; --# notpresent
    Pass Pl P2 => cond_ + "uceste" ; --# notpresent
    Pass Pl P3 => cond_ + "ussero" ; --# notpresent
    Fut Sg P1 => cond_ + "urrò" ; --# notpresent
    Fut Sg P2 => cond_ + "urrai" ; --# notpresent
    Fut Sg P3 => cond_ + "urrà" ; --# notpresent
    Fut Pl P1 => cond_ + "urremo" ; --# notpresent
    Fut Pl P2 => cond_ + "urrete" ; --# notpresent
    Fut Pl P3 => cond_ + "urranno" ; --# notpresent
    Cong Pres Sg P1 => cond_ + "uca" ;
    Cong Pres Sg P2 => cond_ + "uca" ;
    Cong Pres Sg P3 => cond_ + "uca" ;
    Cong Pres Pl P1 => cond_ + "uciamo" ;
    Cong Pres Pl P2 => cond_ + "uciate" ;
    Cong Pres Pl P3 => cond_ + "ucano" ;
    Cong Imperf Sg P1 => cond_ + "ucessi" ; --# notpresent
    Cong Imperf Sg P2 => cond_ + "ucessi" ; --# notpresent
    Cong Imperf Sg P3 => cond_ + "ucesse" ; --# notpresent
    Cong Imperf Pl P1 => cond_ + "ucessimo" ; --# notpresent
    Cong Imperf Pl P2 => cond_ + "uceste" ; --# notpresent
    Cong Imperf Pl P3 => cond_ + "ucessero" ; --# notpresent
    Cond Sg P1 => cond_ + "urrei" ; --# notpresent
    Cond Sg P2 => cond_ + "urresti" ; --# notpresent
    Cond Sg P3 => cond_ + "urrebbe" ; --# notpresent
    Cond Pl P1 => cond_ + "urremmo" ; --# notpresent
    Cond Pl P2 => cond_ + "urreste" ; --# notpresent
    Cond Pl P3 => cond_ + "urrebbero" ; --# notpresent
    Imper SgP2 => cond_ + "uci" ;
    Imper PlP1 => cond_ + "uciamo" ;
    Imper PlP2 => cond_ + "ucete" ;
    Ger => cond_ + "ucendo" ;
    Part PresP Masc Sg => cond_ + "ucente" ;
    Part PresP Masc Pl => cond_ + "ucenti" ;
    Part PresP Fem Sg => cond_ + "ucente" ;
    Part PresP Fem Pl => cond_ + "ucenti" ;
    Part PassP Masc Sg => cond_ + "otto" ;
    Part PassP Masc Pl => cond_ + "otti" ;
    Part PassP Fem Sg => cond_ + "otta" ;
    Part PassP Fem Pl => cond_ + "otte"
    }
  } ;

oper conoscere_37 : Str -> Verbo = \conoscere ->
  let cono_ = Predef.tk 5 conoscere in
 {s = table {
    Inf => cono_ + "scere" ;
    InfClit => cono_ + "scer" ;
    Indi Pres Sg P1 => cono_ + "sco" ;
    Indi Pres Sg P2 => cono_ + "sci" ;
    Indi Pres Sg P3 => cono_ + "sce" ;
    Indi Pres Pl P1 => cono_ + "sciamo" ;
    Indi Pres Pl P2 => cono_ + "scete" ;
    Indi Pres Pl P3 => cono_ + "scono" ;
    Indi Imperf Sg P1 => cono_ + "scevo" ; --# notpresent
    Indi Imperf Sg P2 => cono_ + "scevi" ; --# notpresent
    Indi Imperf Sg P3 => cono_ + "sceva" ; --# notpresent
    Indi Imperf Pl P1 => cono_ + "scevamo" ; --# notpresent
    Indi Imperf Pl P2 => cono_ + "scevate" ; --# notpresent
    Indi Imperf Pl P3 => cono_ + "scevano" ; --# notpresent
    Pass Sg P1 => cono_ + "bbi" ; --# notpresent
    Pass Sg P2 => cono_ + "scesti" ; --# notpresent
    Pass Sg P3 => cono_ + "bbe" ; --# notpresent
    Pass Pl P1 => cono_ + "scemmo" ; --# notpresent
    Pass Pl P2 => cono_ + "sceste" ; --# notpresent
    Pass Pl P3 => cono_ + "bbero" ; --# notpresent
    Fut Sg P1 => cono_ + "scerò" ; --# notpresent
    Fut Sg P2 => cono_ + "scerai" ; --# notpresent
    Fut Sg P3 => cono_ + "scerà" ; --# notpresent
    Fut Pl P1 => cono_ + "sceremo" ; --# notpresent
    Fut Pl P2 => cono_ + "scerete" ; --# notpresent
    Fut Pl P3 => cono_ + "sceranno" ; --# notpresent
    Cong Pres Sg P1 => cono_ + "sca" ;
    Cong Pres Sg P2 => cono_ + "sca" ;
    Cong Pres Sg P3 => cono_ + "sca" ;
    Cong Pres Pl P1 => cono_ + "sciamo" ;
    Cong Pres Pl P2 => cono_ + "sciate" ;
    Cong Pres Pl P3 => cono_ + "scano" ;
    Cong Imperf Sg P1 => cono_ + "scessi" ; --# notpresent
    Cong Imperf Sg P2 => cono_ + "scessi" ; --# notpresent
    Cong Imperf Sg P3 => cono_ + "scesse" ; --# notpresent
    Cong Imperf Pl P1 => cono_ + "scessimo" ; --# notpresent
    Cong Imperf Pl P2 => cono_ + "sceste" ; --# notpresent
    Cong Imperf Pl P3 => cono_ + "scessero" ; --# notpresent
    Cond Sg P1 => cono_ + "scerei" ; --# notpresent
    Cond Sg P2 => cono_ + "sceresti" ; --# notpresent
    Cond Sg P3 => cono_ + "scerebbe" ; --# notpresent
    Cond Pl P1 => cono_ + "sceremmo" ; --# notpresent
    Cond Pl P2 => cono_ + "scereste" ; --# notpresent
    Cond Pl P3 => cono_ + "scerebbero" ; --# notpresent
    Imper SgP2 => cono_ + "sci" ;
    Imper PlP1 => cono_ + "sciamo" ;
    Imper PlP2 => cono_ + "scete" ;
    Ger => cono_ + "scendo" ;
    Part PresP Masc Sg => cono_ + "scente" ;
    Part PresP Masc Pl => cono_ + "scenti" ;
    Part PresP Fem Sg => cono_ + "scente" ;
    Part PresP Fem Pl => cono_ + "scenti" ;
    Part PassP Masc Sg => cono_ + "sciuto" ;
    Part PassP Masc Pl => cono_ + "sciuti" ;
    Part PassP Fem Sg => cono_ + "sciuta" ;
    Part PassP Fem Pl => cono_ + "sciute"
    }
  } ;

oper correre_38 : Str -> Verbo = \correre ->
  let cor_ = Predef.tk 4 correre in
 {s = table {
    Inf => cor_ + "rere" ;
    InfClit => cor_ + "rer" ;
    Indi Pres Sg P1 => cor_ + "ro" ;
    Indi Pres Sg P2 => cor_ + "ri" ;
    Indi Pres Sg P3 => cor_ + "re" ;
    Indi Pres Pl P1 => cor_ + "riamo" ;
    Indi Pres Pl P2 => cor_ + "rete" ;
    Indi Pres Pl P3 => cor_ + "rono" ;
    Indi Imperf Sg P1 => cor_ + "revo" ; --# notpresent
    Indi Imperf Sg P2 => cor_ + "revi" ; --# notpresent
    Indi Imperf Sg P3 => cor_ + "reva" ; --# notpresent
    Indi Imperf Pl P1 => cor_ + "revamo" ; --# notpresent
    Indi Imperf Pl P2 => cor_ + "revate" ; --# notpresent
    Indi Imperf Pl P3 => cor_ + "revano" ; --# notpresent
    Pass Sg P1 => cor_ + "si" ; --# notpresent
    Pass Sg P2 => cor_ + "resti" ; --# notpresent
    Pass Sg P3 => cor_ + "se" ; --# notpresent
    Pass Pl P1 => cor_ + "remmo" ; --# notpresent
    Pass Pl P2 => cor_ + "reste" ; --# notpresent
    Pass Pl P3 => cor_ + "sero" ; --# notpresent
    Fut Sg P1 => cor_ + "rerò" ; --# notpresent
    Fut Sg P2 => cor_ + "rerai" ; --# notpresent
    Fut Sg P3 => cor_ + "rerà" ; --# notpresent
    Fut Pl P1 => cor_ + "reremo" ; --# notpresent
    Fut Pl P2 => cor_ + "rerete" ; --# notpresent
    Fut Pl P3 => cor_ + "reranno" ; --# notpresent
    Cong Pres Sg P1 => cor_ + "ra" ;
    Cong Pres Sg P2 => cor_ + "ra" ;
    Cong Pres Sg P3 => cor_ + "ra" ;
    Cong Pres Pl P1 => cor_ + "riamo" ;
    Cong Pres Pl P2 => cor_ + "riate" ;
    Cong Pres Pl P3 => cor_ + "rano" ;
    Cong Imperf Sg P1 => cor_ + "ressi" ; --# notpresent
    Cong Imperf Sg P2 => cor_ + "ressi" ; --# notpresent
    Cong Imperf Sg P3 => cor_ + "resse" ; --# notpresent
    Cong Imperf Pl P1 => cor_ + "ressimo" ; --# notpresent
    Cong Imperf Pl P2 => cor_ + "reste" ; --# notpresent
    Cong Imperf Pl P3 => cor_ + "ressero" ; --# notpresent
    Cond Sg P1 => cor_ + "rerei" ; --# notpresent
    Cond Sg P2 => cor_ + "reresti" ; --# notpresent
    Cond Sg P3 => cor_ + "rerebbe" ; --# notpresent
    Cond Pl P1 => cor_ + "reremmo" ; --# notpresent
    Cond Pl P2 => cor_ + "rereste" ; --# notpresent
    Cond Pl P3 => cor_ + "rerebbero" ; --# notpresent
    Imper SgP2 => cor_ + "ri" ;
    Imper PlP1 => cor_ + "riamo" ;
    Imper PlP2 => cor_ + "rete" ;
    Ger => cor_ + "rendo" ;
    Part PresP Masc Sg => cor_ + "rente" ;
    Part PresP Masc Pl => cor_ + "renti" ;
    Part PresP Fem Sg => cor_ + "rente" ;
    Part PresP Fem Pl => cor_ + "renti" ;
    Part PassP Masc Sg => cor_ + "so" ;
    Part PassP Masc Pl => cor_ + "si" ;
    Part PassP Fem Sg => cor_ + "sa" ;
    Part PassP Fem Pl => cor_ + "se"
    }
  } ;

oper crescere_39 : Str -> Verbo = \crescere ->
  let cre_ = Predef.tk 5 crescere in
 {s = table {
    Inf => cre_ + "scere" ;
    InfClit => cre_ + "scer" ;
    Indi Pres Sg P1 => cre_ + "sco" ;
    Indi Pres Sg P2 => cre_ + "sci" ;
    Indi Pres Sg P3 => cre_ + "sce" ;
    Indi Pres Pl P1 => cre_ + "sciamo" ;
    Indi Pres Pl P2 => cre_ + "scete" ;
    Indi Pres Pl P3 => cre_ + "scono" ;
    Indi Imperf Sg P1 => cre_ + "scevo" ; --# notpresent
    Indi Imperf Sg P2 => cre_ + "scevi" ; --# notpresent
    Indi Imperf Sg P3 => cre_ + "sceva" ; --# notpresent
    Indi Imperf Pl P1 => cre_ + "scevamo" ; --# notpresent
    Indi Imperf Pl P2 => cre_ + "scevate" ; --# notpresent
    Indi Imperf Pl P3 => cre_ + "scevano" ; --# notpresent
    Pass Sg P1 => cre_ + "bbi" ; --# notpresent
    Pass Sg P2 => cre_ + "scesti" ; --# notpresent
    Pass Sg P3 => cre_ + "bbe" ; --# notpresent
    Pass Pl P1 => cre_ + "scemmo" ; --# notpresent
    Pass Pl P2 => cre_ + "sceste" ; --# notpresent
    Pass Pl P3 => cre_ + "bbero" ; --# notpresent
    Fut Sg P1 => cre_ + "scerò" ; --# notpresent
    Fut Sg P2 => cre_ + "scerai" ; --# notpresent
    Fut Sg P3 => cre_ + "scerà" ; --# notpresent
    Fut Pl P1 => cre_ + "sceremo" ; --# notpresent
    Fut Pl P2 => cre_ + "scerete" ; --# notpresent
    Fut Pl P3 => cre_ + "sceranno" ; --# notpresent
    Cong Pres Sg P1 => cre_ + "sca" ;
    Cong Pres Sg P2 => cre_ + "sca" ;
    Cong Pres Sg P3 => cre_ + "sca" ;
    Cong Pres Pl P1 => cre_ + "sciamo" ;
    Cong Pres Pl P2 => cre_ + "sciate" ;
    Cong Pres Pl P3 => cre_ + "scano" ;
    Cong Imperf Sg P1 => cre_ + "scessi" ; --# notpresent
    Cong Imperf Sg P2 => cre_ + "scessi" ; --# notpresent
    Cong Imperf Sg P3 => cre_ + "scesse" ; --# notpresent
    Cong Imperf Pl P1 => cre_ + "scessimo" ; --# notpresent
    Cong Imperf Pl P2 => cre_ + "sceste" ; --# notpresent
    Cong Imperf Pl P3 => cre_ + "scessero" ; --# notpresent
    Cond Sg P1 => cre_ + "scerei" ; --# notpresent
    Cond Sg P2 => cre_ + "sceresti" ; --# notpresent
    Cond Sg P3 => cre_ + "scerebbe" ; --# notpresent
    Cond Pl P1 => cre_ + "sceremmo" ; --# notpresent
    Cond Pl P2 => cre_ + "scereste" ; --# notpresent
    Cond Pl P3 => cre_ + "scerebbero" ; --# notpresent
    Imper SgP2 => cre_ + "sci" ;
    Imper PlP1 => cre_ + "sciamo" ;
    Imper PlP2 => cre_ + "scete" ;
    Ger => cre_ + "scendo" ;
    Part PresP Masc Sg => cre_ + "scente" ;
    Part PresP Masc Pl => cre_ + "scenti" ;
    Part PresP Fem Sg => cre_ + "scente" ;
    Part PresP Fem Pl => cre_ + "scenti" ;
    Part PassP Masc Sg => cre_ + "sciuto" ;
    Part PassP Masc Pl => cre_ + "sciuti" ;
    Part PassP Fem Sg => cre_ + "sciuta" ;
    Part PassP Fem Pl => cre_ + "sciute"
    }
  } ;

oper cuocere_40 : Str -> Verbo = \cuocere ->
  let c_ = Predef.tk 6 cuocere in
 {s = table {
    Inf => c_ + "uocere" ;
    InfClit => c_ + "uocer" ;
    Indi Pres Sg P1 => c_ + "uocio" ;
    Indi Pres Sg P2 => c_ + "uoci" ;
    Indi Pres Sg P3 => c_ + "uoce" ;
    Indi Pres Pl P1 => c_ + "uociamo" ;
    Indi Pres Pl P2 => c_ + "uocete" ;
    Indi Pres Pl P3 => c_ + "uociono" ;
    Indi Imperf Sg P1 => c_ + "uocevo" ; --# notpresent
    Indi Imperf Sg P2 => c_ + "uocevi" ; --# notpresent
    Indi Imperf Sg P3 => c_ + "uoceva" ; --# notpresent
    Indi Imperf Pl P1 => c_ + "uocevamo" ; --# notpresent
    Indi Imperf Pl P2 => c_ + "uocevate" ; --# notpresent
    Indi Imperf Pl P3 => c_ + "uocevano" ; --# notpresent
    Pass Sg P1 => c_ + "ossi" ; --# notpresent
    Pass Sg P2 => c_ + "uocesti" ; --# notpresent
    Pass Sg P3 => c_ + "osse" ; --# notpresent
    Pass Pl P1 => c_ + "uocemmo" ; --# notpresent
    Pass Pl P2 => c_ + "uoceste" ; --# notpresent
    Pass Pl P3 => c_ + "ossero" ; --# notpresent
    Fut Sg P1 => c_ + "uocerò" ; --# notpresent
    Fut Sg P2 => c_ + "uocerai" ; --# notpresent
    Fut Sg P3 => c_ + "uocerà" ; --# notpresent
    Fut Pl P1 => c_ + "uoceremo" ; --# notpresent
    Fut Pl P2 => c_ + "uocerete" ; --# notpresent
    Fut Pl P3 => c_ + "uoceranno" ; --# notpresent
    Cong Pres Sg P1 => c_ + "uocia" ;
    Cong Pres Sg P2 => c_ + "uocia" ;
    Cong Pres Sg P3 => c_ + "uocia" ;
    Cong Pres Pl P1 => c_ + "uociamo" ;
    Cong Pres Pl P2 => c_ + "uociate" ;
    Cong Pres Pl P3 => c_ + "uociano" ;
    Cong Imperf Sg P1 => c_ + "uocessi" ; --# notpresent
    Cong Imperf Sg P2 => c_ + "uocessi" ; --# notpresent
    Cong Imperf Sg P3 => c_ + "uocesse" ; --# notpresent
    Cong Imperf Pl P1 => c_ + "uocessimo" ; --# notpresent
    Cong Imperf Pl P2 => c_ + "uoceste" ; --# notpresent
    Cong Imperf Pl P3 => c_ + "uocessero" ; --# notpresent
    Cond Sg P1 => c_ + "uocerei" ; --# notpresent
    Cond Sg P2 => c_ + "uoceresti" ; --# notpresent
    Cond Sg P3 => c_ + "uocerebbe" ; --# notpresent
    Cond Pl P1 => c_ + "uoceremmo" ; --# notpresent
    Cond Pl P2 => c_ + "uocereste" ; --# notpresent
    Cond Pl P3 => c_ + "uocerebbero" ; --# notpresent
    Imper SgP2 => c_ + "uoci" ;
    Imper PlP1 => c_ + "uociamo" ;
    Imper PlP2 => c_ + "uocete" ;
    Ger => c_ + "uocendo" ;
    Part PresP Masc Sg => c_ + "uocente" ;
    Part PresP Masc Pl => c_ + "uocenti" ;
    Part PresP Fem Sg => c_ + "uocente" ;
    Part PresP Fem Pl => c_ + "uocenti" ;
    Part PassP Masc Sg => c_ + "otto" ;
    Part PassP Masc Pl => c_ + "otti" ;
    Part PassP Fem Sg => c_ + "otta" ;
    Part PassP Fem Pl => c_ + "otte"
    }
  } ;

oper dire_41 : Str -> Verbo = \dire ->
  let d_ = Predef.tk 3 dire in
 {s = table {
    Inf => d_ + "ire" ;
    InfClit => d_ + "ir" ;
    Indi Pres Sg P1 => d_ + "ico" ;
    Indi Pres Sg P2 => d_ + "ici" ;
    Indi Pres Sg P3 => d_ + "ice" ;
    Indi Pres Pl P1 => d_ + "iciamo" ;
    Indi Pres Pl P2 => d_ + "ite" ;
    Indi Pres Pl P3 => d_ + "icono" ;
    Indi Imperf Sg P1 => d_ + "icevo" ; --# notpresent
    Indi Imperf Sg P2 => d_ + "icevi" ; --# notpresent
    Indi Imperf Sg P3 => d_ + "iceva" ; --# notpresent
    Indi Imperf Pl P1 => d_ + "icevamo" ; --# notpresent
    Indi Imperf Pl P2 => d_ + "icevate" ; --# notpresent
    Indi Imperf Pl P3 => d_ + "icevano" ; --# notpresent
    Pass Sg P1 => d_ + "issi" ; --# notpresent
    Pass Sg P2 => d_ + "icesti" ; --# notpresent
    Pass Sg P3 => d_ + "isse" ; --# notpresent
    Pass Pl P1 => d_ + "icemmo" ; --# notpresent
    Pass Pl P2 => d_ + "iceste" ; --# notpresent
    Pass Pl P3 => d_ + "issero" ; --# notpresent
    Fut Sg P1 => d_ + "irò" ; --# notpresent
    Fut Sg P2 => d_ + "irai" ; --# notpresent
    Fut Sg P3 => d_ + "irà" ; --# notpresent
    Fut Pl P1 => d_ + "iremo" ; --# notpresent
    Fut Pl P2 => d_ + "irete" ; --# notpresent
    Fut Pl P3 => d_ + "iranno" ; --# notpresent
    Cong Pres Sg P1 => d_ + "ica" ;
    Cong Pres Sg P2 => d_ + "ica" ;
    Cong Pres Sg P3 => d_ + "ica" ;
    Cong Pres Pl P1 => d_ + "iciamo" ;
    Cong Pres Pl P2 => d_ + "iciate" ;
    Cong Pres Pl P3 => d_ + "icano" ;
    Cong Imperf Sg P1 => d_ + "icessi" ; --# notpresent
    Cong Imperf Sg P2 => d_ + "icessi" ; --# notpresent
    Cong Imperf Sg P3 => d_ + "icesse" ; --# notpresent
    Cong Imperf Pl P1 => d_ + "icessimo" ; --# notpresent
    Cong Imperf Pl P2 => d_ + "iceste" ; --# notpresent
    Cong Imperf Pl P3 => d_ + "icessero" ; --# notpresent
    Cond Sg P1 => d_ + "irei" ; --# notpresent
    Cond Sg P2 => d_ + "iresti" ; --# notpresent
    Cond Sg P3 => d_ + "irebbe" ; --# notpresent
    Cond Pl P1 => d_ + "iremmo" ; --# notpresent
    Cond Pl P2 => d_ + "ireste" ; --# notpresent
    Cond Pl P3 => d_ + "irebbero" ; --# notpresent
    Imper SgP2 => variants {d_ + "i`" ; d_ + "i"} ;
    Imper PlP1 => d_ + "iciamo" ;
    Imper PlP2 => d_ + "ite" ;
    Ger => d_ + "icendo" ;
    Part PresP Masc Sg => d_ + "icente" ;
    Part PresP Masc Pl => d_ + "icenti" ;
    Part PresP Fem Sg => d_ + "icente" ;
    Part PresP Fem Pl => d_ + "icenti" ;
    Part PassP Masc Sg => d_ + "etto" ;
    Part PassP Masc Pl => d_ + "etti" ;
    Part PassP Fem Sg => d_ + "etta" ;
    Part PassP Fem Pl => d_ + "ette"
    }
  } ;

oper dirigere_42 : Str -> Verbo = \dirigere ->
  let dir_ = Predef.tk 5 dirigere in
 {s = table {
    Inf => dir_ + "igere" ;
    InfClit => dir_ + "iger" ;
    Indi Pres Sg P1 => dir_ + "igo" ;
    Indi Pres Sg P2 => dir_ + "igi" ;
    Indi Pres Sg P3 => dir_ + "ige" ;
    Indi Pres Pl P1 => dir_ + "igiamo" ;
    Indi Pres Pl P2 => dir_ + "igete" ;
    Indi Pres Pl P3 => dir_ + "igono" ;
    Indi Imperf Sg P1 => dir_ + "igevo" ; --# notpresent
    Indi Imperf Sg P2 => dir_ + "igevi" ; --# notpresent
    Indi Imperf Sg P3 => dir_ + "igeva" ; --# notpresent
    Indi Imperf Pl P1 => dir_ + "igevamo" ; --# notpresent
    Indi Imperf Pl P2 => dir_ + "igevate" ; --# notpresent
    Indi Imperf Pl P3 => dir_ + "igevano" ; --# notpresent
    Pass Sg P1 => dir_ + "essi" ; --# notpresent
    Pass Sg P2 => dir_ + "igesti" ; --# notpresent
    Pass Sg P3 => dir_ + "esse" ; --# notpresent
    Pass Pl P1 => dir_ + "igemmo" ; --# notpresent
    Pass Pl P2 => dir_ + "igeste" ; --# notpresent
    Pass Pl P3 => dir_ + "essero" ; --# notpresent
    Fut Sg P1 => dir_ + "igerò" ; --# notpresent
    Fut Sg P2 => dir_ + "igerai" ; --# notpresent
    Fut Sg P3 => dir_ + "igerà" ; --# notpresent
    Fut Pl P1 => dir_ + "igeremo" ; --# notpresent
    Fut Pl P2 => dir_ + "igerete" ; --# notpresent
    Fut Pl P3 => dir_ + "igeranno" ; --# notpresent
    Cong Pres Sg P1 => dir_ + "iga" ;
    Cong Pres Sg P2 => dir_ + "iga" ;
    Cong Pres Sg P3 => dir_ + "iga" ;
    Cong Pres Pl P1 => dir_ + "igiamo" ;
    Cong Pres Pl P2 => dir_ + "igiate" ;
    Cong Pres Pl P3 => dir_ + "igano" ;
    Cong Imperf Sg P1 => dir_ + "igessi" ; --# notpresent
    Cong Imperf Sg P2 => dir_ + "igessi" ; --# notpresent
    Cong Imperf Sg P3 => dir_ + "igesse" ; --# notpresent
    Cong Imperf Pl P1 => dir_ + "igessimo" ; --# notpresent
    Cong Imperf Pl P2 => dir_ + "igeste" ; --# notpresent
    Cong Imperf Pl P3 => dir_ + "igessero" ; --# notpresent
    Cond Sg P1 => dir_ + "igerei" ; --# notpresent
    Cond Sg P2 => dir_ + "igeresti" ; --# notpresent
    Cond Sg P3 => dir_ + "igerebbe" ; --# notpresent
    Cond Pl P1 => dir_ + "igeremmo" ; --# notpresent
    Cond Pl P2 => dir_ + "igereste" ; --# notpresent
    Cond Pl P3 => dir_ + "igerebbero" ; --# notpresent
    Imper SgP2 => dir_ + "igi" ;
    Imper PlP1 => dir_ + "igiamo" ;
    Imper PlP2 => dir_ + "igete" ;
    Ger => dir_ + "igendo" ;
    Part PresP Masc Sg => dir_ + "igente" ;
    Part PresP Masc Pl => dir_ + "igenti" ;
    Part PresP Fem Sg => dir_ + "igente" ;
    Part PresP Fem Pl => dir_ + "igenti" ;
    Part PassP Masc Sg => dir_ + "etto" ;
    Part PassP Masc Pl => dir_ + "etti" ;
    Part PassP Fem Sg => dir_ + "etta" ;
    Part PassP Fem Pl => dir_ + "ette"
    }
  } ;

oper discutere_43 : Str -> Verbo = \discutere ->
  let discu_ = Predef.tk 4 discutere in
 {s = table {
    Inf => discu_ + "tere" ;
    InfClit => discu_ + "ter" ;
    Indi Pres Sg P1 => discu_ + "to" ;
    Indi Pres Sg P2 => discu_ + "ti" ;
    Indi Pres Sg P3 => discu_ + "te" ;
    Indi Pres Pl P1 => discu_ + "tiamo" ;
    Indi Pres Pl P2 => discu_ + "tete" ;
    Indi Pres Pl P3 => discu_ + "tono" ;
    Indi Imperf Sg P1 => discu_ + "tevo" ; --# notpresent
    Indi Imperf Sg P2 => discu_ + "tevi" ; --# notpresent
    Indi Imperf Sg P3 => discu_ + "teva" ; --# notpresent
    Indi Imperf Pl P1 => discu_ + "tevamo" ; --# notpresent
    Indi Imperf Pl P2 => discu_ + "tevate" ; --# notpresent
    Indi Imperf Pl P3 => discu_ + "tevano" ; --# notpresent
    Pass Sg P1 => discu_ + "ssi" ; --# notpresent
    Pass Sg P2 => discu_ + "testi" ; --# notpresent
    Pass Sg P3 => discu_ + "sse" ; --# notpresent
    Pass Pl P1 => discu_ + "temmo" ; --# notpresent
    Pass Pl P2 => discu_ + "teste" ; --# notpresent
    Pass Pl P3 => discu_ + "ssero" ; --# notpresent
    Fut Sg P1 => discu_ + "terò" ; --# notpresent
    Fut Sg P2 => discu_ + "terai" ; --# notpresent
    Fut Sg P3 => discu_ + "terà" ; --# notpresent
    Fut Pl P1 => discu_ + "teremo" ; --# notpresent
    Fut Pl P2 => discu_ + "terete" ; --# notpresent
    Fut Pl P3 => discu_ + "teranno" ; --# notpresent
    Cong Pres Sg P1 => discu_ + "ta" ;
    Cong Pres Sg P2 => discu_ + "ta" ;
    Cong Pres Sg P3 => discu_ + "ta" ;
    Cong Pres Pl P1 => discu_ + "tiamo" ;
    Cong Pres Pl P2 => discu_ + "tiate" ;
    Cong Pres Pl P3 => discu_ + "tano" ;
    Cong Imperf Sg P1 => discu_ + "tessi" ; --# notpresent
    Cong Imperf Sg P2 => discu_ + "tessi" ; --# notpresent
    Cong Imperf Sg P3 => discu_ + "tesse" ; --# notpresent
    Cong Imperf Pl P1 => discu_ + "tessimo" ; --# notpresent
    Cong Imperf Pl P2 => discu_ + "teste" ; --# notpresent
    Cong Imperf Pl P3 => discu_ + "tessero" ; --# notpresent
    Cond Sg P1 => discu_ + "terei" ; --# notpresent
    Cond Sg P2 => discu_ + "teresti" ; --# notpresent
    Cond Sg P3 => discu_ + "terebbe" ; --# notpresent
    Cond Pl P1 => discu_ + "teremmo" ; --# notpresent
    Cond Pl P2 => discu_ + "tereste" ; --# notpresent
    Cond Pl P3 => discu_ + "terebbero" ; --# notpresent
    Imper SgP2 => discu_ + "ti" ;
    Imper PlP1 => discu_ + "tiamo" ;
    Imper PlP2 => discu_ + "tete" ;
    Ger => discu_ + "tendo" ;
    Part PresP Masc Sg => discu_ + "tente" ;
    Part PresP Masc Pl => discu_ + "tenti" ;
    Part PresP Fem Sg => discu_ + "tente" ;
    Part PresP Fem Pl => discu_ + "tenti" ;
    Part PassP Masc Sg => discu_ + "sso" ;
    Part PassP Masc Pl => discu_ + "ssi" ;
    Part PassP Fem Sg => discu_ + "ssa" ;
    Part PassP Fem Pl => discu_ + "sse"
    }
  } ;

oper distinguere_44 : Str -> Verbo = \distinguere ->
  let distin_ = Predef.tk 5 distinguere in
 {s = table {
    Inf => distin_ + "guere" ;
    InfClit => distin_ + "guer" ;
    Indi Pres Sg P1 => distin_ + "guo" ;
    Indi Pres Sg P2 => distin_ + "gui" ;
    Indi Pres Sg P3 => distin_ + "gue" ;
    Indi Pres Pl P1 => distin_ + "guiamo" ;
    Indi Pres Pl P2 => distin_ + "guete" ;
    Indi Pres Pl P3 => distin_ + "guono" ;
    Indi Imperf Sg P1 => distin_ + "guevo" ; --# notpresent
    Indi Imperf Sg P2 => distin_ + "guevi" ; --# notpresent
    Indi Imperf Sg P3 => distin_ + "gueva" ; --# notpresent
    Indi Imperf Pl P1 => distin_ + "guevamo" ; --# notpresent
    Indi Imperf Pl P2 => distin_ + "guevate" ; --# notpresent
    Indi Imperf Pl P3 => distin_ + "guevano" ; --# notpresent
    Pass Sg P1 => distin_ + "si" ; --# notpresent
    Pass Sg P2 => distin_ + "guesti" ; --# notpresent
    Pass Sg P3 => distin_ + "se" ; --# notpresent
    Pass Pl P1 => distin_ + "guemmo" ; --# notpresent
    Pass Pl P2 => distin_ + "gueste" ; --# notpresent
    Pass Pl P3 => distin_ + "sero" ; --# notpresent
    Fut Sg P1 => distin_ + "guerò" ; --# notpresent
    Fut Sg P2 => distin_ + "guerai" ; --# notpresent
    Fut Sg P3 => distin_ + "guerà" ; --# notpresent
    Fut Pl P1 => distin_ + "gueremo" ; --# notpresent
    Fut Pl P2 => distin_ + "guerete" ; --# notpresent
    Fut Pl P3 => distin_ + "gueranno" ; --# notpresent
    Cong Pres Sg P1 => distin_ + "gua" ;
    Cong Pres Sg P2 => distin_ + "gua" ;
    Cong Pres Sg P3 => distin_ + "gua" ;
    Cong Pres Pl P1 => distin_ + "guiamo" ;
    Cong Pres Pl P2 => distin_ + "guiate" ;
    Cong Pres Pl P3 => distin_ + "guano" ;
    Cong Imperf Sg P1 => distin_ + "guessi" ; --# notpresent
    Cong Imperf Sg P2 => distin_ + "guessi" ; --# notpresent
    Cong Imperf Sg P3 => distin_ + "guesse" ; --# notpresent
    Cong Imperf Pl P1 => distin_ + "guessimo" ; --# notpresent
    Cong Imperf Pl P2 => distin_ + "gueste" ; --# notpresent
    Cong Imperf Pl P3 => distin_ + "guessero" ; --# notpresent
    Cond Sg P1 => distin_ + "guerei" ; --# notpresent
    Cond Sg P2 => distin_ + "gueresti" ; --# notpresent
    Cond Sg P3 => distin_ + "guerebbe" ; --# notpresent
    Cond Pl P1 => distin_ + "gueremmo" ; --# notpresent
    Cond Pl P2 => distin_ + "guereste" ; --# notpresent
    Cond Pl P3 => distin_ + "guerebbero" ; --# notpresent
    Imper SgP2 => distin_ + "gui" ;
    Imper PlP1 => distin_ + "guiamo" ;
    Imper PlP2 => distin_ + "guete" ;
    Ger => distin_ + "guendo" ;
    Part PresP Masc Sg => distin_ + "guente" ;
    Part PresP Masc Pl => distin_ + "guenti" ;
    Part PresP Fem Sg => distin_ + "guente" ;
    Part PresP Fem Pl => distin_ + "guenti" ;
    Part PassP Masc Sg => distin_ + "to" ;
    Part PassP Masc Pl => distin_ + "ti" ;
    Part PassP Fem Sg => distin_ + "ta" ;
    Part PassP Fem Pl => distin_ + "te"
    }
  } ;

oper distruggere_45 : Str -> Verbo = \distruggere ->
  let distru_ = Predef.tk 5 distruggere in
 {s = table {
    Inf => distru_ + "ggere" ;
    InfClit => distru_ + "gger" ;
    Indi Pres Sg P1 => distru_ + "ggo" ;
    Indi Pres Sg P2 => distru_ + "ggi" ;
    Indi Pres Sg P3 => distru_ + "gge" ;
    Indi Pres Pl P1 => distru_ + "ggiamo" ;
    Indi Pres Pl P2 => distru_ + "ggete" ;
    Indi Pres Pl P3 => distru_ + "ggono" ;
    Indi Imperf Sg P1 => distru_ + "ggevo" ; --# notpresent
    Indi Imperf Sg P2 => distru_ + "ggevi" ; --# notpresent
    Indi Imperf Sg P3 => distru_ + "ggeva" ; --# notpresent
    Indi Imperf Pl P1 => distru_ + "ggevamo" ; --# notpresent
    Indi Imperf Pl P2 => distru_ + "ggevate" ; --# notpresent
    Indi Imperf Pl P3 => distru_ + "ggevano" ; --# notpresent
    Pass Sg P1 => distru_ + "ssi" ; --# notpresent
    Pass Sg P2 => distru_ + "ggesti" ; --# notpresent
    Pass Sg P3 => distru_ + "sse" ; --# notpresent
    Pass Pl P1 => distru_ + "ggemmo" ; --# notpresent
    Pass Pl P2 => distru_ + "ggeste" ; --# notpresent
    Pass Pl P3 => distru_ + "ssero" ; --# notpresent
    Fut Sg P1 => distru_ + "ggerò" ; --# notpresent
    Fut Sg P2 => distru_ + "ggerai" ; --# notpresent
    Fut Sg P3 => distru_ + "ggerà" ; --# notpresent
    Fut Pl P1 => distru_ + "ggeremo" ; --# notpresent
    Fut Pl P2 => distru_ + "ggerete" ; --# notpresent
    Fut Pl P3 => distru_ + "ggeranno" ; --# notpresent
    Cong Pres Sg P1 => distru_ + "gga" ;
    Cong Pres Sg P2 => distru_ + "gga" ;
    Cong Pres Sg P3 => distru_ + "gga" ;
    Cong Pres Pl P1 => distru_ + "ggiamo" ;
    Cong Pres Pl P2 => distru_ + "ggiate" ;
    Cong Pres Pl P3 => distru_ + "ggano" ;
    Cong Imperf Sg P1 => distru_ + "ggessi" ; --# notpresent
    Cong Imperf Sg P2 => distru_ + "ggessi" ; --# notpresent
    Cong Imperf Sg P3 => distru_ + "ggesse" ; --# notpresent
    Cong Imperf Pl P1 => distru_ + "ggessimo" ; --# notpresent
    Cong Imperf Pl P2 => distru_ + "ggeste" ; --# notpresent
    Cong Imperf Pl P3 => distru_ + "ggessero" ; --# notpresent
    Cond Sg P1 => distru_ + "ggerei" ; --# notpresent
    Cond Sg P2 => distru_ + "ggeresti" ; --# notpresent
    Cond Sg P3 => distru_ + "ggerebbe" ; --# notpresent
    Cond Pl P1 => distru_ + "ggeremmo" ; --# notpresent
    Cond Pl P2 => distru_ + "ggereste" ; --# notpresent
    Cond Pl P3 => distru_ + "ggerebbero" ; --# notpresent
    Imper SgP2 => distru_ + "ggi" ;
    Imper PlP1 => distru_ + "ggiamo" ;
    Imper PlP2 => distru_ + "ggete" ;
    Ger => distru_ + "ggendo" ;
    Part PresP Masc Sg => distru_ + "ggente" ;
    Part PresP Masc Pl => distru_ + "ggenti" ;
    Part PresP Fem Sg => distru_ + "ggente" ;
    Part PresP Fem Pl => distru_ + "ggenti" ;
    Part PassP Masc Sg => distru_ + "tto" ;
    Part PassP Masc Pl => distru_ + "tti" ;
    Part PassP Fem Sg => distru_ + "tta" ;
    Part PassP Fem Pl => distru_ + "tte"
    }
  } ;

oper dolere_46 : Str -> Verbo = \dolere ->
  let d_ = Predef.tk 5 dolere in
 {s = table {
    Inf => d_ + "olere" ;
    InfClit => d_ + "oler" ;
    Indi Pres Sg P1 => d_ + "olgo" ;
    Indi Pres Sg P2 => d_ + "uoli" ;
    Indi Pres Sg P3 => d_ + "uole" ;
    Indi Pres Pl P1 => d_ + "oliamo" ;
    Indi Pres Pl P2 => d_ + "olete" ;
    Indi Pres Pl P3 => d_ + "olgono" ;
    Indi Imperf Sg P1 => d_ + "olevo" ; --# notpresent
    Indi Imperf Sg P2 => d_ + "olevi" ; --# notpresent
    Indi Imperf Sg P3 => d_ + "oleva" ; --# notpresent
    Indi Imperf Pl P1 => d_ + "olevamo" ; --# notpresent
    Indi Imperf Pl P2 => d_ + "olevate" ; --# notpresent
    Indi Imperf Pl P3 => d_ + "olevano" ; --# notpresent
    Pass Sg P1 => d_ + "olsi" ; --# notpresent
    Pass Sg P2 => d_ + "olesti" ; --# notpresent
    Pass Sg P3 => d_ + "olse" ; --# notpresent
    Pass Pl P1 => d_ + "olemmo" ; --# notpresent
    Pass Pl P2 => d_ + "oleste" ; --# notpresent
    Pass Pl P3 => d_ + "olsero" ; --# notpresent
    Fut Sg P1 => d_ + "orrò" ; --# notpresent
    Fut Sg P2 => d_ + "orrai" ; --# notpresent
    Fut Sg P3 => d_ + "orrà" ; --# notpresent
    Fut Pl P1 => d_ + "orremo" ; --# notpresent
    Fut Pl P2 => d_ + "orrete" ; --# notpresent
    Fut Pl P3 => d_ + "orranno" ; --# notpresent
    Cong Pres Sg P1 => d_ + "olga" ;
    Cong Pres Sg P2 => d_ + "olga" ;
    Cong Pres Sg P3 => d_ + "olga" ;
    Cong Pres Pl P1 => d_ + "oliamo" ;
    Cong Pres Pl P2 => d_ + "oliate" ;
    Cong Pres Pl P3 => d_ + "olgano" ;
    Cong Imperf Sg P1 => d_ + "olessi" ; --# notpresent
    Cong Imperf Sg P2 => d_ + "olessi" ; --# notpresent
    Cong Imperf Sg P3 => d_ + "olesse" ; --# notpresent
    Cong Imperf Pl P1 => d_ + "olessimo" ; --# notpresent
    Cong Imperf Pl P2 => d_ + "oleste" ; --# notpresent
    Cong Imperf Pl P3 => d_ + "olessero" ; --# notpresent
    Cond Sg P1 => d_ + "orrei" ; --# notpresent
    Cond Sg P2 => d_ + "orresti" ; --# notpresent
    Cond Sg P3 => d_ + "orrebbe" ; --# notpresent
    Cond Pl P1 => d_ + "orremmo" ; --# notpresent
    Cond Pl P2 => d_ + "orreste" ; --# notpresent
    Cond Pl P3 => d_ + "orrebbero" ; --# notpresent
    Imper SgP2 => d_ + "uoli" ;
    Imper PlP1 => d_ + "oliamo" ;
    Imper PlP2 => d_ + "olete" ;
    Ger => d_ + "olendo" ;
    Part PresP Masc Sg => d_ + "olente" ;
    Part PresP Masc Pl => d_ + "olenti" ;
    Part PresP Fem Sg => d_ + "olente" ;
    Part PresP Fem Pl => d_ + "olenti" ;
    Part PassP Masc Sg => d_ + "oluto" ;
    Part PassP Masc Pl => d_ + "oluti" ;
    Part PassP Fem Sg => d_ + "oluta" ;
    Part PassP Fem Pl => d_ + "olute"
    }
  } ;

oper dovere_47 : Str -> Verbo = \dovere ->
  let d_ = Predef.tk 5 dovere in
 {s = table {
    Inf => d_ + "overe" ;
    InfClit => d_ + "over" ;
    Indi Pres Sg P1 => d_ + "evo" ; ---- variants {d_ + "ebbo" ; d_ + "evo"} ;
    Indi Pres Sg P2 => d_ + "evi" ;
    Indi Pres Sg P3 => d_ + "eve" ;
    Indi Pres Pl P1 => d_ + "obbiamo" ;
    Indi Pres Pl P2 => d_ + "ovete" ;
    Indi Pres Pl P3 => d_ + "evono" ; ---- variants {d_ + "ebbono" ; d_ + "evono"} ;
    Indi Imperf Sg P1 => d_ + "ovevo" ; --# notpresent
    Indi Imperf Sg P2 => d_ + "ovevi" ; --# notpresent
    Indi Imperf Sg P3 => d_ + "oveva" ; --# notpresent
    Indi Imperf Pl P1 => d_ + "ovevamo" ; --# notpresent
    Indi Imperf Pl P2 => d_ + "ovevate" ; --# notpresent
    Indi Imperf Pl P3 => d_ + "ovevano" ; --# notpresent
    Pass Sg P1 => d_ + "ovetti" ; --# notpresent
    Pass Sg P2 => d_ + "ovesti" ; --# notpresent
    Pass Sg P3 => d_ + "ovette" ; --# notpresent
    Pass Pl P1 => d_ + "ovemmo" ; --# notpresent
    Pass Pl P2 => d_ + "oveste" ; --# notpresent
    Pass Pl P3 => d_ + "ovettero" ; --# notpresent
    Fut Sg P1 => d_ + "ovrò" ; --# notpresent
    Fut Sg P2 => d_ + "ovrai" ; --# notpresent
    Fut Sg P3 => d_ + "ovrà" ; --# notpresent
    Fut Pl P1 => d_ + "ovremo" ; --# notpresent
    Fut Pl P2 => d_ + "ovrete" ; --# notpresent
    Fut Pl P3 => d_ + "ovranno" ; --# notpresent
    Cong Pres Sg P1 => d_ + "eva" ; ---- variants {d_ + "ebba" ; d_ + "eva"} ;
    Cong Pres Sg P2 => d_ + "eva" ; ---- variants {d_ + "ebba" ; d_ + "eva"} ;
    Cong Pres Sg P3 => d_ + "eva" ; ---- variants {d_ + "ebba" ; d_ + "eva"} ;
    Cong Pres Pl P1 => d_ + "obbiamo" ;
    Cong Pres Pl P2 => d_ + "obbiate" ;
    Cong Pres Pl P3 =>  d_ + "evano" ; ---- variants {d_ + "ebbano" ; d_ + "evano"} ;
    Cong Imperf Sg P1 => d_ + "ovessi" ; --# notpresent
    Cong Imperf Sg P2 => d_ + "ovessi" ; --# notpresent
    Cong Imperf Sg P3 => d_ + "ovesse" ; --# notpresent
    Cong Imperf Pl P1 => d_ + "ovessimo" ; --# notpresent
    Cong Imperf Pl P2 => d_ + "oveste" ; --# notpresent
    Cong Imperf Pl P3 => d_ + "ovessero" ; --# notpresent
    Cond Sg P1 => d_ + "ovrei" ; --# notpresent
    Cond Sg P2 => d_ + "ovresti" ; --# notpresent
    Cond Sg P3 => d_ + "ovrebbe" ; --# notpresent
    Cond Pl P1 => d_ + "ovremmo" ; --# notpresent
    Cond Pl P2 => d_ + "ovreste" ; --# notpresent
    Cond Pl P3 => d_ + "ovrebbero" ; --# notpresent
    Imper SgP2 => d_ + "ebba" ; ---- variants {} ;
    Imper PlP1 => d_ + "obbiamo" ; ---- variants {} ;
    Imper PlP2 => d_ + "dobbiate" ;  ---- ;
    Ger => d_ + "ovendo" ;
    Part PresP Masc Sg => variants {} ;
    Part PresP Masc Pl => variants {} ;
    Part PresP Fem Sg => variants {} ;
    Part PresP Fem Pl => variants {} ;
    Part PassP Masc Sg => d_ + "ovuto" ;
    Part PassP Masc Pl => d_ + "ovuti" ;
    Part PassP Fem Sg => d_ + "ovuta" ;
    Part PassP Fem Pl => d_ + "ovute"
    }
  } ;

oper emergere_28 : Str -> Verbo = \emergere ->
  let emer_ = Predef.tk 4 emergere in
 {s = table {
    Inf => emer_ + "gere" ;
    InfClit => emer_ + "ger" ;
    Indi Pres Sg P1 => emer_ + "go" ;
    Indi Pres Sg P2 => emer_ + "gi" ;
    Indi Pres Sg P3 => emer_ + "ge" ;
    Indi Pres Pl P1 => emer_ + "giamo" ;
    Indi Pres Pl P2 => emer_ + "gete" ;
    Indi Pres Pl P3 => emer_ + "gono" ;
    Indi Imperf Sg P1 => emer_ + "gevo" ; --# notpresent
    Indi Imperf Sg P2 => emer_ + "gevi" ; --# notpresent
    Indi Imperf Sg P3 => emer_ + "geva" ; --# notpresent
    Indi Imperf Pl P1 => emer_ + "gevamo" ; --# notpresent
    Indi Imperf Pl P2 => emer_ + "gevate" ; --# notpresent
    Indi Imperf Pl P3 => emer_ + "gevano" ; --# notpresent
    Pass Sg P1 => emer_ + "si" ; --# notpresent
    Pass Sg P2 => emer_ + "gesti" ; --# notpresent
    Pass Sg P3 => emer_ + "se" ; --# notpresent
    Pass Pl P1 => emer_ + "gemmo" ; --# notpresent
    Pass Pl P2 => emer_ + "geste" ; --# notpresent
    Pass Pl P3 => emer_ + "sero" ; --# notpresent
    Fut Sg P1 => emer_ + "gerò" ; --# notpresent
    Fut Sg P2 => emer_ + "gerai" ; --# notpresent
    Fut Sg P3 => emer_ + "gerà" ; --# notpresent
    Fut Pl P1 => emer_ + "geremo" ; --# notpresent
    Fut Pl P2 => emer_ + "gerete" ; --# notpresent
    Fut Pl P3 => emer_ + "geranno" ; --# notpresent
    Cong Pres Sg P1 => emer_ + "ga" ;
    Cong Pres Sg P2 => emer_ + "ga" ;
    Cong Pres Sg P3 => emer_ + "ga" ;
    Cong Pres Pl P1 => emer_ + "giamo" ;
    Cong Pres Pl P2 => emer_ + "giate" ;
    Cong Pres Pl P3 => emer_ + "gano" ;
    Cong Imperf Sg P1 => emer_ + "gessi" ; --# notpresent
    Cong Imperf Sg P2 => emer_ + "gessi" ; --# notpresent
    Cong Imperf Sg P3 => emer_ + "gesse" ; --# notpresent
    Cong Imperf Pl P1 => emer_ + "gessimo" ; --# notpresent
    Cong Imperf Pl P2 => emer_ + "geste" ; --# notpresent
    Cong Imperf Pl P3 => emer_ + "gessero" ; --# notpresent
    Cond Sg P1 => emer_ + "gerei" ; --# notpresent
    Cond Sg P2 => emer_ + "geresti" ; --# notpresent
    Cond Sg P3 => emer_ + "gerebbe" ; --# notpresent
    Cond Pl P1 => emer_ + "geremmo" ; --# notpresent
    Cond Pl P2 => emer_ + "gereste" ; --# notpresent
    Cond Pl P3 => emer_ + "gerebbero" ; --# notpresent
    Imper SgP2 => emer_ + "gi" ;
    Imper PlP1 => emer_ + "giamo" ;
    Imper PlP2 => emer_ + "gete" ;
    Ger => emer_ + "gendo" ;
    Part PresP Masc Sg => emer_ + "gente" ;
    Part PresP Masc Pl => emer_ + "genti" ;
    Part PresP Fem Sg => emer_ + "gente" ;
    Part PresP Fem Pl => emer_ + "genti" ;
    Part PassP Masc Sg => emer_ + "so" ;
    Part PassP Masc Pl => emer_ + "si" ;
    Part PassP Fem Sg => emer_ + "sa" ;
    Part PassP Fem Pl => emer_ + "se"
    }
  } ;

oper espandere_49 : Str -> Verbo = \espandere ->
  let espan_ = Predef.tk 4 espandere in
 {s = table {
    Inf => espan_ + "dere" ;
    InfClit => espan_ + "der" ;
    Indi Pres Sg P1 => espan_ + "do" ;
    Indi Pres Sg P2 => espan_ + "di" ;
    Indi Pres Sg P3 => espan_ + "de" ;
    Indi Pres Pl P1 => espan_ + "diamo" ;
    Indi Pres Pl P2 => espan_ + "dete" ;
    Indi Pres Pl P3 => espan_ + "dono" ;
    Indi Imperf Sg P1 => espan_ + "devo" ; --# notpresent
    Indi Imperf Sg P2 => espan_ + "devi" ; --# notpresent
    Indi Imperf Sg P3 => espan_ + "deva" ; --# notpresent
    Indi Imperf Pl P1 => espan_ + "devamo" ; --# notpresent
    Indi Imperf Pl P2 => espan_ + "devate" ; --# notpresent
    Indi Imperf Pl P3 => espan_ + "devano" ; --# notpresent
    Pass Sg P1 => espan_ + "si" ; --# notpresent
    Pass Sg P2 => espan_ + "desti" ; --# notpresent
    Pass Sg P3 => espan_ + "se" ; --# notpresent
    Pass Pl P1 => espan_ + "demmo" ; --# notpresent
    Pass Pl P2 => espan_ + "deste" ; --# notpresent
    Pass Pl P3 => espan_ + "sero" ; --# notpresent
    Fut Sg P1 => espan_ + "derò" ; --# notpresent
    Fut Sg P2 => espan_ + "derai" ; --# notpresent
    Fut Sg P3 => espan_ + "derà" ; --# notpresent
    Fut Pl P1 => espan_ + "deremo" ; --# notpresent
    Fut Pl P2 => espan_ + "derete" ; --# notpresent
    Fut Pl P3 => espan_ + "deranno" ; --# notpresent
    Cong Pres Sg P1 => espan_ + "da" ;
    Cong Pres Sg P2 => espan_ + "da" ;
    Cong Pres Sg P3 => espan_ + "da" ;
    Cong Pres Pl P1 => espan_ + "diamo" ;
    Cong Pres Pl P2 => espan_ + "diate" ;
    Cong Pres Pl P3 => espan_ + "dano" ;
    Cong Imperf Sg P1 => espan_ + "dessi" ; --# notpresent
    Cong Imperf Sg P2 => espan_ + "dessi" ; --# notpresent
    Cong Imperf Sg P3 => espan_ + "desse" ; --# notpresent
    Cong Imperf Pl P1 => espan_ + "dessimo" ; --# notpresent
    Cong Imperf Pl P2 => espan_ + "deste" ; --# notpresent
    Cong Imperf Pl P3 => espan_ + "dessero" ; --# notpresent
    Cond Sg P1 => espan_ + "derei" ; --# notpresent
    Cond Sg P2 => espan_ + "deresti" ; --# notpresent
    Cond Sg P3 => espan_ + "derebbe" ; --# notpresent
    Cond Pl P1 => espan_ + "deremmo" ; --# notpresent
    Cond Pl P2 => espan_ + "dereste" ; --# notpresent
    Cond Pl P3 => espan_ + "derebbero" ; --# notpresent
    Imper SgP2 => espan_ + "di" ;
    Imper PlP1 => espan_ + "diamo" ;
    Imper PlP2 => espan_ + "dete" ;
    Ger => espan_ + "dendo" ;
    Part PresP Masc Sg => espan_ + "dente" ;
    Part PresP Masc Pl => espan_ + "denti" ;
    Part PresP Fem Sg => espan_ + "dente" ;
    Part PresP Fem Pl => espan_ + "denti" ;
    Part PassP Masc Sg => espan_ + "so" ;
    Part PassP Masc Pl => espan_ + "si" ;
    Part PassP Fem Sg => espan_ + "sa" ;
    Part PassP Fem Pl => espan_ + "se"
    }
  } ;

oper espellere_50 : Str -> Verbo = \espellere ->
  let esp_ = Predef.tk 6 espellere in
 {s = table {
    Inf => esp_ + "ellere" ;
    InfClit => esp_ + "eller" ;
    Indi Pres Sg P1 => esp_ + "ello" ;
    Indi Pres Sg P2 => esp_ + "elli" ;
    Indi Pres Sg P3 => esp_ + "elle" ;
    Indi Pres Pl P1 => esp_ + "elliamo" ;
    Indi Pres Pl P2 => esp_ + "ellete" ;
    Indi Pres Pl P3 => esp_ + "ellono" ;
    Indi Imperf Sg P1 => esp_ + "ellevo" ; --# notpresent
    Indi Imperf Sg P2 => esp_ + "ellevi" ; --# notpresent
    Indi Imperf Sg P3 => esp_ + "elleva" ; --# notpresent
    Indi Imperf Pl P1 => esp_ + "ellevamo" ; --# notpresent
    Indi Imperf Pl P2 => esp_ + "ellevate" ; --# notpresent
    Indi Imperf Pl P3 => esp_ + "ellevano" ; --# notpresent
    Pass Sg P1 => esp_ + "ulsi" ; --# notpresent
    Pass Sg P2 => esp_ + "ellesti" ; --# notpresent
    Pass Sg P3 => esp_ + "ulse" ; --# notpresent
    Pass Pl P1 => esp_ + "ellemmo" ; --# notpresent
    Pass Pl P2 => esp_ + "elleste" ; --# notpresent
    Pass Pl P3 => esp_ + "ulsero" ; --# notpresent
    Fut Sg P1 => esp_ + "ellerò" ; --# notpresent
    Fut Sg P2 => esp_ + "ellerai" ; --# notpresent
    Fut Sg P3 => esp_ + "ellerà" ; --# notpresent
    Fut Pl P1 => esp_ + "elleremo" ; --# notpresent
    Fut Pl P2 => esp_ + "ellerete" ; --# notpresent
    Fut Pl P3 => esp_ + "elleranno" ; --# notpresent
    Cong Pres Sg P1 => esp_ + "ella" ;
    Cong Pres Sg P2 => esp_ + "ella" ;
    Cong Pres Sg P3 => esp_ + "ella" ;
    Cong Pres Pl P1 => esp_ + "elliamo" ;
    Cong Pres Pl P2 => esp_ + "elliate" ;
    Cong Pres Pl P3 => esp_ + "ellano" ;
    Cong Imperf Sg P1 => esp_ + "ellessi" ; --# notpresent
    Cong Imperf Sg P2 => esp_ + "ellessi" ; --# notpresent
    Cong Imperf Sg P3 => esp_ + "ellesse" ; --# notpresent
    Cong Imperf Pl P1 => esp_ + "ellessimo" ; --# notpresent
    Cong Imperf Pl P2 => esp_ + "elleste" ; --# notpresent
    Cong Imperf Pl P3 => esp_ + "ellessero" ; --# notpresent
    Cond Sg P1 => esp_ + "ellerei" ; --# notpresent
    Cond Sg P2 => esp_ + "elleresti" ; --# notpresent
    Cond Sg P3 => esp_ + "ellerebbe" ; --# notpresent
    Cond Pl P1 => esp_ + "elleremmo" ; --# notpresent
    Cond Pl P2 => esp_ + "ellereste" ; --# notpresent
    Cond Pl P3 => esp_ + "ellerebbero" ; --# notpresent
    Imper SgP2 => esp_ + "elli" ;
    Imper PlP1 => esp_ + "elliamo" ;
    Imper PlP2 => esp_ + "ellete" ;
    Ger => esp_ + "ellendo" ;
    Part PresP Masc Sg => esp_ + "ellente" ;
    Part PresP Masc Pl => esp_ + "ellenti" ;
    Part PresP Fem Sg => esp_ + "ellente" ;
    Part PresP Fem Pl => esp_ + "ellenti" ;
    Part PassP Masc Sg => esp_ + "ulso" ;
    Part PassP Masc Pl => esp_ + "ulsi" ;
    Part PassP Fem Sg => esp_ + "ulsa" ;
    Part PassP Fem Pl => esp_ + "ulse"
    }
  } ;

oper esplodere_51 : Str -> Verbo = \esplodere ->
  let esplo_ = Predef.tk 4 esplodere in
 {s = table {
    Inf => esplo_ + "dere" ;
    InfClit => esplo_ + "der" ;
    Indi Pres Sg P1 => esplo_ + "do" ;
    Indi Pres Sg P2 => esplo_ + "di" ;
    Indi Pres Sg P3 => esplo_ + "de" ;
    Indi Pres Pl P1 => esplo_ + "diamo" ;
    Indi Pres Pl P2 => esplo_ + "dete" ;
    Indi Pres Pl P3 => esplo_ + "dono" ;
    Indi Imperf Sg P1 => esplo_ + "devo" ; --# notpresent
    Indi Imperf Sg P2 => esplo_ + "devi" ; --# notpresent
    Indi Imperf Sg P3 => esplo_ + "deva" ; --# notpresent
    Indi Imperf Pl P1 => esplo_ + "devamo" ; --# notpresent
    Indi Imperf Pl P2 => esplo_ + "devate" ; --# notpresent
    Indi Imperf Pl P3 => esplo_ + "devano" ; --# notpresent
    Pass Sg P1 => esplo_ + "si" ; --# notpresent
    Pass Sg P2 => esplo_ + "desti" ; --# notpresent
    Pass Sg P3 => esplo_ + "se" ; --# notpresent
    Pass Pl P1 => esplo_ + "demmo" ; --# notpresent
    Pass Pl P2 => esplo_ + "deste" ; --# notpresent
    Pass Pl P3 => esplo_ + "sero" ; --# notpresent
    Fut Sg P1 => esplo_ + "derò" ; --# notpresent
    Fut Sg P2 => esplo_ + "derai" ; --# notpresent
    Fut Sg P3 => esplo_ + "derà" ; --# notpresent
    Fut Pl P1 => esplo_ + "deremo" ; --# notpresent
    Fut Pl P2 => esplo_ + "derete" ; --# notpresent
    Fut Pl P3 => esplo_ + "deranno" ; --# notpresent
    Cong Pres Sg P1 => esplo_ + "da" ;
    Cong Pres Sg P2 => esplo_ + "da" ;
    Cong Pres Sg P3 => esplo_ + "da" ;
    Cong Pres Pl P1 => esplo_ + "diamo" ;
    Cong Pres Pl P2 => esplo_ + "diate" ;
    Cong Pres Pl P3 => esplo_ + "dano" ;
    Cong Imperf Sg P1 => esplo_ + "dessi" ; --# notpresent
    Cong Imperf Sg P2 => esplo_ + "dessi" ; --# notpresent
    Cong Imperf Sg P3 => esplo_ + "desse" ; --# notpresent
    Cong Imperf Pl P1 => esplo_ + "dessimo" ; --# notpresent
    Cong Imperf Pl P2 => esplo_ + "deste" ; --# notpresent
    Cong Imperf Pl P3 => esplo_ + "dessero" ; --# notpresent
    Cond Sg P1 => esplo_ + "derei" ; --# notpresent
    Cond Sg P2 => esplo_ + "deresti" ; --# notpresent
    Cond Sg P3 => esplo_ + "derebbe" ; --# notpresent
    Cond Pl P1 => esplo_ + "deremmo" ; --# notpresent
    Cond Pl P2 => esplo_ + "dereste" ; --# notpresent
    Cond Pl P3 => esplo_ + "derebbero" ; --# notpresent
    Imper SgP2 => esplo_ + "di" ;
    Imper PlP1 => esplo_ + "diamo" ;
    Imper PlP2 => esplo_ + "dete" ;
    Ger => esplo_ + "dendo" ;
    Part PresP Masc Sg => esplo_ + "dente" ;
    Part PresP Masc Pl => esplo_ + "denti" ;
    Part PresP Fem Sg => esplo_ + "dente" ;
    Part PresP Fem Pl => esplo_ + "denti" ;
    Part PassP Masc Sg => esplo_ + "so" ;
    Part PassP Masc Pl => esplo_ + "si" ;
    Part PassP Fem Sg => esplo_ + "sa" ;
    Part PassP Fem Pl => esplo_ + "se"
    }
  } ;

oper fare_52 : Str -> Verbo = \fare ->
  let f_ = Predef.tk 3 fare in
 {s = table {
    Inf => f_ + "are" ;
    InfClit => f_ + "ar" ;
    Indi Pres Sg P1 => f_ + "accio" ;
    Indi Pres Sg P2 => f_ + "ai" ;
    Indi Pres Sg P3 => f_ + "a" ;
    Indi Pres Pl P1 => f_ + "acciamo" ;
    Indi Pres Pl P2 => f_ + "ate" ;
    Indi Pres Pl P3 => f_ + "anno" ;
    Indi Imperf Sg P1 => f_ + "acevo" ; --# notpresent
    Indi Imperf Sg P2 => f_ + "acevi" ; --# notpresent
    Indi Imperf Sg P3 => f_ + "aceva" ; --# notpresent
    Indi Imperf Pl P1 => f_ + "acevamo" ; --# notpresent
    Indi Imperf Pl P2 => f_ + "acevate" ; --# notpresent
    Indi Imperf Pl P3 => f_ + "acevano" ; --# notpresent
    Pass Sg P1 => f_ + "eci" ; --# notpresent
    Pass Sg P2 => f_ + "acesti" ; --# notpresent
    Pass Sg P3 => f_ + "ece" ; --# notpresent
    Pass Pl P1 => f_ + "acemmo" ; --# notpresent
    Pass Pl P2 => f_ + "aceste" ; --# notpresent
    Pass Pl P3 => f_ + "ecero" ; --# notpresent
    Fut Sg P1 => f_ + "arò" ; --# notpresent
    Fut Sg P2 => f_ + "arai" ; --# notpresent
    Fut Sg P3 => f_ + "arà" ; --# notpresent
    Fut Pl P1 => f_ + "aremo" ; --# notpresent
    Fut Pl P2 => f_ + "arete" ; --# notpresent
    Fut Pl P3 => f_ + "aranno" ; --# notpresent
    Cong Pres Sg P1 => f_ + "accia" ;
    Cong Pres Sg P2 => f_ + "accia" ;
    Cong Pres Sg P3 => f_ + "accia" ;
    Cong Pres Pl P1 => f_ + "acciamo" ;
    Cong Pres Pl P2 => f_ + "acciate" ;
    Cong Pres Pl P3 => f_ + "acciano" ;
    Cong Imperf Sg P1 => f_ + "acessi" ; --# notpresent
    Cong Imperf Sg P2 => f_ + "acessi" ; --# notpresent
    Cong Imperf Sg P3 => f_ + "acesse" ; --# notpresent
    Cong Imperf Pl P1 => f_ + "acessimo" ; --# notpresent
    Cong Imperf Pl P2 => f_ + "aceste" ; --# notpresent
    Cong Imperf Pl P3 => f_ + "acessero" ; --# notpresent
    Cond Sg P1 => f_ + "arei" ; --# notpresent
    Cond Sg P2 => f_ + "aresti" ; --# notpresent
    Cond Sg P3 => f_ + "arebbe" ; --# notpresent
    Cond Pl P1 => f_ + "aremmo" ; --# notpresent
    Cond Pl P2 => f_ + "areste" ; --# notpresent
    Cond Pl P3 => f_ + "arebbero" ; --# notpresent
    Imper SgP2 => f_ + "ai" ;
    Imper PlP1 => f_ + "acciamo" ;
    Imper PlP2 => f_ + "ate" ;
    Ger => f_ + "acendo" ;
    Part PresP Masc Sg => f_ + "acente" ;
    Part PresP Masc Pl => f_ + "acenti" ;
    Part PresP Fem Sg => f_ + "acente" ;
    Part PresP Fem Pl => f_ + "acenti" ;
    Part PassP Masc Sg => f_ + "atto" ;
    Part PassP Masc Pl => f_ + "atti" ;
    Part PassP Fem Sg => f_ + "atta" ;
    Part PassP Fem Pl => f_ + "atte"
    }
  } ;

-- A variant of fare, found in _at least_ the verb "soffisfare"
-- Source: http://www.wordreference.com/conj/ItVerbs.aspx?v=soddisfare
-- Attested by forms "soddisfi" and "soddisfini" in GDPR
oper fare_52' : Str -> Verbo = \fare ->
  let f_ = Predef.tk 3 fare in
 {s = table {
    Inf => f_ + "are" ;
    InfClit => f_ + "ar" ;
    Indi Pres Sg P1 => f_ + "ò" ;
    Indi Pres Sg P2 => f_ + "i" ;
    Indi Pres Sg P3 => f_ + "a" ;
    Indi Pres Pl P1 => f_ + "iamo" ;
    Indi Pres Pl P2 => f_ + "ate" ;
    Indi Pres Pl P3 => f_ + "ano" ;
    Indi Imperf Sg P1 => f_ + "acevo" ; --# notpresent
    Indi Imperf Sg P2 => f_ + "acevi" ; --# notpresent
    Indi Imperf Sg P3 => f_ + "aceva" ; --# notpresent
    Indi Imperf Pl P1 => f_ + "acevamo" ; --# notpresent
    Indi Imperf Pl P2 => f_ + "acevate" ; --# notpresent
    Indi Imperf Pl P3 => f_ + "acevano" ; --# notpresent
    Pass Sg P1 => f_ + "eci" ; --# notpresent
    Pass Sg P2 => f_ + "acesti" ; --# notpresent
    Pass Sg P3 => f_ + "ece" ; --# notpresent
    Pass Pl P1 => f_ + "acemmo" ; --# notpresent
    Pass Pl P2 => f_ + "aceste" ; --# notpresent
    Pass Pl P3 => f_ + "ecero" ; --# notpresent
    Fut Sg P1 => f_ + "erò" ; --# notpresent
    Fut Sg P2 => f_ + "erai" ; --# notpresent
    Fut Sg P3 => f_ + "erà" ; --# notpresent
    Fut Pl P1 => f_ + "eremo" ; --# notpresent
    Fut Pl P2 => f_ + "erete" ; --# notpresent
    Fut Pl P3 => f_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => f_ + "i" ;
    Cong Pres Sg P2 => f_ + "i" ;
    Cong Pres Sg P3 => f_ + "i" ;
    Cong Pres Pl P1 => f_ + "iamo" ;
    Cong Pres Pl P2 => f_ + "iate" ;
    Cong Pres Pl P3 => f_ + "ino" ;
    Cong Imperf Sg P1 => f_ + "acessi" ; --# notpresent
    Cong Imperf Sg P2 => f_ + "acessi" ; --# notpresent
    Cong Imperf Sg P3 => f_ + "acesse" ; --# notpresent
    Cong Imperf Pl P1 => f_ + "acessimo" ; --# notpresent
    Cong Imperf Pl P2 => f_ + "aceste" ; --# notpresent
    Cong Imperf Pl P3 => f_ + "acessero" ; --# notpresent
    Cond Sg P1 => f_ + "erei" ; --# notpresent
    Cond Sg P2 => f_ + "eresti" ; --# notpresent
    Cond Sg P3 => f_ + "erebbe" ; --# notpresent
    Cond Pl P1 => f_ + "eremmo" ; --# notpresent
    Cond Pl P2 => f_ + "ereste" ; --# notpresent
    Cond Pl P3 => f_ + "erebbero" ; --# notpresent
    Imper SgP2 => f_ + "a'" ;
    Imper PlP1 => f_ + "acciamo" ;
    Imper PlP2 => f_ + "ate" ;
    Ger => f_ + "acendo" ;
    Part PresP Masc Sg => f_ + "acente" ;
    Part PresP Masc Pl => f_ + "acenti" ;
    Part PresP Fem Sg => f_ + "acente" ;
    Part PresP Fem Pl => f_ + "acenti" ;
    Part PassP Masc Sg => f_ + "atto" ;
    Part PassP Masc Pl => f_ + "atti" ;
    Part PassP Fem Sg => f_ + "atta" ;
    Part PassP Fem Pl => f_ + "atte"
    }
  } ;

oper flettere_53 : Str -> Verbo = \flettere ->
  let fle_ = Predef.tk 5 flettere in
 {s = table {
    Inf => fle_ + "ttere" ;
    InfClit => fle_ + "tter" ;
    Indi Pres Sg P1 => fle_ + "tto" ;
    Indi Pres Sg P2 => fle_ + "tti" ;
    Indi Pres Sg P3 => fle_ + "tte" ;
    Indi Pres Pl P1 => fle_ + "ttiamo" ;
    Indi Pres Pl P2 => fle_ + "ttete" ;
    Indi Pres Pl P3 => fle_ + "ttono" ;
    Indi Imperf Sg P1 => fle_ + "ttevo" ; --# notpresent
    Indi Imperf Sg P2 => fle_ + "ttevi" ; --# notpresent
    Indi Imperf Sg P3 => fle_ + "tteva" ; --# notpresent
    Indi Imperf Pl P1 => fle_ + "ttevamo" ; --# notpresent
    Indi Imperf Pl P2 => fle_ + "ttevate" ; --# notpresent
    Indi Imperf Pl P3 => fle_ + "ttevano" ; --# notpresent
    Pass Sg P1 => fle_ + "ssi" ; --# notpresent
    Pass Sg P2 => fle_ + "ttesti" ; --# notpresent
    Pass Sg P3 => fle_ + "sse" ; --# notpresent
    Pass Pl P1 => fle_ + "ttemmo" ; --# notpresent
    Pass Pl P2 => fle_ + "tteste" ; --# notpresent
    Pass Pl P3 => fle_ + "ssero" ; --# notpresent
    Fut Sg P1 => fle_ + "tterò" ; --# notpresent
    Fut Sg P2 => fle_ + "tterai" ; --# notpresent
    Fut Sg P3 => fle_ + "tterà" ; --# notpresent
    Fut Pl P1 => fle_ + "tteremo" ; --# notpresent
    Fut Pl P2 => fle_ + "tterete" ; --# notpresent
    Fut Pl P3 => fle_ + "tteranno" ; --# notpresent
    Cong Pres Sg P1 => fle_ + "tta" ;
    Cong Pres Sg P2 => fle_ + "tta" ;
    Cong Pres Sg P3 => fle_ + "tta" ;
    Cong Pres Pl P1 => fle_ + "ttiamo" ;
    Cong Pres Pl P2 => fle_ + "ttiate" ;
    Cong Pres Pl P3 => fle_ + "ttano" ;
    Cong Imperf Sg P1 => fle_ + "ttessi" ; --# notpresent
    Cong Imperf Sg P2 => fle_ + "ttessi" ; --# notpresent
    Cong Imperf Sg P3 => fle_ + "ttesse" ; --# notpresent
    Cong Imperf Pl P1 => fle_ + "ttessimo" ; --# notpresent
    Cong Imperf Pl P2 => fle_ + "tteste" ; --# notpresent
    Cong Imperf Pl P3 => fle_ + "ttessero" ; --# notpresent
    Cond Sg P1 => fle_ + "tterei" ; --# notpresent
    Cond Sg P2 => fle_ + "tteresti" ; --# notpresent
    Cond Sg P3 => fle_ + "tterebbe" ; --# notpresent
    Cond Pl P1 => fle_ + "tteremmo" ; --# notpresent
    Cond Pl P2 => fle_ + "ttereste" ; --# notpresent
    Cond Pl P3 => fle_ + "tterebbero" ; --# notpresent
    Imper SgP2 => fle_ + "tti" ;
    Imper PlP1 => fle_ + "ttiamo" ;
    Imper PlP2 => fle_ + "ttete" ;
    Ger => fle_ + "ttendo" ;
    Part PresP Masc Sg => fle_ + "ttente" ;
    Part PresP Masc Pl => fle_ + "ttenti" ;
    Part PresP Fem Sg => fle_ + "ttente" ;
    Part PresP Fem Pl => fle_ + "ttenti" ;
    Part PassP Masc Sg => fle_ + "sso" ;
    Part PassP Masc Pl => fle_ + "ssi" ;
    Part PassP Fem Sg => fle_ + "ssa" ;
    Part PassP Fem Pl => fle_ + "sse"
    }
  } ;

oper fondere_54 : Str -> Verbo = \fondere ->
  let f_ = Predef.tk 6 fondere in
 {s = table {
    Inf => f_ + "ondere" ;
    InfClit => f_ + "onder" ;
    Indi Pres Sg P1 => f_ + "ondo" ;
    Indi Pres Sg P2 => f_ + "ondi" ;
    Indi Pres Sg P3 => f_ + "onde" ;
    Indi Pres Pl P1 => f_ + "ondiamo" ;
    Indi Pres Pl P2 => f_ + "ondete" ;
    Indi Pres Pl P3 => f_ + "ondono" ;
    Indi Imperf Sg P1 => f_ + "ondevo" ; --# notpresent
    Indi Imperf Sg P2 => f_ + "ondevi" ; --# notpresent
    Indi Imperf Sg P3 => f_ + "ondeva" ; --# notpresent
    Indi Imperf Pl P1 => f_ + "ondevamo" ; --# notpresent
    Indi Imperf Pl P2 => f_ + "ondevate" ; --# notpresent
    Indi Imperf Pl P3 => f_ + "ondevano" ; --# notpresent
    Pass Sg P1 => f_ + "usi" ; --# notpresent
    Pass Sg P2 => f_ + "ondesti" ; --# notpresent
    Pass Sg P3 => f_ + "use" ; --# notpresent
    Pass Pl P1 => f_ + "ondemmo" ; --# notpresent
    Pass Pl P2 => f_ + "ondeste" ; --# notpresent
    Pass Pl P3 => f_ + "usero" ; --# notpresent
    Fut Sg P1 => f_ + "onderò" ; --# notpresent
    Fut Sg P2 => f_ + "onderai" ; --# notpresent
    Fut Sg P3 => f_ + "onderà" ; --# notpresent
    Fut Pl P1 => f_ + "onderemo" ; --# notpresent
    Fut Pl P2 => f_ + "onderete" ; --# notpresent
    Fut Pl P3 => f_ + "onderanno" ; --# notpresent
    Cong Pres Sg P1 => f_ + "onda" ;
    Cong Pres Sg P2 => f_ + "onda" ;
    Cong Pres Sg P3 => f_ + "onda" ;
    Cong Pres Pl P1 => f_ + "ondiamo" ;
    Cong Pres Pl P2 => f_ + "ondiate" ;
    Cong Pres Pl P3 => f_ + "ondano" ;
    Cong Imperf Sg P1 => f_ + "ondessi" ; --# notpresent
    Cong Imperf Sg P2 => f_ + "ondessi" ; --# notpresent
    Cong Imperf Sg P3 => f_ + "ondesse" ; --# notpresent
    Cong Imperf Pl P1 => f_ + "ondessimo" ; --# notpresent
    Cong Imperf Pl P2 => f_ + "ondeste" ; --# notpresent
    Cong Imperf Pl P3 => f_ + "ondessero" ; --# notpresent
    Cond Sg P1 => f_ + "onderei" ; --# notpresent
    Cond Sg P2 => f_ + "onderesti" ; --# notpresent
    Cond Sg P3 => f_ + "onderebbe" ; --# notpresent
    Cond Pl P1 => f_ + "onderemmo" ; --# notpresent
    Cond Pl P2 => f_ + "ondereste" ; --# notpresent
    Cond Pl P3 => f_ + "onderebbero" ; --# notpresent
    Imper SgP2 => f_ + "ondi" ;
    Imper PlP1 => f_ + "ondiamo" ;
    Imper PlP2 => f_ + "ondete" ;
    Ger => f_ + "ondendo" ;
    Part PresP Masc Sg => f_ + "ondente" ;
    Part PresP Masc Pl => f_ + "ondenti" ;
    Part PresP Fem Sg => f_ + "ondente" ;
    Part PresP Fem Pl => f_ + "ondenti" ;
    Part PassP Masc Sg => f_ + "uso" ;
    Part PassP Masc Pl => f_ + "usi" ;
    Part PassP Fem Sg => f_ + "usa" ;
    Part PassP Fem Pl => f_ + "use"
    }
  } ;

oper giungere_55 : Str -> Verbo = \giungere ->
  let giun_ = Predef.tk 4 giungere in
 {s = table {
    Inf => giun_ + "gere" ;
    InfClit => giun_ + "ger" ;
    Indi Pres Sg P1 => giun_ + "go" ;
    Indi Pres Sg P2 => giun_ + "gi" ;
    Indi Pres Sg P3 => giun_ + "ge" ;
    Indi Pres Pl P1 => giun_ + "giamo" ;
    Indi Pres Pl P2 => giun_ + "gete" ;
    Indi Pres Pl P3 => giun_ + "gono" ;
    Indi Imperf Sg P1 => giun_ + "gevo" ; --# notpresent
    Indi Imperf Sg P2 => giun_ + "gevi" ; --# notpresent
    Indi Imperf Sg P3 => giun_ + "geva" ; --# notpresent
    Indi Imperf Pl P1 => giun_ + "gevamo" ; --# notpresent
    Indi Imperf Pl P2 => giun_ + "gevate" ; --# notpresent
    Indi Imperf Pl P3 => giun_ + "gevano" ; --# notpresent
    Pass Sg P1 => giun_ + "si" ; --# notpresent
    Pass Sg P2 => giun_ + "gesti" ; --# notpresent
    Pass Sg P3 => giun_ + "se" ; --# notpresent
    Pass Pl P1 => giun_ + "gemmo" ; --# notpresent
    Pass Pl P2 => giun_ + "geste" ; --# notpresent
    Pass Pl P3 => giun_ + "sero" ; --# notpresent
    Fut Sg P1 => giun_ + "gerò" ; --# notpresent
    Fut Sg P2 => giun_ + "gerai" ; --# notpresent
    Fut Sg P3 => giun_ + "gerà" ; --# notpresent
    Fut Pl P1 => giun_ + "geremo" ; --# notpresent
    Fut Pl P2 => giun_ + "gerete" ; --# notpresent
    Fut Pl P3 => giun_ + "geranno" ; --# notpresent
    Cong Pres Sg P1 => giun_ + "ga" ;
    Cong Pres Sg P2 => giun_ + "ga" ;
    Cong Pres Sg P3 => giun_ + "ga" ;
    Cong Pres Pl P1 => giun_ + "giamo" ;
    Cong Pres Pl P2 => giun_ + "giate" ;
    Cong Pres Pl P3 => giun_ + "gano" ;
    Cong Imperf Sg P1 => giun_ + "gessi" ; --# notpresent
    Cong Imperf Sg P2 => giun_ + "gessi" ; --# notpresent
    Cong Imperf Sg P3 => giun_ + "gesse" ; --# notpresent
    Cong Imperf Pl P1 => giun_ + "gessimo" ; --# notpresent
    Cong Imperf Pl P2 => giun_ + "geste" ; --# notpresent
    Cong Imperf Pl P3 => giun_ + "gessero" ; --# notpresent
    Cond Sg P1 => giun_ + "gerei" ; --# notpresent
    Cond Sg P2 => giun_ + "geresti" ; --# notpresent
    Cond Sg P3 => giun_ + "gerebbe" ; --# notpresent
    Cond Pl P1 => giun_ + "geremmo" ; --# notpresent
    Cond Pl P2 => giun_ + "gereste" ; --# notpresent
    Cond Pl P3 => giun_ + "gerebbero" ; --# notpresent
    Imper SgP2 => giun_ + "gi" ;
    Imper PlP1 => giun_ + "giamo" ;
    Imper PlP2 => giun_ + "gete" ;
    Ger => giun_ + "gendo" ;
    Part PresP Masc Sg => giun_ + "gente" ;
    Part PresP Masc Pl => giun_ + "genti" ;
    Part PresP Fem Sg => giun_ + "gente" ;
    Part PresP Fem Pl => giun_ + "genti" ;
    Part PassP Masc Sg => giun_ + "to" ;
    Part PassP Masc Pl => giun_ + "ti" ;
    Part PassP Fem Sg => giun_ + "ta" ;
    Part PassP Fem Pl => giun_ + "te"
    }
  } ;

oper leggere_56 : Str -> Verbo = \leggere ->
  let le_ = Predef.tk 5 leggere in
 {s = table {
    Inf => le_ + "ggere" ;
    InfClit => le_ + "gger" ;
    Indi Pres Sg P1 => le_ + "ggo" ;
    Indi Pres Sg P2 => le_ + "ggi" ;
    Indi Pres Sg P3 => le_ + "gge" ;
    Indi Pres Pl P1 => le_ + "ggiamo" ;
    Indi Pres Pl P2 => le_ + "ggete" ;
    Indi Pres Pl P3 => le_ + "ggono" ;
    Indi Imperf Sg P1 => le_ + "ggevo" ; --# notpresent
    Indi Imperf Sg P2 => le_ + "ggevi" ; --# notpresent
    Indi Imperf Sg P3 => le_ + "ggeva" ; --# notpresent
    Indi Imperf Pl P1 => le_ + "ggevamo" ; --# notpresent
    Indi Imperf Pl P2 => le_ + "ggevate" ; --# notpresent
    Indi Imperf Pl P3 => le_ + "ggevano" ; --# notpresent
    Pass Sg P1 => le_ + "ssi" ; --# notpresent
    Pass Sg P2 => le_ + "ggesti" ; --# notpresent
    Pass Sg P3 => le_ + "sse" ; --# notpresent
    Pass Pl P1 => le_ + "ggemmo" ; --# notpresent
    Pass Pl P2 => le_ + "ggeste" ; --# notpresent
    Pass Pl P3 => le_ + "ssero" ; --# notpresent
    Fut Sg P1 => le_ + "ggerò" ; --# notpresent
    Fut Sg P2 => le_ + "ggerai" ; --# notpresent
    Fut Sg P3 => le_ + "ggerà" ; --# notpresent
    Fut Pl P1 => le_ + "ggeremo" ; --# notpresent
    Fut Pl P2 => le_ + "ggerete" ; --# notpresent
    Fut Pl P3 => le_ + "ggeranno" ; --# notpresent
    Cong Pres Sg P1 => le_ + "gga" ;
    Cong Pres Sg P2 => le_ + "gga" ;
    Cong Pres Sg P3 => le_ + "gga" ;
    Cong Pres Pl P1 => le_ + "ggiamo" ;
    Cong Pres Pl P2 => le_ + "ggiate" ;
    Cong Pres Pl P3 => le_ + "ggano" ;
    Cong Imperf Sg P1 => le_ + "ggessi" ; --# notpresent
    Cong Imperf Sg P2 => le_ + "ggessi" ; --# notpresent
    Cong Imperf Sg P3 => le_ + "ggesse" ; --# notpresent
    Cong Imperf Pl P1 => le_ + "ggessimo" ; --# notpresent
    Cong Imperf Pl P2 => le_ + "ggeste" ; --# notpresent
    Cong Imperf Pl P3 => le_ + "ggessero" ; --# notpresent
    Cond Sg P1 => le_ + "ggerei" ; --# notpresent
    Cond Sg P2 => le_ + "ggeresti" ; --# notpresent
    Cond Sg P3 => le_ + "ggerebbe" ; --# notpresent
    Cond Pl P1 => le_ + "ggeremmo" ; --# notpresent
    Cond Pl P2 => le_ + "ggereste" ; --# notpresent
    Cond Pl P3 => le_ + "ggerebbero" ; --# notpresent
    Imper SgP2 => le_ + "ggi" ;
    Imper PlP1 => le_ + "ggiamo" ;
    Imper PlP2 => le_ + "ggete" ;
    Ger => le_ + "ggendo" ;
    Part PresP Masc Sg => le_ + "ggente" ;
    Part PresP Masc Pl => le_ + "ggenti" ;
    Part PresP Fem Sg => le_ + "ggente" ;
    Part PresP Fem Pl => le_ + "ggenti" ;
    Part PassP Masc Sg => le_ + "tto" ;
    Part PassP Masc Pl => le_ + "tti" ;
    Part PassP Fem Sg => le_ + "tta" ;
    Part PassP Fem Pl => le_ + "tte"
    }
  } ;

oper mettere_57 : Str -> Verbo = \mettere ->
  let m_ = Predef.tk 6 mettere in
 {s = table {
    Inf => m_ + "ettere" ;
    InfClit => m_ + "etter" ;
    Indi Pres Sg P1 => m_ + "etto" ;
    Indi Pres Sg P2 => m_ + "etti" ;
    Indi Pres Sg P3 => m_ + "ette" ;
    Indi Pres Pl P1 => m_ + "ettiamo" ;
    Indi Pres Pl P2 => m_ + "ettete" ;
    Indi Pres Pl P3 => m_ + "ettono" ;
    Indi Imperf Sg P1 => m_ + "ettevo" ; --# notpresent
    Indi Imperf Sg P2 => m_ + "ettevi" ; --# notpresent
    Indi Imperf Sg P3 => m_ + "etteva" ; --# notpresent
    Indi Imperf Pl P1 => m_ + "ettevamo" ; --# notpresent
    Indi Imperf Pl P2 => m_ + "ettevate" ; --# notpresent
    Indi Imperf Pl P3 => m_ + "ettevano" ; --# notpresent
    Pass Sg P1 => m_ + "isi" ; --# notpresent
    Pass Sg P2 => m_ + "ettesti" ; --# notpresent
    Pass Sg P3 => m_ + "ise" ; --# notpresent
    Pass Pl P1 => m_ + "ettemmo" ; --# notpresent
    Pass Pl P2 => m_ + "etteste" ; --# notpresent
    Pass Pl P3 => m_ + "isero" ; --# notpresent
    Fut Sg P1 => m_ + "etterò" ; --# notpresent
    Fut Sg P2 => m_ + "etterai" ; --# notpresent
    Fut Sg P3 => m_ + "etterà" ; --# notpresent
    Fut Pl P1 => m_ + "etteremo" ; --# notpresent
    Fut Pl P2 => m_ + "etterete" ; --# notpresent
    Fut Pl P3 => m_ + "etteranno" ; --# notpresent
    Cong Pres Sg P1 => m_ + "etta" ;
    Cong Pres Sg P2 => m_ + "etta" ;
    Cong Pres Sg P3 => m_ + "etta" ;
    Cong Pres Pl P1 => m_ + "ettiamo" ;
    Cong Pres Pl P2 => m_ + "ettiate" ;
    Cong Pres Pl P3 => m_ + "ettano" ;
    Cong Imperf Sg P1 => m_ + "ettessi" ; --# notpresent
    Cong Imperf Sg P2 => m_ + "ettessi" ; --# notpresent
    Cong Imperf Sg P3 => m_ + "ettesse" ; --# notpresent
    Cong Imperf Pl P1 => m_ + "ettessimo" ; --# notpresent
    Cong Imperf Pl P2 => m_ + "etteste" ; --# notpresent
    Cong Imperf Pl P3 => m_ + "ettessero" ; --# notpresent
    Cond Sg P1 => m_ + "etterei" ; --# notpresent
    Cond Sg P2 => m_ + "etteresti" ; --# notpresent
    Cond Sg P3 => m_ + "etterebbe" ; --# notpresent
    Cond Pl P1 => m_ + "etteremmo" ; --# notpresent
    Cond Pl P2 => m_ + "ettereste" ; --# notpresent
    Cond Pl P3 => m_ + "etterebbero" ; --# notpresent
    Imper SgP2 => m_ + "etti" ;
    Imper PlP1 => m_ + "ettiamo" ;
    Imper PlP2 => m_ + "ettete" ;
    Ger => m_ + "ettendo" ;
    Part PresP Masc Sg => m_ + "ettente" ;
    Part PresP Masc Pl => m_ + "ettenti" ;
    Part PresP Fem Sg => m_ + "ettente" ;
    Part PresP Fem Pl => m_ + "ettenti" ;
    Part PassP Masc Sg => m_ + "esso" ;
    Part PassP Masc Pl => m_ + "essi" ;
    Part PassP Fem Sg => m_ + "essa" ;
    Part PassP Fem Pl => m_ + "esse"
    }
  } ;

oper muovere_58 : Str -> Verbo = \muovere ->
  let m_ = Predef.tk 6 muovere in
 {s = table {
    Inf => m_ + "uovere" ;
    InfClit => m_ + "uover" ;
    Indi Pres Sg P1 => m_ + "uovo" ;
    Indi Pres Sg P2 => m_ + "uovi" ;
    Indi Pres Sg P3 => m_ + "uove" ;
    Indi Pres Pl P1 => m_ + "uoviamo" ;
    Indi Pres Pl P2 => m_ + "uovete" ;
    Indi Pres Pl P3 => m_ + "uovono" ;
    Indi Imperf Sg P1 => m_ + "uovevo" ; --# notpresent
    Indi Imperf Sg P2 => m_ + "uovevi" ; --# notpresent
    Indi Imperf Sg P3 => m_ + "uoveva" ; --# notpresent
    Indi Imperf Pl P1 => m_ + "uovevamo" ; --# notpresent
    Indi Imperf Pl P2 => m_ + "uovevate" ; --# notpresent
    Indi Imperf Pl P3 => m_ + "uovevano" ; --# notpresent
    Pass Sg P1 => m_ + "ossi" ; --# notpresent
    Pass Sg P2 => m_ + "uovesti" ; --# notpresent
    Pass Sg P3 => m_ + "osse" ; --# notpresent
    Pass Pl P1 => m_ + "uovemmo" ; --# notpresent
    Pass Pl P2 => m_ + "uoveste" ; --# notpresent
    Pass Pl P3 => m_ + "ossero" ; --# notpresent
    Fut Sg P1 => m_ + "uoverò" ; --# notpresent
    Fut Sg P2 => m_ + "uoverai" ; --# notpresent
    Fut Sg P3 => m_ + "uoverà" ; --# notpresent
    Fut Pl P1 => m_ + "uoveremo" ; --# notpresent
    Fut Pl P2 => m_ + "uoverete" ; --# notpresent
    Fut Pl P3 => m_ + "uoveranno" ; --# notpresent
    Cong Pres Sg P1 => m_ + "uova" ;
    Cong Pres Sg P2 => m_ + "uova" ;
    Cong Pres Sg P3 => m_ + "uova" ;
    Cong Pres Pl P1 => m_ + "uoviamo" ;
    Cong Pres Pl P2 => m_ + "uoviate" ;
    Cong Pres Pl P3 => m_ + "uovano" ;
    Cong Imperf Sg P1 => m_ + "uovessi" ; --# notpresent
    Cong Imperf Sg P2 => m_ + "uovessi" ; --# notpresent
    Cong Imperf Sg P3 => m_ + "uovesse" ; --# notpresent
    Cong Imperf Pl P1 => m_ + "uovessimo" ; --# notpresent
    Cong Imperf Pl P2 => m_ + "uoveste" ; --# notpresent
    Cong Imperf Pl P3 => m_ + "uovessero" ; --# notpresent
    Cond Sg P1 => m_ + "uoverei" ; --# notpresent
    Cond Sg P2 => m_ + "uoveresti" ; --# notpresent
    Cond Sg P3 => m_ + "uoverebbe" ; --# notpresent
    Cond Pl P1 => m_ + "uoveremmo" ; --# notpresent
    Cond Pl P2 => m_ + "uovereste" ; --# notpresent
    Cond Pl P3 => m_ + "uoverebbero" ; --# notpresent
    Imper SgP2 => m_ + "uovi" ;
    Imper PlP1 => m_ + "uoviamo" ;
    Imper PlP2 => m_ + "uovete" ;
    Ger => m_ + "uovendo" ;
    Part PresP Masc Sg => m_ + "uovente" ;
    Part PresP Masc Pl => m_ + "uoventi" ;
    Part PresP Fem Sg => m_ + "uovente" ;
    Part PresP Fem Pl => m_ + "uoventi" ;
    Part PassP Masc Sg => m_ + "osso" ;
    Part PassP Masc Pl => m_ + "ossi" ;
    Part PassP Fem Sg => m_ + "ossa" ;
    Part PassP Fem Pl => m_ + "osse"
    }
  } ;

oper nascere_59 : Str -> Verbo = \nascere ->
  let na_ = Predef.tk 5 nascere in
 {s = table {
    Inf => na_ + "scere" ;
    InfClit => na_ + "scer" ;
    Indi Pres Sg P1 => na_ + "sco" ;
    Indi Pres Sg P2 => na_ + "sci" ;
    Indi Pres Sg P3 => na_ + "sce" ;
    Indi Pres Pl P1 => na_ + "sciamo" ;
    Indi Pres Pl P2 => na_ + "scete" ;
    Indi Pres Pl P3 => na_ + "scono" ;
    Indi Imperf Sg P1 => na_ + "scevo" ; --# notpresent
    Indi Imperf Sg P2 => na_ + "scevi" ; --# notpresent
    Indi Imperf Sg P3 => na_ + "sceva" ; --# notpresent
    Indi Imperf Pl P1 => na_ + "scevamo" ; --# notpresent
    Indi Imperf Pl P2 => na_ + "scevate" ; --# notpresent
    Indi Imperf Pl P3 => na_ + "scevano" ; --# notpresent
    Pass Sg P1 => na_ + "cqui" ; --# notpresent
    Pass Sg P2 => na_ + "scesti" ; --# notpresent
    Pass Sg P3 => na_ + "cque" ; --# notpresent
    Pass Pl P1 => na_ + "scemmo" ; --# notpresent
    Pass Pl P2 => na_ + "sceste" ; --# notpresent
    Pass Pl P3 => na_ + "cquero" ; --# notpresent
    Fut Sg P1 => na_ + "scerò" ; --# notpresent
    Fut Sg P2 => na_ + "scerai" ; --# notpresent
    Fut Sg P3 => na_ + "scerà" ; --# notpresent
    Fut Pl P1 => na_ + "sceremo" ; --# notpresent
    Fut Pl P2 => na_ + "scerete" ; --# notpresent
    Fut Pl P3 => na_ + "sceranno" ; --# notpresent
    Cong Pres Sg P1 => na_ + "sca" ;
    Cong Pres Sg P2 => na_ + "sca" ;
    Cong Pres Sg P3 => na_ + "sca" ;
    Cong Pres Pl P1 => na_ + "sciamo" ;
    Cong Pres Pl P2 => na_ + "sciate" ;
    Cong Pres Pl P3 => na_ + "scano" ;
    Cong Imperf Sg P1 => na_ + "scessi" ; --# notpresent
    Cong Imperf Sg P2 => na_ + "scessi" ; --# notpresent
    Cong Imperf Sg P3 => na_ + "scesse" ; --# notpresent
    Cong Imperf Pl P1 => na_ + "scessimo" ; --# notpresent
    Cong Imperf Pl P2 => na_ + "sceste" ; --# notpresent
    Cong Imperf Pl P3 => na_ + "scessero" ; --# notpresent
    Cond Sg P1 => na_ + "scerei" ; --# notpresent
    Cond Sg P2 => na_ + "sceresti" ; --# notpresent
    Cond Sg P3 => na_ + "scerebbe" ; --# notpresent
    Cond Pl P1 => na_ + "sceremmo" ; --# notpresent
    Cond Pl P2 => na_ + "scereste" ; --# notpresent
    Cond Pl P3 => na_ + "scerebbero" ; --# notpresent
    Imper SgP2 => na_ + "sci" ;
    Imper PlP1 => na_ + "sciamo" ;
    Imper PlP2 => na_ + "scete" ;
    Ger => na_ + "scendo" ;
    Part PresP Masc Sg => na_ + "scente" ;
    Part PresP Masc Pl => na_ + "scenti" ;
    Part PresP Fem Sg => na_ + "scente" ;
    Part PresP Fem Pl => na_ + "scenti" ;
    Part PassP Masc Sg => na_ + "to" ;
    Part PassP Masc Pl => na_ + "ti" ;
    Part PassP Fem Sg => na_ + "ta" ;
    Part PassP Fem Pl => na_ + "te"
    }
  } ;

oper nuocere_60 : Str -> Verbo = \nuocere ->
  let n_ = Predef.tk 6 nuocere in
 {s = table {
    Inf => n_ + "uocere" ;
    InfClit => n_ + "uocer" ;
    Indi Pres Sg P1 => n_ + "uoccio" ;
    Indi Pres Sg P2 => n_ + "uoci" ;
    Indi Pres Sg P3 => n_ + "uoce" ;
    Indi Pres Pl P1 => n_ + "uociamo" ;
    Indi Pres Pl P2 => n_ + "uocete" ;
    Indi Pres Pl P3 => n_ + "uocciono" ;
    Indi Imperf Sg P1 => n_ + "uocevo" ; --# notpresent
    Indi Imperf Sg P2 => n_ + "uocevi" ; --# notpresent
    Indi Imperf Sg P3 => n_ + "uoceva" ; --# notpresent
    Indi Imperf Pl P1 => n_ + "uocevamo" ; --# notpresent
    Indi Imperf Pl P2 => n_ + "uocevate" ; --# notpresent
    Indi Imperf Pl P3 => n_ + "uocevano" ; --# notpresent
    Pass Sg P1 => n_ + "ocqui" ; --# notpresent
    Pass Sg P2 => n_ + "uocesti" ; --# notpresent
    Pass Sg P3 => n_ + "ocque" ; --# notpresent
    Pass Pl P1 => n_ + "uocemmo" ; --# notpresent
    Pass Pl P2 => n_ + "uoceste" ; --# notpresent
    Pass Pl P3 => n_ + "ocquero" ; --# notpresent
    Fut Sg P1 => n_ + "uocerò" ; --# notpresent
    Fut Sg P2 => n_ + "uocerai" ; --# notpresent
    Fut Sg P3 => n_ + "uocerà" ; --# notpresent
    Fut Pl P1 => n_ + "uoceremo" ; --# notpresent
    Fut Pl P2 => n_ + "uocerete" ; --# notpresent
    Fut Pl P3 => n_ + "uoceranno" ; --# notpresent
    Cong Pres Sg P1 => n_ + "uoccia" ;
    Cong Pres Sg P2 => n_ + "uoccia" ;
    Cong Pres Sg P3 => n_ + "uoccia" ;
    Cong Pres Pl P1 => n_ + "uociamo" ;
    Cong Pres Pl P2 => n_ + "uociate" ;
    Cong Pres Pl P3 => n_ + "uocciano" ;
    Cong Imperf Sg P1 => n_ + "uocessi" ; --# notpresent
    Cong Imperf Sg P2 => n_ + "uocessi" ; --# notpresent
    Cong Imperf Sg P3 => n_ + "uocesse" ; --# notpresent
    Cong Imperf Pl P1 => n_ + "uocessimo" ; --# notpresent
    Cong Imperf Pl P2 => n_ + "uoceste" ; --# notpresent
    Cong Imperf Pl P3 => n_ + "uocessero" ; --# notpresent
    Cond Sg P1 => n_ + "uocerei" ; --# notpresent
    Cond Sg P2 => n_ + "uoceresti" ; --# notpresent
    Cond Sg P3 => n_ + "uocerebbe" ; --# notpresent
    Cond Pl P1 => n_ + "uoceremmo" ; --# notpresent
    Cond Pl P2 => n_ + "uocereste" ; --# notpresent
    Cond Pl P3 => n_ + "uocerebbero" ; --# notpresent
    Imper SgP2 => n_ + "uoci" ;
    Imper PlP1 => n_ + "uociamo" ;
    Imper PlP2 => n_ + "uocete" ;
    Ger => n_ + "uocendo" ;
    Part PresP Masc Sg => n_ + "uocente" ;
    Part PresP Masc Pl => n_ + "uocenti" ;
    Part PresP Fem Sg => n_ + "uocente" ;
    Part PresP Fem Pl => n_ + "uocenti" ;
    Part PassP Masc Sg => n_ + "uociuto" ;
    Part PassP Masc Pl => n_ + "uociuti" ;
    Part PassP Fem Sg => n_ + "uociuta" ;
    Part PassP Fem Pl => n_ + "uociute"
    }
  } ;

oper parere_61 : Str -> Verbo = \parere ->
  let pa_ = Predef.tk 4 parere in
 {s = table {
    Inf => pa_ + "rere" ;
    InfClit => pa_ + "rer" ;
    Indi Pres Sg P1 => pa_ + "io" ;
    Indi Pres Sg P2 => pa_ + "ri" ;
    Indi Pres Sg P3 => pa_ + "re" ;
    Indi Pres Pl P1 => pa_ + "riamo" ;
    Indi Pres Pl P2 => pa_ + "rete" ;
    Indi Pres Pl P3 => pa_ + "iono" ;
    Indi Imperf Sg P1 => pa_ + "revo" ; --# notpresent
    Indi Imperf Sg P2 => pa_ + "revi" ; --# notpresent
    Indi Imperf Sg P3 => pa_ + "reva" ; --# notpresent
    Indi Imperf Pl P1 => pa_ + "revamo" ; --# notpresent
    Indi Imperf Pl P2 => pa_ + "revate" ; --# notpresent
    Indi Imperf Pl P3 => pa_ + "revano" ; --# notpresent
    Pass Sg P1 => pa_ + "rvi" ; --# notpresent
    Pass Sg P2 => pa_ + "resti" ; --# notpresent
    Pass Sg P3 => pa_ + "rve" ; --# notpresent
    Pass Pl P1 => pa_ + "remmo" ; --# notpresent
    Pass Pl P2 => pa_ + "reste" ; --# notpresent
    Pass Pl P3 => pa_ + "rvero" ; --# notpresent
    Fut Sg P1 => pa_ + "rrò" ; --# notpresent
    Fut Sg P2 => pa_ + "rrai" ; --# notpresent
    Fut Sg P3 => pa_ + "rrà" ; --# notpresent
    Fut Pl P1 => pa_ + "rremo" ; --# notpresent
    Fut Pl P2 => pa_ + "rrete" ; --# notpresent
    Fut Pl P3 => pa_ + "rranno" ; --# notpresent
    Cong Pres Sg P1 => pa_ + "ia" ;
    Cong Pres Sg P2 => pa_ + "ia" ;
    Cong Pres Sg P3 => pa_ + "ia" ;
    Cong Pres Pl P1 => pa_ + "riamo" ;
    Cong Pres Pl P2 => pa_ + "riate" ;
    Cong Pres Pl P3 => pa_ + "iano" ;
    Cong Imperf Sg P1 => pa_ + "ressi" ; --# notpresent
    Cong Imperf Sg P2 => pa_ + "ressi" ; --# notpresent
    Cong Imperf Sg P3 => pa_ + "resse" ; --# notpresent
    Cong Imperf Pl P1 => pa_ + "ressimo" ; --# notpresent
    Cong Imperf Pl P2 => pa_ + "reste" ; --# notpresent
    Cong Imperf Pl P3 => pa_ + "ressero" ; --# notpresent
    Cond Sg P1 => pa_ + "rrei" ; --# notpresent
    Cond Sg P2 => pa_ + "rresti" ; --# notpresent
    Cond Sg P3 => pa_ + "rrebbe" ; --# notpresent
    Cond Pl P1 => pa_ + "rremmo" ; --# notpresent
    Cond Pl P2 => pa_ + "rreste" ; --# notpresent
    Cond Pl P3 => pa_ + "rrebbero" ; --# notpresent
    Imper SgP2 => variants {} ;
    Imper PlP1 => variants {} ;
    Imper PlP2 => variants {} ;
    Ger => pa_ + "rendo" ;
    Part PresP Masc Sg => pa_ + "rvente" ;
    Part PresP Masc Pl => pa_ + "rventi" ;
    Part PresP Fem Sg => pa_ + "rvente" ;
    Part PresP Fem Pl => pa_ + "rventi" ;
    Part PassP Masc Sg => pa_ + "rso" ;
    Part PassP Masc Pl => pa_ + "rsi" ;
    Part PassP Fem Sg => pa_ + "rsa" ;
    Part PassP Fem Pl => pa_ + "rse"
    }
  } ;

oper perdere_62 : Str -> Verbo = \perdere ->
  let per_ = Predef.tk 4 perdere in
 {s = table {
    Inf => per_ + "dere" ;
    InfClit => per_ + "der" ;
    Indi Pres Sg P1 => per_ + "do" ;
    Indi Pres Sg P2 => per_ + "di" ;
    Indi Pres Sg P3 => per_ + "de" ;
    Indi Pres Pl P1 => per_ + "diamo" ;
    Indi Pres Pl P2 => per_ + "dete" ;
    Indi Pres Pl P3 => per_ + "dono" ;
    Indi Imperf Sg P1 => per_ + "devo" ; --# notpresent
    Indi Imperf Sg P2 => per_ + "devi" ; --# notpresent
    Indi Imperf Sg P3 => per_ + "deva" ; --# notpresent
    Indi Imperf Pl P1 => per_ + "devamo" ; --# notpresent
    Indi Imperf Pl P2 => per_ + "devate" ; --# notpresent
    Indi Imperf Pl P3 => per_ + "devano" ; --# notpresent
    Pass Sg P1 => per_ + "si" ; --# notpresent
    Pass Sg P2 => per_ + "desti" ; --# notpresent
    Pass Sg P3 => per_ + "se" ; --# notpresent
    Pass Pl P1 => per_ + "demmo" ; --# notpresent
    Pass Pl P2 => per_ + "deste" ; --# notpresent
    Pass Pl P3 => per_ + "sero" ; --# notpresent
    Fut Sg P1 => per_ + "derò" ; --# notpresent
    Fut Sg P2 => per_ + "derai" ; --# notpresent
    Fut Sg P3 => per_ + "derà" ; --# notpresent
    Fut Pl P1 => per_ + "deremo" ; --# notpresent
    Fut Pl P2 => per_ + "derete" ; --# notpresent
    Fut Pl P3 => per_ + "deranno" ; --# notpresent
    Cong Pres Sg P1 => per_ + "da" ;
    Cong Pres Sg P2 => per_ + "da" ;
    Cong Pres Sg P3 => per_ + "da" ;
    Cong Pres Pl P1 => per_ + "diamo" ;
    Cong Pres Pl P2 => per_ + "diate" ;
    Cong Pres Pl P3 => per_ + "dano" ;
    Cong Imperf Sg P1 => per_ + "dessi" ; --# notpresent
    Cong Imperf Sg P2 => per_ + "dessi" ; --# notpresent
    Cong Imperf Sg P3 => per_ + "desse" ; --# notpresent
    Cong Imperf Pl P1 => per_ + "dessimo" ; --# notpresent
    Cong Imperf Pl P2 => per_ + "deste" ; --# notpresent
    Cong Imperf Pl P3 => per_ + "dessero" ; --# notpresent
    Cond Sg P1 => per_ + "derei" ; --# notpresent
    Cond Sg P2 => per_ + "deresti" ; --# notpresent
    Cond Sg P3 => per_ + "derebbe" ; --# notpresent
    Cond Pl P1 => per_ + "deremmo" ; --# notpresent
    Cond Pl P2 => per_ + "dereste" ; --# notpresent
    Cond Pl P3 => per_ + "derebbero" ; --# notpresent
    Imper SgP2 => per_ + "di" ;
    Imper PlP1 => per_ + "diamo" ;
    Imper PlP2 => per_ + "dete" ;
    Ger => per_ + "dendo" ;
    Part PresP Masc Sg => per_ + "dente" ;
    Part PresP Masc Pl => per_ + "denti" ;
    Part PresP Fem Sg => per_ + "dente" ;
    Part PresP Fem Pl => per_ + "denti" ;
    Part PassP Masc Sg => variants {per_ + "duto" ; per_ + "so"} ;
    Part PassP Masc Pl => variants {per_ + "duti" ; per_ + "si"} ;
    Part PassP Fem Sg => variants {per_ + "duta" ; per_ + "sa"} ;
    Part PassP Fem Pl => variants {per_ + "dute" ; per_ + "se"}
    }
  } ;

oper persuadere_63 : Str -> Verbo = \persuadere ->
  let persua_ = Predef.tk 4 persuadere in
 {s = table {
    Inf => persua_ + "dere" ;
    InfClit => persua_ + "der" ;
    Indi Pres Sg P1 => persua_ + "do" ;
    Indi Pres Sg P2 => persua_ + "di" ;
    Indi Pres Sg P3 => persua_ + "de" ;
    Indi Pres Pl P1 => persua_ + "diamo" ;
    Indi Pres Pl P2 => persua_ + "dete" ;
    Indi Pres Pl P3 => persua_ + "dono" ;
    Indi Imperf Sg P1 => persua_ + "devo" ; --# notpresent
    Indi Imperf Sg P2 => persua_ + "devi" ; --# notpresent
    Indi Imperf Sg P3 => persua_ + "deva" ; --# notpresent
    Indi Imperf Pl P1 => persua_ + "devamo" ; --# notpresent
    Indi Imperf Pl P2 => persua_ + "devate" ; --# notpresent
    Indi Imperf Pl P3 => persua_ + "devano" ; --# notpresent
    Pass Sg P1 => persua_ + "si" ; --# notpresent
    Pass Sg P2 => persua_ + "desti" ; --# notpresent
    Pass Sg P3 => persua_ + "se" ; --# notpresent
    Pass Pl P1 => persua_ + "demmo" ; --# notpresent
    Pass Pl P2 => persua_ + "deste" ; --# notpresent
    Pass Pl P3 => persua_ + "sero" ; --# notpresent
    Fut Sg P1 => persua_ + "derò" ; --# notpresent
    Fut Sg P2 => persua_ + "derai" ; --# notpresent
    Fut Sg P3 => persua_ + "derà" ; --# notpresent
    Fut Pl P1 => persua_ + "deremo" ; --# notpresent
    Fut Pl P2 => persua_ + "derete" ; --# notpresent
    Fut Pl P3 => persua_ + "deranno" ; --# notpresent
    Cong Pres Sg P1 => persua_ + "da" ;
    Cong Pres Sg P2 => persua_ + "da" ;
    Cong Pres Sg P3 => persua_ + "da" ;
    Cong Pres Pl P1 => persua_ + "diamo" ;
    Cong Pres Pl P2 => persua_ + "diate" ;
    Cong Pres Pl P3 => persua_ + "dano" ;
    Cong Imperf Sg P1 => persua_ + "dessi" ; --# notpresent
    Cong Imperf Sg P2 => persua_ + "dessi" ; --# notpresent
    Cong Imperf Sg P3 => persua_ + "desse" ; --# notpresent
    Cong Imperf Pl P1 => persua_ + "dessimo" ; --# notpresent
    Cong Imperf Pl P2 => persua_ + "deste" ; --# notpresent
    Cong Imperf Pl P3 => persua_ + "dessero" ; --# notpresent
    Cond Sg P1 => persua_ + "derei" ; --# notpresent
    Cond Sg P2 => persua_ + "deresti" ; --# notpresent
    Cond Sg P3 => persua_ + "derebbe" ; --# notpresent
    Cond Pl P1 => persua_ + "deremmo" ; --# notpresent
    Cond Pl P2 => persua_ + "dereste" ; --# notpresent
    Cond Pl P3 => persua_ + "derebbero" ; --# notpresent
    Imper SgP2 => persua_ + "di" ;
    Imper PlP1 => persua_ + "diamo" ;
    Imper PlP2 => persua_ + "dete" ;
    Ger => persua_ + "dendo" ;
    Part PresP Masc Sg => persua_ + "dente" ;
    Part PresP Masc Pl => persua_ + "denti" ;
    Part PresP Fem Sg => persua_ + "dente" ;
    Part PresP Fem Pl => persua_ + "denti" ;
    Part PassP Masc Sg => persua_ + "so" ;
    Part PassP Masc Pl => persua_ + "si" ;
    Part PassP Fem Sg => persua_ + "sa" ;
    Part PassP Fem Pl => persua_ + "se"
    }
  } ;

oper piacere_64 : Str -> Verbo = \piacerecere ->
  let piacerec_ = Predef.tk 3 piacerecere in
 {s = table {
    Inf => piacerec_ + "ere" ;
    InfClit => piacerec_ + "er" ;
    Indi Pres Sg P1 => piacerec_ + "cio" ;
    Indi Pres Sg P2 => piacerec_ + "i" ;
    Indi Pres Sg P3 => piacerec_ + "e" ;
    Indi Pres Pl P1 => piacerec_ + "iamo" ;
    Indi Pres Pl P2 => piacerec_ + "ete" ;
    Indi Pres Pl P3 => piacerec_ + "ciono" ;
    Indi Imperf Sg P1 => piacerec_ + "evo" ; --# notpresent
    Indi Imperf Sg P2 => piacerec_ + "evi" ; --# notpresent
    Indi Imperf Sg P3 => piacerec_ + "eva" ; --# notpresent
    Indi Imperf Pl P1 => piacerec_ + "evamo" ; --# notpresent
    Indi Imperf Pl P2 => piacerec_ + "evate" ; --# notpresent
    Indi Imperf Pl P3 => piacerec_ + "evano" ; --# notpresent
    Pass Sg P1 => piacerec_ + "qui" ; --# notpresent
    Pass Sg P2 => piacerec_ + "esti" ; --# notpresent
    Pass Sg P3 => piacerec_ + "que" ; --# notpresent
    Pass Pl P1 => piacerec_ + "emmo" ; --# notpresent
    Pass Pl P2 => piacerec_ + "este" ; --# notpresent
    Pass Pl P3 => piacerec_ + "quero" ; --# notpresent
    Fut Sg P1 => piacerec_ + "erò" ; --# notpresent
    Fut Sg P2 => piacerec_ + "erai" ; --# notpresent
    Fut Sg P3 => piacerec_ + "erà" ; --# notpresent
    Fut Pl P1 => piacerec_ + "eremo" ; --# notpresent
    Fut Pl P2 => piacerec_ + "erete" ; --# notpresent
    Fut Pl P3 => piacerec_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => piacerec_ + "cia" ;
    Cong Pres Sg P2 => piacerec_ + "cia" ;
    Cong Pres Sg P3 => piacerec_ + "cia" ;
    Cong Pres Pl P1 => piacerec_ + "iamo" ;
    Cong Pres Pl P2 => piacerec_ + "iate" ;
    Cong Pres Pl P3 => piacerec_ + "ciano" ;
    Cong Imperf Sg P1 => piacerec_ + "essi" ; --# notpresent
    Cong Imperf Sg P2 => piacerec_ + "essi" ; --# notpresent
    Cong Imperf Sg P3 => piacerec_ + "esse" ; --# notpresent
    Cong Imperf Pl P1 => piacerec_ + "essimo" ; --# notpresent
    Cong Imperf Pl P2 => piacerec_ + "este" ; --# notpresent
    Cong Imperf Pl P3 => piacerec_ + "essero" ; --# notpresent
    Cond Sg P1 => piacerec_ + "erei" ; --# notpresent
    Cond Sg P2 => piacerec_ + "eresti" ; --# notpresent
    Cond Sg P3 => piacerec_ + "erebbe" ; --# notpresent
    Cond Pl P1 => piacerec_ + "eremmo" ; --# notpresent
    Cond Pl P2 => piacerec_ + "ereste" ; --# notpresent
    Cond Pl P3 => piacerec_ + "erebbero" ; --# notpresent
    Imper SgP2 => piacerec_ + "i" ;
    Imper PlP1 => piacerec_ + "iamo" ;
    Imper PlP2 => piacerec_ + "ete" ;
    Ger => piacerec_ + "endo" ;
    Part PresP Masc Sg => piacerec_ + "ente" ;
    Part PresP Masc Pl => piacerec_ + "enti" ;
    Part PresP Fem Sg => piacerec_ + "ente" ;
    Part PresP Fem Pl => piacerec_ + "enti" ;
    Part PassP Masc Sg => piacerec_ + "iuto" ;
    Part PassP Masc Pl => piacerec_ + "iuti" ;
    Part PassP Fem Sg => piacerec_ + "iuta" ;
    Part PassP Fem Pl => piacerec_ + "iute"
    }
  } ;

oper piangere_65 : Str -> Verbo = \piangere ->
  let pian_ = Predef.tk 4 piangere in
 {s = table {
    Inf => pian_ + "gere" ;
    InfClit => pian_ + "ger" ;
    Indi Pres Sg P1 => pian_ + "go" ;
    Indi Pres Sg P2 => pian_ + "gi" ;
    Indi Pres Sg P3 => pian_ + "ge" ;
    Indi Pres Pl P1 => pian_ + "giamo" ;
    Indi Pres Pl P2 => pian_ + "gete" ;
    Indi Pres Pl P3 => pian_ + "gono" ;
    Indi Imperf Sg P1 => pian_ + "gevo" ; --# notpresent
    Indi Imperf Sg P2 => pian_ + "gevi" ; --# notpresent
    Indi Imperf Sg P3 => pian_ + "geva" ; --# notpresent
    Indi Imperf Pl P1 => pian_ + "gevamo" ; --# notpresent
    Indi Imperf Pl P2 => pian_ + "gevate" ; --# notpresent
    Indi Imperf Pl P3 => pian_ + "gevano" ; --# notpresent
    Pass Sg P1 => pian_ + "si" ; --# notpresent
    Pass Sg P2 => pian_ + "gesti" ; --# notpresent
    Pass Sg P3 => pian_ + "se" ; --# notpresent
    Pass Pl P1 => pian_ + "gemmo" ; --# notpresent
    Pass Pl P2 => pian_ + "geste" ; --# notpresent
    Pass Pl P3 => pian_ + "sero" ; --# notpresent
    Fut Sg P1 => pian_ + "gerò" ; --# notpresent
    Fut Sg P2 => pian_ + "gerai" ; --# notpresent
    Fut Sg P3 => pian_ + "gerà" ; --# notpresent
    Fut Pl P1 => pian_ + "geremo" ; --# notpresent
    Fut Pl P2 => pian_ + "gerete" ; --# notpresent
    Fut Pl P3 => pian_ + "geranno" ; --# notpresent
    Cong Pres Sg P1 => pian_ + "ga" ;
    Cong Pres Sg P2 => pian_ + "ga" ;
    Cong Pres Sg P3 => pian_ + "ga" ;
    Cong Pres Pl P1 => pian_ + "giamo" ;
    Cong Pres Pl P2 => pian_ + "giate" ;
    Cong Pres Pl P3 => pian_ + "gano" ;
    Cong Imperf Sg P1 => pian_ + "gessi" ; --# notpresent
    Cong Imperf Sg P2 => pian_ + "gessi" ; --# notpresent
    Cong Imperf Sg P3 => pian_ + "gesse" ; --# notpresent
    Cong Imperf Pl P1 => pian_ + "gessimo" ; --# notpresent
    Cong Imperf Pl P2 => pian_ + "geste" ; --# notpresent
    Cong Imperf Pl P3 => pian_ + "gessero" ; --# notpresent
    Cond Sg P1 => pian_ + "gerei" ; --# notpresent
    Cond Sg P2 => pian_ + "geresti" ; --# notpresent
    Cond Sg P3 => pian_ + "gerebbe" ; --# notpresent
    Cond Pl P1 => pian_ + "geremmo" ; --# notpresent
    Cond Pl P2 => pian_ + "gereste" ; --# notpresent
    Cond Pl P3 => pian_ + "gerebbero" ; --# notpresent
    Imper SgP2 => pian_ + "gi" ;
    Imper PlP1 => pian_ + "giamo" ;
    Imper PlP2 => pian_ + "gete" ;
    Ger => pian_ + "gendo" ;
    Part PresP Masc Sg => pian_ + "gente" ;
    Part PresP Masc Pl => pian_ + "genti" ;
    Part PresP Fem Sg => pian_ + "gente" ;
    Part PresP Fem Pl => pian_ + "genti" ;
    Part PassP Masc Sg => pian_ + "to" ;
    Part PassP Masc Pl => pian_ + "ti" ;
    Part PassP Fem Sg => pian_ + "ta" ;
    Part PassP Fem Pl => pian_ + "te"
    }
  } ;

oper piovere_66 : Str -> Verbo = \piovere ->
  let piov_ = Predef.tk 3 piovere in
 {s = table {
    Inf => piov_ + "ere" ;
    InfClit => piov_ + "er" ;
    Indi Pres Sg P1 => piov_ + "o" ;
    Indi Pres Sg P2 => piov_ + "i" ;
    Indi Pres Sg P3 => piov_ + "e" ;
    Indi Pres Pl P1 => piov_ + "iamo" ;
    Indi Pres Pl P2 => piov_ + "ete" ;
    Indi Pres Pl P3 => piov_ + "ono" ;
    Indi Imperf Sg P1 => piov_ + "evo" ; --# notpresent
    Indi Imperf Sg P2 => piov_ + "evi" ; --# notpresent
    Indi Imperf Sg P3 => piov_ + "eva" ; --# notpresent
    Indi Imperf Pl P1 => piov_ + "evamo" ; --# notpresent
    Indi Imperf Pl P2 => piov_ + "evate" ; --# notpresent
    Indi Imperf Pl P3 => piov_ + "evano" ; --# notpresent
    Pass Sg P1 => piov_ + "vi" ; --# notpresent
    Pass Sg P2 => piov_ + "esti" ; --# notpresent
    Pass Sg P3 => piov_ + "ve" ; --# notpresent
    Pass Pl P1 => piov_ + "emmo" ; --# notpresent
    Pass Pl P2 => piov_ + "este" ; --# notpresent
    Pass Pl P3 => piov_ + "vero" ; --# notpresent
    Fut Sg P1 => piov_ + "erò" ; --# notpresent
    Fut Sg P2 => piov_ + "erai" ; --# notpresent
    Fut Sg P3 => piov_ + "erà" ; --# notpresent
    Fut Pl P1 => piov_ + "eremo" ; --# notpresent
    Fut Pl P2 => piov_ + "erete" ; --# notpresent
    Fut Pl P3 => piov_ + "eranno" ; --# notpresent
    Cong Pres Sg P1 => piov_ + "a" ;
    Cong Pres Sg P2 => piov_ + "a" ;
    Cong Pres Sg P3 => piov_ + "a" ;
    Cong Pres Pl P1 => piov_ + "iamo" ;
    Cong Pres Pl P2 => piov_ + "iate" ;
    Cong Pres Pl P3 => piov_ + "ano" ;
    Cong Imperf Sg P1 => piov_ + "essi" ; --# notpresent
    Cong Imperf Sg P2 => piov_ + "essi" ; --# notpresent
    Cong Imperf Sg P3 => piov_ + "esse" ; --# notpresent
    Cong Imperf Pl P1 => piov_ + "essimo" ; --# notpresent
    Cong Imperf Pl P2 => piov_ + "este" ; --# notpresent
    Cong Imperf Pl P3 => piov_ + "essero" ; --# notpresent
    Cond Sg P1 => piov_ + "erei" ; --# notpresent
    Cond Sg P2 => piov_ + "eresti" ; --# notpresent
    Cond Sg P3 => piov_ + "erebbe" ; --# notpresent
    Cond Pl P1 => piov_ + "eremmo" ; --# notpresent
    Cond Pl P2 => piov_ + "ereste" ; --# notpresent
    Cond Pl P3 => piov_ + "erebbero" ; --# notpresent
    Imper SgP2 => piov_ + "i" ;
    Imper PlP1 => piov_ + "iamo" ;
    Imper PlP2 => piov_ + "ete" ;
    Ger => piov_ + "endo" ;
    Part PresP Masc Sg => piov_ + "ente" ;
    Part PresP Masc Pl => piov_ + "enti" ;
    Part PresP Fem Sg => piov_ + "ente" ;
    Part PresP Fem Pl => piov_ + "enti" ;
    Part PassP Masc Sg => piov_ + "uto" ;
    Part PassP Masc Pl => piov_ + "uti" ;
    Part PassP Fem Sg => piov_ + "uta" ;
    Part PassP Fem Pl => piov_ + "ute"
    }
  } ;

oper porgere_67 : Str -> Verbo = \porgere ->
  let por_ = Predef.tk 4 porgere in
 {s = table {
    Inf => por_ + "gere" ;
    InfClit => por_ + "ger" ;
    Indi Pres Sg P1 => por_ + "go" ;
    Indi Pres Sg P2 => por_ + "gi" ;
    Indi Pres Sg P3 => por_ + "ge" ;
    Indi Pres Pl P1 => por_ + "giamo" ;
    Indi Pres Pl P2 => por_ + "gete" ;
    Indi Pres Pl P3 => por_ + "gono" ;
    Indi Imperf Sg P1 => por_ + "gevo" ; --# notpresent
    Indi Imperf Sg P2 => por_ + "gevi" ; --# notpresent
    Indi Imperf Sg P3 => por_ + "geva" ; --# notpresent
    Indi Imperf Pl P1 => por_ + "gevamo" ; --# notpresent
    Indi Imperf Pl P2 => por_ + "gevate" ; --# notpresent
    Indi Imperf Pl P3 => por_ + "gevano" ; --# notpresent
    Pass Sg P1 => por_ + "si" ; --# notpresent
    Pass Sg P2 => por_ + "gesti" ; --# notpresent
    Pass Sg P3 => por_ + "se" ; --# notpresent
    Pass Pl P1 => por_ + "gemmo" ; --# notpresent
    Pass Pl P2 => por_ + "geste" ; --# notpresent
    Pass Pl P3 => por_ + "sero" ; --# notpresent
    Fut Sg P1 => por_ + "gerò" ; --# notpresent
    Fut Sg P2 => por_ + "gerai" ; --# notpresent
    Fut Sg P3 => por_ + "gerà" ; --# notpresent
    Fut Pl P1 => por_ + "geremo" ; --# notpresent
    Fut Pl P2 => por_ + "gerete" ; --# notpresent
    Fut Pl P3 => por_ + "geranno" ; --# notpresent
    Cong Pres Sg P1 => por_ + "ga" ;
    Cong Pres Sg P2 => por_ + "ga" ;
    Cong Pres Sg P3 => por_ + "ga" ;
    Cong Pres Pl P1 => por_ + "giamo" ;
    Cong Pres Pl P2 => por_ + "giate" ;
    Cong Pres Pl P3 => por_ + "gano" ;
    Cong Imperf Sg P1 => por_ + "gessi" ; --# notpresent
    Cong Imperf Sg P2 => por_ + "gessi" ; --# notpresent
    Cong Imperf Sg P3 => por_ + "gesse" ; --# notpresent
    Cong Imperf Pl P1 => por_ + "gessimo" ; --# notpresent
    Cong Imperf Pl P2 => por_ + "geste" ; --# notpresent
    Cong Imperf Pl P3 => por_ + "gessero" ; --# notpresent
    Cond Sg P1 => por_ + "gerei" ; --# notpresent
    Cond Sg P2 => por_ + "geresti" ; --# notpresent
    Cond Sg P3 => por_ + "gerebbe" ; --# notpresent
    Cond Pl P1 => por_ + "geremmo" ; --# notpresent
    Cond Pl P2 => por_ + "gereste" ; --# notpresent
    Cond Pl P3 => por_ + "gerebbero" ; --# notpresent
    Imper SgP2 => por_ + "gi" ;
    Imper PlP1 => por_ + "giamo" ;
    Imper PlP2 => por_ + "gete" ;
    Ger => por_ + "gendo" ;
    Part PresP Masc Sg => por_ + "gente" ;
    Part PresP Masc Pl => por_ + "genti" ;
    Part PresP Fem Sg => por_ + "gente" ;
    Part PresP Fem Pl => por_ + "genti" ;
    Part PassP Masc Sg => por_ + "to" ;
    Part PassP Masc Pl => por_ + "ti" ;
    Part PassP Fem Sg => por_ + "ta" ;
    Part PassP Fem Pl => por_ + "te"
    }
  } ;

oper porre_68 : Str -> Verbo = \porre ->
  let po_ = Predef.tk 3 porre in
 {s = table {
    Inf => po_ + "rre" ;
    InfClit => po_ + "r" ;
    Indi Pres Sg P1 => po_ + "ngo" ;
    Indi Pres Sg P2 => po_ + "ni" ;
    Indi Pres Sg P3 => po_ + "ne" ;
    Indi Pres Pl P1 => po_ + "niamo" ;
    Indi Pres Pl P2 => po_ + "nete" ;
    Indi Pres Pl P3 => po_ + "ngono" ;
    Indi Imperf Sg P1 => po_ + "nevo" ; --# notpresent
    Indi Imperf Sg P2 => po_ + "nevi" ; --# notpresent
    Indi Imperf Sg P3 => po_ + "neva" ; --# notpresent
    Indi Imperf Pl P1 => po_ + "nevamo" ; --# notpresent
    Indi Imperf Pl P2 => po_ + "nevate" ; --# notpresent
    Indi Imperf Pl P3 => po_ + "nevano" ; --# notpresent
    Pass Sg P1 => po_ + "si" ; --# notpresent
    Pass Sg P2 => po_ + "nesti" ; --# notpresent
    Pass Sg P3 => po_ + "se" ; --# notpresent
    Pass Pl P1 => po_ + "nemmo" ; --# notpresent
    Pass Pl P2 => po_ + "neste" ; --# notpresent
    Pass Pl P3 => po_ + "sero" ; --# notpresent
    Fut Sg P1 => po_ + "rrò" ; --# notpresent
    Fut Sg P2 => po_ + "rrai" ; --# notpresent
    Fut Sg P3 => po_ + "rrà" ; --# notpresent
    Fut Pl P1 => po_ + "rremo" ; --# notpresent
    Fut Pl P2 => po_ + "rrete" ; --# notpresent
    Fut Pl P3 => po_ + "rranno" ; --# notpresent
    Cong Pres Sg P1 => po_ + "nga" ;
    Cong Pres Sg P2 => po_ + "nga" ;
    Cong Pres Sg P3 => po_ + "nga" ;
    Cong Pres Pl P1 => po_ + "niamo" ;
    Cong Pres Pl P2 => po_ + "niate" ;
    Cong Pres Pl P3 => po_ + "ngano" ;
    Cong Imperf Sg P1 => po_ + "nessi" ; --# notpresent
    Cong Imperf Sg P2 => po_ + "nessi" ; --# notpresent
    Cong Imperf Sg P3 => po_ + "nesse" ; --# notpresent
    Cong Imperf Pl P1 => po_ + "nessimo" ; --# notpresent
    Cong Imperf Pl P2 => po_ + "neste" ; --# notpresent
    Cong Imperf Pl P3 => po_ + "nessero" ; --# notpresent
    Cond Sg P1 => po_ + "rrei" ; --# notpresent
    Cond Sg P2 => po_ + "rresti" ; --# notpresent
    Cond Sg P3 => po_ + "rrebbe" ; --# notpresent
    Cond Pl P1 => po_ + "rremmo" ; --# notpresent
    Cond Pl P2 => po_ + "rreste" ; --# notpresent
    Cond Pl P3 => po_ + "rrebbero" ; --# notpresent
    Imper SgP2 => po_ + "ni" ;
    Imper PlP1 => po_ + "niamo" ;
    Imper PlP2 => po_ + "nete" ;
    Ger => po_ + "nendo" ;
    Part PresP Masc Sg => po_ + "nente" ;
    Part PresP Masc Pl => po_ + "nenti" ;
    Part PresP Fem Sg => po_ + "nente" ;
    Part PresP Fem Pl => po_ + "nenti" ;
    Part PassP Masc Sg => po_ + "sto" ;
    Part PassP Masc Pl => po_ + "sti" ;
    Part PassP Fem Sg => po_ + "sta" ;
    Part PassP Fem Pl => po_ + "ste"
    }
  } ;

oper potere_69 : Str -> Verbo = \potere ->
  let p_ = Predef.tk 5 potere in
 {s = table {
    Inf => p_ + "otere" ;
    InfClit => p_ + "oter" ;
    Indi Pres Sg P1 => p_ + "osso" ;
    Indi Pres Sg P2 => p_ + "uoi" ;
    Indi Pres Sg P3 => p_ + "uò" ;
    Indi Pres Pl P1 => p_ + "ossiamo" ;
    Indi Pres Pl P2 => p_ + "otete" ;
    Indi Pres Pl P3 => p_ + "ossono" ;
    Indi Imperf Sg P1 => p_ + "otevo" ; --# notpresent
    Indi Imperf Sg P2 => p_ + "otevi" ; --# notpresent
    Indi Imperf Sg P3 => p_ + "oteva" ; --# notpresent
    Indi Imperf Pl P1 => p_ + "otevamo" ; --# notpresent
    Indi Imperf Pl P2 => p_ + "otevate" ; --# notpresent
    Indi Imperf Pl P3 => p_ + "otevano" ; --# notpresent
    Pass Sg P1 => p_ + "otetti" ; --# notpresent
    Pass Sg P2 => p_ + "otesti" ; --# notpresent
    Pass Sg P3 => p_ + "otette" ; --# notpresent
    Pass Pl P1 => p_ + "otemmo" ; --# notpresent
    Pass Pl P2 => p_ + "oteste" ; --# notpresent
    Pass Pl P3 => p_ + "otettero" ; --# notpresent
    Fut Sg P1 => p_ + "otrò" ; --# notpresent
    Fut Sg P2 => p_ + "otrai" ; --# notpresent
    Fut Sg P3 => p_ + "otrà" ; --# notpresent
    Fut Pl P1 => p_ + "otremo" ; --# notpresent
    Fut Pl P2 => p_ + "otrete" ; --# notpresent
    Fut Pl P3 => p_ + "otranno" ; --# notpresent
    Cong Pres Sg P1 => p_ + "ossa" ;
    Cong Pres Sg P2 => p_ + "ossa" ;
    Cong Pres Sg P3 => p_ + "ossa" ;
    Cong Pres Pl P1 => p_ + "otiamo" ;
    Cong Pres Pl P2 => p_ + "otiate" ;
    Cong Pres Pl P3 => p_ + "ossano" ;
    Cong Imperf Sg P1 => p_ + "otessi" ; --# notpresent
    Cong Imperf Sg P2 => p_ + "otessi" ; --# notpresent
    Cong Imperf Sg P3 => p_ + "otesse" ; --# notpresent
    Cong Imperf Pl P1 => p_ + "otessimo" ; --# notpresent
    Cong Imperf Pl P2 => p_ + "oteste" ; --# notpresent
    Cong Imperf Pl P3 => p_ + "otessero" ; --# notpresent
    Cond Sg P1 => p_ + "otrei" ; --# notpresent
    Cond Sg P2 => p_ + "otresti" ; --# notpresent
    Cond Sg P3 => p_ + "otrebbe" ; --# notpresent
    Cond Pl P1 => p_ + "otremmo" ; --# notpresent
    Cond Pl P2 => p_ + "otreste" ; --# notpresent
    Cond Pl P3 => p_ + "otrebbero" ; --# notpresent
    Imper SgP2 => p_ + "ossa" ; ---- variants {} ;
    Imper PlP1 => p_ + "otiamo" ; ---- variants {} ;
    Imper PlP2 => p_ + "otiate" ; ---- variants {} ;
    Ger => p_ + "otendo" ;
    Part PresP Masc Sg => p_ + "otente" ;
    Part PresP Masc Pl => p_ + "otenti" ;
    Part PresP Fem Sg => p_ + "otente" ;
    Part PresP Fem Pl => p_ + "otenti" ;
    Part PassP Masc Sg => p_ + "otuto" ;
    Part PassP Masc Pl => p_ + "otuti" ;
    Part PassP Fem Sg => p_ + "otuta" ;
    Part PassP Fem Pl => p_ + "otute"
    }
  } ;

oper prendere_70 : Str -> Verbo = \prendere ->
  let pre_ = Predef.tk 5 prendere in
 {s = table {
    Inf => pre_ + "ndere" ;
    InfClit => pre_ + "nder" ;
    Indi Pres Sg P1 => pre_ + "ndo" ;
    Indi Pres Sg P2 => pre_ + "ndi" ;
    Indi Pres Sg P3 => pre_ + "nde" ;
    Indi Pres Pl P1 => pre_ + "ndiamo" ;
    Indi Pres Pl P2 => pre_ + "ndete" ;
    Indi Pres Pl P3 => pre_ + "ndono" ;
    Indi Imperf Sg P1 => pre_ + "ndevo" ; --# notpresent
    Indi Imperf Sg P2 => pre_ + "ndevi" ; --# notpresent
    Indi Imperf Sg P3 => pre_ + "ndeva" ; --# notpresent
    Indi Imperf Pl P1 => pre_ + "ndevamo" ; --# notpresent
    Indi Imperf Pl P2 => pre_ + "ndevate" ; --# notpresent
    Indi Imperf Pl P3 => pre_ + "ndevano" ; --# notpresent
    Pass Sg P1 => pre_ + "si" ; --# notpresent
    Pass Sg P2 => pre_ + "ndesti" ; --# notpresent
    Pass Sg P3 => pre_ + "se" ; --# notpresent
    Pass Pl P1 => pre_ + "ndemmo" ; --# notpresent
    Pass Pl P2 => pre_ + "ndeste" ; --# notpresent
    Pass Pl P3 => pre_ + "sero" ; --# notpresent
    Fut Sg P1 => pre_ + "nderò" ; --# notpresent
    Fut Sg P2 => pre_ + "nderai" ; --# notpresent
    Fut Sg P3 => pre_ + "nderà" ; --# notpresent
    Fut Pl P1 => pre_ + "nderemo" ; --# notpresent
    Fut Pl P2 => pre_ + "nderete" ; --# notpresent
    Fut Pl P3 => pre_ + "nderanno" ; --# notpresent
    Cong Pres Sg P1 => pre_ + "nda" ;
    Cong Pres Sg P2 => pre_ + "nda" ;
    Cong Pres Sg P3 => pre_ + "nda" ;
    Cong Pres Pl P1 => pre_ + "ndiamo" ;
    Cong Pres Pl P2 => pre_ + "ndiate" ;
    Cong Pres Pl P3 => pre_ + "ndano" ;
    Cong Imperf Sg P1 => pre_ + "ndessi" ; --# notpresent
    Cong Imperf Sg P2 => pre_ + "ndessi" ; --# notpresent
    Cong Imperf Sg P3 => pre_ + "ndesse" ; --# notpresent
    Cong Imperf Pl P1 => pre_ + "ndessimo" ; --# notpresent
    Cong Imperf Pl P2 => pre_ + "ndeste" ; --# notpresent
    Cong Imperf Pl P3 => pre_ + "ndessero" ; --# notpresent
    Cond Sg P1 => pre_ + "nderei" ; --# notpresent
    Cond Sg P2 => pre_ + "nderesti" ; --# notpresent
    Cond Sg P3 => pre_ + "nderebbe" ; --# notpresent
    Cond Pl P1 => pre_ + "nderemmo" ; --# notpresent
    Cond Pl P2 => pre_ + "ndereste" ; --# notpresent
    Cond Pl P3 => pre_ + "nderebbero" ; --# notpresent
    Imper SgP2 => pre_ + "ndi" ;
    Imper PlP1 => pre_ + "ndiamo" ;
    Imper PlP2 => pre_ + "ndete" ;
    Ger => pre_ + "ndendo" ;
    Part PresP Masc Sg => pre_ + "ndente" ;
    Part PresP Masc Pl => pre_ + "ndenti" ;
    Part PresP Fem Sg => pre_ + "ndente" ;
    Part PresP Fem Pl => pre_ + "ndenti" ;
    Part PassP Masc Sg => pre_ + "so" ;
    Part PassP Masc Pl => pre_ + "si" ;
    Part PassP Fem Sg => pre_ + "sa" ;
    Part PassP Fem Pl => pre_ + "se"
    }
  } ;

oper radere_71 : Str -> Verbo = \radere ->
  let ra_ = Predef.tk 4 radere in
 {s = table {
    Inf => ra_ + "dere" ;
    InfClit => ra_ + "der" ;
    Indi Pres Sg P1 => ra_ + "do" ;
    Indi Pres Sg P2 => ra_ + "di" ;
    Indi Pres Sg P3 => ra_ + "de" ;
    Indi Pres Pl P1 => ra_ + "diamo" ;
    Indi Pres Pl P2 => ra_ + "dete" ;
    Indi Pres Pl P3 => ra_ + "dono" ;
    Indi Imperf Sg P1 => ra_ + "devo" ; --# notpresent
    Indi Imperf Sg P2 => ra_ + "devi" ; --# notpresent
    Indi Imperf Sg P3 => ra_ + "deva" ; --# notpresent
    Indi Imperf Pl P1 => ra_ + "devamo" ; --# notpresent
    Indi Imperf Pl P2 => ra_ + "devate" ; --# notpresent
    Indi Imperf Pl P3 => ra_ + "devano" ; --# notpresent
    Pass Sg P1 => ra_ + "si" ; --# notpresent
    Pass Sg P2 => ra_ + "desti" ; --# notpresent
    Pass Sg P3 => ra_ + "se" ; --# notpresent
    Pass Pl P1 => ra_ + "demmo" ; --# notpresent
    Pass Pl P2 => ra_ + "deste" ; --# notpresent
    Pass Pl P3 => ra_ + "sero" ; --# notpresent
    Fut Sg P1 => ra_ + "derò" ; --# notpresent
    Fut Sg P2 => ra_ + "derai" ; --# notpresent
    Fut Sg P3 => ra_ + "derà" ; --# notpresent
    Fut Pl P1 => ra_ + "deremo" ; --# notpresent
    Fut Pl P2 => ra_ + "derete" ; --# notpresent
    Fut Pl P3 => ra_ + "deranno" ; --# notpresent
    Cong Pres Sg P1 => ra_ + "da" ;
    Cong Pres Sg P2 => ra_ + "da" ;
    Cong Pres Sg P3 => ra_ + "da" ;
    Cong Pres Pl P1 => ra_ + "diamo" ;
    Cong Pres Pl P2 => ra_ + "diate" ;
    Cong Pres Pl P3 => ra_ + "dano" ;
    Cong Imperf Sg P1 => ra_ + "dessi" ; --# notpresent
    Cong Imperf Sg P2 => ra_ + "dessi" ; --# notpresent
    Cong Imperf Sg P3 => ra_ + "desse" ; --# notpresent
    Cong Imperf Pl P1 => ra_ + "dessimo" ; --# notpresent
    Cong Imperf Pl P2 => ra_ + "deste" ; --# notpresent
    Cong Imperf Pl P3 => ra_ + "dessero" ; --# notpresent
    Cond Sg P1 => ra_ + "derei" ; --# notpresent
    Cond Sg P2 => ra_ + "deresti" ; --# notpresent
    Cond Sg P3 => ra_ + "derebbe" ; --# notpresent
    Cond Pl P1 => ra_ + "deremmo" ; --# notpresent
    Cond Pl P2 => ra_ + "dereste" ; --# notpresent
    Cond Pl P3 => ra_ + "derebbero" ; --# notpresent
    Imper SgP2 => ra_ + "di" ;
    Imper PlP1 => ra_ + "diamo" ;
    Imper PlP2 => ra_ + "dete" ;
    Ger => ra_ + "dendo" ;
    Part PresP Masc Sg => ra_ + "dente" ;
    Part PresP Masc Pl => ra_ + "denti" ;
    Part PresP Fem Sg => ra_ + "dente" ;
    Part PresP Fem Pl => ra_ + "denti" ;
    Part PassP Masc Sg => ra_ + "so" ;
    Part PassP Masc Pl => ra_ + "si" ;
    Part PassP Fem Sg => ra_ + "sa" ;
    Part PassP Fem Pl => ra_ + "se"
    }
  } ;

oper redigere_72 : Str -> Verbo = \redigere ->
  let red_ = Predef.tk 5 redigere in
 {s = table {
    Inf => red_ + "igere" ;
    InfClit => red_ + "iger" ;
    Indi Pres Sg P1 => red_ + "igo" ;
    Indi Pres Sg P2 => red_ + "igi" ;
    Indi Pres Sg P3 => red_ + "ige" ;
    Indi Pres Pl P1 => red_ + "igiamo" ;
    Indi Pres Pl P2 => red_ + "igete" ;
    Indi Pres Pl P3 => red_ + "igono" ;
    Indi Imperf Sg P1 => red_ + "igevo" ; --# notpresent
    Indi Imperf Sg P2 => red_ + "igevi" ; --# notpresent
    Indi Imperf Sg P3 => red_ + "igeva" ; --# notpresent
    Indi Imperf Pl P1 => red_ + "igevamo" ; --# notpresent
    Indi Imperf Pl P2 => red_ + "igevate" ; --# notpresent
    Indi Imperf Pl P3 => red_ + "igevano" ; --# notpresent
    Pass Sg P1 => red_ + "assi" ; --# notpresent
    Pass Sg P2 => red_ + "igesti" ; --# notpresent
    Pass Sg P3 => red_ + "asse" ; --# notpresent
    Pass Pl P1 => red_ + "igemmo" ; --# notpresent
    Pass Pl P2 => red_ + "igeste" ; --# notpresent
    Pass Pl P3 => red_ + "assero" ; --# notpresent
    Fut Sg P1 => red_ + "igerò" ; --# notpresent
    Fut Sg P2 => red_ + "igerai" ; --# notpresent
    Fut Sg P3 => red_ + "igerà" ; --# notpresent
    Fut Pl P1 => red_ + "igeremo" ; --# notpresent
    Fut Pl P2 => red_ + "igerete" ; --# notpresent
    Fut Pl P3 => red_ + "igeranno" ; --# notpresent
    Cong Pres Sg P1 => red_ + "iga" ;
    Cong Pres Sg P2 => red_ + "iga" ;
    Cong Pres Sg P3 => red_ + "iga" ;
    Cong Pres Pl P1 => red_ + "igiamo" ;
    Cong Pres Pl P2 => red_ + "igiate" ;
    Cong Pres Pl P3 => red_ + "igano" ;
    Cong Imperf Sg P1 => red_ + "igessi" ; --# notpresent
    Cong Imperf Sg P2 => red_ + "igessi" ; --# notpresent
    Cong Imperf Sg P3 => red_ + "igesse" ; --# notpresent
    Cong Imperf Pl P1 => red_ + "igessimo" ; --# notpresent
    Cong Imperf Pl P2 => red_ + "igeste" ; --# notpresent
    Cong Imperf Pl P3 => red_ + "igessero" ; --# notpresent
    Cond Sg P1 => red_ + "igerei" ; --# notpresent
    Cond Sg P2 => red_ + "igeresti" ; --# notpresent
    Cond Sg P3 => red_ + "igerebbe" ; --# notpresent
    Cond Pl P1 => red_ + "igeremmo" ; --# notpresent
    Cond Pl P2 => red_ + "igereste" ; --# notpresent
    Cond Pl P3 => red_ + "igerebbero" ; --# notpresent
    Imper SgP2 => red_ + "igi" ;
    Imper PlP1 => red_ + "igiamo" ;
    Imper PlP2 => red_ + "igete" ;
    Ger => red_ + "igendo" ;
    Part PresP Masc Sg => red_ + "igente" ;
    Part PresP Masc Pl => red_ + "igenti" ;
    Part PresP Fem Sg => red_ + "igente" ;
    Part PresP Fem Pl => red_ + "igenti" ;
    Part PassP Masc Sg => red_ + "atto" ;
    Part PassP Masc Pl => red_ + "atti" ;
    Part PassP Fem Sg => red_ + "atta" ;
    Part PassP Fem Pl => red_ + "atte"
    }
  } ;

oper redimere_73 : Str -> Verbo = \redimere ->
  let red_ = Predef.tk 5 redimere in
 {s = table {
    Inf => red_ + "imere" ;
    InfClit => red_ + "imer" ;
    Indi Pres Sg P1 => red_ + "imo" ;
    Indi Pres Sg P2 => red_ + "imi" ;
    Indi Pres Sg P3 => red_ + "ime" ;
    Indi Pres Pl P1 => red_ + "imiamo" ;
    Indi Pres Pl P2 => red_ + "imete" ;
    Indi Pres Pl P3 => red_ + "imono" ;
    Indi Imperf Sg P1 => red_ + "imevo" ; --# notpresent
    Indi Imperf Sg P2 => red_ + "imevi" ; --# notpresent
    Indi Imperf Sg P3 => red_ + "imeva" ; --# notpresent
    Indi Imperf Pl P1 => red_ + "imevamo" ; --# notpresent
    Indi Imperf Pl P2 => red_ + "imevate" ; --# notpresent
    Indi Imperf Pl P3 => red_ + "imevano" ; --# notpresent
    Pass Sg P1 => red_ + "ensi" ; --# notpresent
    Pass Sg P2 => red_ + "imesti" ; --# notpresent
    Pass Sg P3 => red_ + "ense" ; --# notpresent
    Pass Pl P1 => red_ + "imemmo" ; --# notpresent
    Pass Pl P2 => red_ + "imeste" ; --# notpresent
    Pass Pl P3 => red_ + "ensero" ; --# notpresent
    Fut Sg P1 => red_ + "imerò" ; --# notpresent
    Fut Sg P2 => red_ + "imerai" ; --# notpresent
    Fut Sg P3 => red_ + "imerà" ; --# notpresent
    Fut Pl P1 => red_ + "imeremo" ; --# notpresent
    Fut Pl P2 => red_ + "imerete" ; --# notpresent
    Fut Pl P3 => red_ + "imeranno" ; --# notpresent
    Cong Pres Sg P1 => red_ + "ima" ;
    Cong Pres Sg P2 => red_ + "ima" ;
    Cong Pres Sg P3 => red_ + "ima" ;
    Cong Pres Pl P1 => red_ + "imiamo" ;
    Cong Pres Pl P2 => red_ + "imiate" ;
    Cong Pres Pl P3 => red_ + "imano" ;
    Cong Imperf Sg P1 => red_ + "imessi" ; --# notpresent
    Cong Imperf Sg P2 => red_ + "imessi" ; --# notpresent
    Cong Imperf Sg P3 => red_ + "imesse" ; --# notpresent
    Cong Imperf Pl P1 => red_ + "imessimo" ; --# notpresent
    Cong Imperf Pl P2 => red_ + "imeste" ; --# notpresent
    Cong Imperf Pl P3 => red_ + "imessero" ; --# notpresent
    Cond Sg P1 => red_ + "imerei" ; --# notpresent
    Cond Sg P2 => red_ + "imeresti" ; --# notpresent
    Cond Sg P3 => red_ + "imerebbe" ; --# notpresent
    Cond Pl P1 => red_ + "imeremmo" ; --# notpresent
    Cond Pl P2 => red_ + "imereste" ; --# notpresent
    Cond Pl P3 => red_ + "imerebbero" ; --# notpresent
    Imper SgP2 => red_ + "imi" ;
    Imper PlP1 => red_ + "imiamo" ;
    Imper PlP2 => red_ + "imete" ;
    Ger => red_ + "imendo" ;
    Part PresP Masc Sg => red_ + "imente" ;
    Part PresP Masc Pl => red_ + "imenti" ;
    Part PresP Fem Sg => red_ + "imente" ;
    Part PresP Fem Pl => red_ + "imenti" ;
    Part PassP Masc Sg => red_ + "ento" ;
    Part PassP Masc Pl => red_ + "enti" ;
    Part PassP Fem Sg => red_ + "enta" ;
    Part PassP Fem Pl => red_ + "ente"
    }
  } ;

oper ridere_74 : Str -> Verbo = \ridere ->
  let ri_ = Predef.tk 4 ridere in
 {s = table {
    Inf => ri_ + "dere" ;
    InfClit => ri_ + "der" ;
    Indi Pres Sg P1 => ri_ + "do" ;
    Indi Pres Sg P2 => ri_ + "di" ;
    Indi Pres Sg P3 => ri_ + "de" ;
    Indi Pres Pl P1 => ri_ + "diamo" ;
    Indi Pres Pl P2 => ri_ + "dete" ;
    Indi Pres Pl P3 => ri_ + "dono" ;
    Indi Imperf Sg P1 => ri_ + "devo" ; --# notpresent
    Indi Imperf Sg P2 => ri_ + "devi" ; --# notpresent
    Indi Imperf Sg P3 => ri_ + "deva" ; --# notpresent
    Indi Imperf Pl P1 => ri_ + "devamo" ; --# notpresent
    Indi Imperf Pl P2 => ri_ + "devate" ; --# notpresent
    Indi Imperf Pl P3 => ri_ + "devano" ; --# notpresent
    Pass Sg P1 => ri_ + "si" ; --# notpresent
    Pass Sg P2 => ri_ + "desti" ; --# notpresent
    Pass Sg P3 => ri_ + "se" ; --# notpresent
    Pass Pl P1 => ri_ + "demmo" ; --# notpresent
    Pass Pl P2 => ri_ + "deste" ; --# notpresent
    Pass Pl P3 => ri_ + "sero" ; --# notpresent
    Fut Sg P1 => ri_ + "derò" ; --# notpresent
    Fut Sg P2 => ri_ + "derai" ; --# notpresent
    Fut Sg P3 => ri_ + "derà" ; --# notpresent
    Fut Pl P1 => ri_ + "deremo" ; --# notpresent
    Fut Pl P2 => ri_ + "derete" ; --# notpresent
    Fut Pl P3 => ri_ + "deranno" ; --# notpresent
    Cong Pres Sg P1 => ri_ + "da" ;
    Cong Pres Sg P2 => ri_ + "da" ;
    Cong Pres Sg P3 => ri_ + "da" ;
    Cong Pres Pl P1 => ri_ + "diamo" ;
    Cong Pres Pl P2 => ri_ + "diate" ;
    Cong Pres Pl P3 => ri_ + "dano" ;
    Cong Imperf Sg P1 => ri_ + "dessi" ; --# notpresent
    Cong Imperf Sg P2 => ri_ + "dessi" ; --# notpresent
    Cong Imperf Sg P3 => ri_ + "desse" ; --# notpresent
    Cong Imperf Pl P1 => ri_ + "dessimo" ; --# notpresent
    Cong Imperf Pl P2 => ri_ + "deste" ; --# notpresent
    Cong Imperf Pl P3 => ri_ + "dessero" ; --# notpresent
    Cond Sg P1 => ri_ + "derei" ; --# notpresent
    Cond Sg P2 => ri_ + "deresti" ; --# notpresent
    Cond Sg P3 => ri_ + "derebbe" ; --# notpresent
    Cond Pl P1 => ri_ + "deremmo" ; --# notpresent
    Cond Pl P2 => ri_ + "dereste" ; --# notpresent
    Cond Pl P3 => ri_ + "derebbero" ; --# notpresent
    Imper SgP2 => ri_ + "di" ;
    Imper PlP1 => ri_ + "diamo" ;
    Imper PlP2 => ri_ + "dete" ;
    Ger => ri_ + "dendo" ;
    Part PresP Masc Sg => ri_ + "dente" ;
    Part PresP Masc Pl => ri_ + "denti" ;
    Part PresP Fem Sg => ri_ + "dente" ;
    Part PresP Fem Pl => ri_ + "denti" ;
    Part PassP Masc Sg => ri_ + "so" ;
    Part PassP Masc Pl => ri_ + "si" ;
    Part PassP Fem Sg => ri_ + "sa" ;
    Part PassP Fem Pl => ri_ + "se"
    }
  } ;

oper rimanere_75 : Str -> Verbo = \rimanere ->
  let rima_ = Predef.tk 4 rimanere in
 {s = table {
    Inf => rima_ + "nere" ;
    InfClit => rima_ + "ner" ;
    Indi Pres Sg P1 => rima_ + "ngo" ;
    Indi Pres Sg P2 => rima_ + "ni" ;
    Indi Pres Sg P3 => rima_ + "ne" ;
    Indi Pres Pl P1 => rima_ + "niamo" ;
    Indi Pres Pl P2 => rima_ + "nete" ;
    Indi Pres Pl P3 => rima_ + "ngono" ;
    Indi Imperf Sg P1 => rima_ + "nevo" ; --# notpresent
    Indi Imperf Sg P2 => rima_ + "nevi" ; --# notpresent
    Indi Imperf Sg P3 => rima_ + "neva" ; --# notpresent
    Indi Imperf Pl P1 => rima_ + "nevamo" ; --# notpresent
    Indi Imperf Pl P2 => rima_ + "nevate" ; --# notpresent
    Indi Imperf Pl P3 => rima_ + "nevano" ; --# notpresent
    Pass Sg P1 => rima_ + "si" ; --# notpresent
    Pass Sg P2 => rima_ + "nesti" ; --# notpresent
    Pass Sg P3 => rima_ + "se" ; --# notpresent
    Pass Pl P1 => rima_ + "nemmo" ; --# notpresent
    Pass Pl P2 => rima_ + "neste" ; --# notpresent
    Pass Pl P3 => rima_ + "sero" ; --# notpresent
    Fut Sg P1 => rima_ + "rrò" ; --# notpresent
    Fut Sg P2 => rima_ + "rrai" ; --# notpresent
    Fut Sg P3 => rima_ + "rrà" ; --# notpresent
    Fut Pl P1 => rima_ + "rremo" ; --# notpresent
    Fut Pl P2 => rima_ + "rrete" ; --# notpresent
    Fut Pl P3 => rima_ + "rranno" ; --# notpresent
    Cong Pres Sg P1 => rima_ + "nga" ;
    Cong Pres Sg P2 => rima_ + "nga" ;
    Cong Pres Sg P3 => rima_ + "nga" ;
    Cong Pres Pl P1 => rima_ + "niamo" ;
    Cong Pres Pl P2 => rima_ + "niate" ;
    Cong Pres Pl P3 => rima_ + "ngano" ;
    Cong Imperf Sg P1 => rima_ + "nessi" ; --# notpresent
    Cong Imperf Sg P2 => rima_ + "nessi" ; --# notpresent
    Cong Imperf Sg P3 => rima_ + "nesse" ; --# notpresent
    Cong Imperf Pl P1 => rima_ + "nessimo" ; --# notpresent
    Cong Imperf Pl P2 => rima_ + "neste" ; --# notpresent
    Cong Imperf Pl P3 => rima_ + "nessero" ; --# notpresent
    Cond Sg P1 => rima_ + "rrei" ; --# notpresent
    Cond Sg P2 => rima_ + "rresti" ; --# notpresent
    Cond Sg P3 => rima_ + "rrebbe" ; --# notpresent
    Cond Pl P1 => rima_ + "rremmo" ; --# notpresent
    Cond Pl P2 => rima_ + "rreste" ; --# notpresent
    Cond Pl P3 => rima_ + "rrebbero" ; --# notpresent
    Imper SgP2 => rima_ + "ni" ;
    Imper PlP1 => rima_ + "niamo" ;
    Imper PlP2 => rima_ + "nete" ;
    Ger => rima_ + "nendo" ;
    Part PresP Masc Sg => rima_ + "nente" ;
    Part PresP Masc Pl => rima_ + "nenti" ;
    Part PresP Fem Sg => rima_ + "nente" ;
    Part PresP Fem Pl => rima_ + "nenti" ;
    Part PassP Masc Sg => rima_ + "sto" ;
    Part PassP Masc Pl => rima_ + "sti" ;
    Part PassP Fem Sg => rima_ + "sta" ;
    Part PassP Fem Pl => rima_ + "ste"
    }
  } ;

oper rispondere_76 : Str -> Verbo = \rispondere ->
  let rispo_ = Predef.tk 5 rispondere in
 {s = table {
    Inf => rispo_ + "ndere" ;
    InfClit => rispo_ + "nder" ;
    Indi Pres Sg P1 => rispo_ + "ndo" ;
    Indi Pres Sg P2 => rispo_ + "ndi" ;
    Indi Pres Sg P3 => rispo_ + "nde" ;
    Indi Pres Pl P1 => rispo_ + "ndiamo" ;
    Indi Pres Pl P2 => rispo_ + "ndete" ;
    Indi Pres Pl P3 => rispo_ + "ndono" ;
    Indi Imperf Sg P1 => rispo_ + "ndevo" ; --# notpresent
    Indi Imperf Sg P2 => rispo_ + "ndevi" ; --# notpresent
    Indi Imperf Sg P3 => rispo_ + "ndeva" ; --# notpresent
    Indi Imperf Pl P1 => rispo_ + "ndevamo" ; --# notpresent
    Indi Imperf Pl P2 => rispo_ + "ndevate" ; --# notpresent
    Indi Imperf Pl P3 => rispo_ + "ndevano" ; --# notpresent
    Pass Sg P1 => rispo_ + "si" ; --# notpresent
    Pass Sg P2 => rispo_ + "ndesti" ; --# notpresent
    Pass Sg P3 => rispo_ + "se" ; --# notpresent
    Pass Pl P1 => rispo_ + "ndemmo" ; --# notpresent
    Pass Pl P2 => rispo_ + "ndeste" ; --# notpresent
    Pass Pl P3 => rispo_ + "sero" ; --# notpresent
    Fut Sg P1 => rispo_ + "nderò" ; --# notpresent
    Fut Sg P2 => rispo_ + "nderai" ; --# notpresent
    Fut Sg P3 => rispo_ + "nderà" ; --# notpresent
    Fut Pl P1 => rispo_ + "nderemo" ; --# notpresent
    Fut Pl P2 => rispo_ + "nderete" ; --# notpresent
    Fut Pl P3 => rispo_ + "nderanno" ; --# notpresent
    Cong Pres Sg P1 => rispo_ + "nda" ;
    Cong Pres Sg P2 => rispo_ + "nda" ;
    Cong Pres Sg P3 => rispo_ + "nda" ;
    Cong Pres Pl P1 => rispo_ + "ndiamo" ;
    Cong Pres Pl P2 => rispo_ + "ndiate" ;
    Cong Pres Pl P3 => rispo_ + "ndano" ;
    Cong Imperf Sg P1 => rispo_ + "ndessi" ; --# notpresent
    Cong Imperf Sg P2 => rispo_ + "ndessi" ; --# notpresent
    Cong Imperf Sg P3 => rispo_ + "ndesse" ; --# notpresent
    Cong Imperf Pl P1 => rispo_ + "ndessimo" ; --# notpresent
    Cong Imperf Pl P2 => rispo_ + "ndeste" ; --# notpresent
    Cong Imperf Pl P3 => rispo_ + "ndessero" ; --# notpresent
    Cond Sg P1 => rispo_ + "nderei" ; --# notpresent
    Cond Sg P2 => rispo_ + "nderesti" ; --# notpresent
    Cond Sg P3 => rispo_ + "nderebbe" ; --# notpresent
    Cond Pl P1 => rispo_ + "nderemmo" ; --# notpresent
    Cond Pl P2 => rispo_ + "ndereste" ; --# notpresent
    Cond Pl P3 => rispo_ + "nderebbero" ; --# notpresent
    Imper SgP2 => rispo_ + "ndi" ;
    Imper PlP1 => rispo_ + "ndiamo" ;
    Imper PlP2 => rispo_ + "ndete" ;
    Ger => rispo_ + "ndendo" ;
    Part PresP Masc Sg => rispo_ + "ndente" ;
    Part PresP Masc Pl => rispo_ + "ndenti" ;
    Part PresP Fem Sg => rispo_ + "ndente" ;
    Part PresP Fem Pl => rispo_ + "ndenti" ;
    Part PassP Masc Sg => rispo_ + "sto" ;
    Part PassP Masc Pl => rispo_ + "sti" ;
    Part PassP Fem Sg => rispo_ + "sta" ;
    Part PassP Fem Pl => rispo_ + "ste"
    }
  } ;

oper rompere_77 : Str -> Verbo = \roompere ->
  let ro_ = Predef.tk 6 roompere in
 {s = table {
    Inf => ro_ + "ompere" ;
    InfClit => ro_ + "omper" ;
    Indi Pres Sg P1 => ro_ + "ompo" ;
    Indi Pres Sg P2 => ro_ + "ompi" ;
    Indi Pres Sg P3 => ro_ + "ompe" ;
    Indi Pres Pl P1 => ro_ + "ompiamo" ;
    Indi Pres Pl P2 => ro_ + "ompete" ;
    Indi Pres Pl P3 => ro_ + "ompono" ;
    Indi Imperf Sg P1 => ro_ + "ompevo" ; --# notpresent
    Indi Imperf Sg P2 => ro_ + "ompevi" ; --# notpresent
    Indi Imperf Sg P3 => ro_ + "ompeva" ; --# notpresent
    Indi Imperf Pl P1 => ro_ + "ompevamo" ; --# notpresent
    Indi Imperf Pl P2 => ro_ + "ompevate" ; --# notpresent
    Indi Imperf Pl P3 => ro_ + "ompevano" ; --# notpresent
    Pass Sg P1 => ro_ + "uppi" ; --# notpresent
    Pass Sg P2 => ro_ + "ompesti" ; --# notpresent
    Pass Sg P3 => ro_ + "uppe" ; --# notpresent
    Pass Pl P1 => ro_ + "ompemmo" ; --# notpresent
    Pass Pl P2 => ro_ + "ompeste" ; --# notpresent
    Pass Pl P3 => ro_ + "uppero" ; --# notpresent
    Fut Sg P1 => ro_ + "omperò" ; --# notpresent
    Fut Sg P2 => ro_ + "omperai" ; --# notpresent
    Fut Sg P3 => ro_ + "omperà" ; --# notpresent
    Fut Pl P1 => ro_ + "omperemo" ; --# notpresent
    Fut Pl P2 => ro_ + "omperete" ; --# notpresent
    Fut Pl P3 => ro_ + "omperanno" ; --# notpresent
    Cong Pres Sg P1 => ro_ + "ompa" ;
    Cong Pres Sg P2 => ro_ + "ompa" ;
    Cong Pres Sg P3 => ro_ + "ompa" ;
    Cong Pres Pl P1 => ro_ + "ompiamo" ;
    Cong Pres Pl P2 => ro_ + "ompiate" ;
    Cong Pres Pl P3 => ro_ + "ompano" ;
    Cong Imperf Sg P1 => ro_ + "ompessi" ; --# notpresent
    Cong Imperf Sg P2 => ro_ + "ompessi" ; --# notpresent
    Cong Imperf Sg P3 => ro_ + "ompesse" ; --# notpresent
    Cong Imperf Pl P1 => ro_ + "ompessimo" ; --# notpresent
    Cong Imperf Pl P2 => ro_ + "ompeste" ; --# notpresent
    Cong Imperf Pl P3 => ro_ + "ompessero" ; --# notpresent
    Cond Sg P1 => ro_ + "omperei" ; --# notpresent
    Cond Sg P2 => ro_ + "omperesti" ; --# notpresent
    Cond Sg P3 => ro_ + "omperebbe" ; --# notpresent
    Cond Pl P1 => ro_ + "omperemmo" ; --# notpresent
    Cond Pl P2 => ro_ + "ompereste" ; --# notpresent
    Cond Pl P3 => ro_ + "omperebbero" ; --# notpresent
    Imper SgP2 => ro_ + "ompi" ;
    Imper PlP1 => ro_ + "ompiamo" ;
    Imper PlP2 => ro_ + "ompete" ;
    Ger => ro_ + "ompendo" ;
    Part PresP Masc Sg => ro_ + "ompente" ;
    Part PresP Masc Pl => ro_ + "ompenti" ;
    Part PresP Fem Sg => ro_ + "ompente" ;
    Part PresP Fem Pl => ro_ + "ompenti" ;
    Part PassP Masc Sg => ro_ + "otto" ;
    Part PassP Masc Pl => ro_ + "otti" ;
    Part PassP Fem Sg => ro_ + "otta" ;
    Part PassP Fem Pl => ro_ + "otte"
    }
  } ;

oper sapere_78 : Str -> Verbo = \sapere ->
  let s_ = Predef.tk 5 sapere in
 {s = table {
    Inf => s_ + "apere" ;
    InfClit => s_ + "aper" ;
    Indi Pres Sg P1 => s_ + "o" ;
    Indi Pres Sg P2 => s_ + "ai" ;
    Indi Pres Sg P3 => s_ + "a" ;
    Indi Pres Pl P1 => s_ + "appiamo" ;
    Indi Pres Pl P2 => s_ + "apete" ;
    Indi Pres Pl P3 => s_ + "anno" ;
    Indi Imperf Sg P1 => s_ + "apevo" ; --# notpresent
    Indi Imperf Sg P2 => s_ + "apevi" ; --# notpresent
    Indi Imperf Sg P3 => s_ + "apeva" ; --# notpresent
    Indi Imperf Pl P1 => s_ + "apevamo" ; --# notpresent
    Indi Imperf Pl P2 => s_ + "apevate" ; --# notpresent
    Indi Imperf Pl P3 => s_ + "apevano" ; --# notpresent
    Pass Sg P1 => s_ + "eppi" ; --# notpresent
    Pass Sg P2 => s_ + "apesti" ; --# notpresent
    Pass Sg P3 => s_ + "eppe" ; --# notpresent
    Pass Pl P1 => s_ + "apemmo" ; --# notpresent
    Pass Pl P2 => s_ + "apeste" ; --# notpresent
    Pass Pl P3 => s_ + "eppero" ; --# notpresent
    Fut Sg P1 => s_ + "aprò" ; --# notpresent
    Fut Sg P2 => s_ + "aprai" ; --# notpresent
    Fut Sg P3 => s_ + "aprà" ; --# notpresent
    Fut Pl P1 => s_ + "apremo" ; --# notpresent
    Fut Pl P2 => s_ + "aprete" ; --# notpresent
    Fut Pl P3 => s_ + "apranno" ; --# notpresent
    Cong Pres Sg P1 => s_ + "appia" ;
    Cong Pres Sg P2 => s_ + "appia" ;
    Cong Pres Sg P3 => s_ + "appia" ;
    Cong Pres Pl P1 => s_ + "appiamo" ;
    Cong Pres Pl P2 => s_ + "appiate" ;
    Cong Pres Pl P3 => s_ + "appiano" ;
    Cong Imperf Sg P1 => s_ + "apessi" ; --# notpresent
    Cong Imperf Sg P2 => s_ + "apessi" ; --# notpresent
    Cong Imperf Sg P3 => s_ + "apesse" ; --# notpresent
    Cong Imperf Pl P1 => s_ + "apessimo" ; --# notpresent
    Cong Imperf Pl P2 => s_ + "apeste" ; --# notpresent
    Cong Imperf Pl P3 => s_ + "apessero" ; --# notpresent
    Cond Sg P1 => s_ + "aprei" ; --# notpresent
    Cond Sg P2 => s_ + "apresti" ; --# notpresent
    Cond Sg P3 => s_ + "aprebbe" ; --# notpresent
    Cond Pl P1 => s_ + "apremmo" ; --# notpresent
    Cond Pl P2 => s_ + "apreste" ; --# notpresent
    Cond Pl P3 => s_ + "aprebbero" ; --# notpresent
    Imper SgP2 => s_ + "appi" ;
    Imper PlP1 => s_ + "appiamo" ;
    Imper PlP2 => s_ + "appiate" ;
    Ger => s_ + "apendo" ;
    Part PresP Masc Sg => variants {} ;
    Part PresP Masc Pl => variants {} ;
    Part PresP Fem Sg => variants {} ;
    Part PresP Fem Pl => variants {} ;
    Part PassP Masc Sg => s_ + "aputo" ;
    Part PassP Masc Pl => s_ + "aputi" ;
    Part PassP Fem Sg => s_ + "aputa" ;
    Part PassP Fem Pl => s_ + "apute"
    }
  } ;

oper scegliere_79 : Str -> Verbo = \scegliere ->
  let sce_ = Predef.tk 6 scegliere in
 {s = table {
    Inf => sce_ + "gliere" ;
    InfClit => sce_ + "glier" ;
    Indi Pres Sg P1 => sce_ + "lgo" ;
    Indi Pres Sg P2 => sce_ + "gli" ;
    Indi Pres Sg P3 => sce_ + "glie" ;
    Indi Pres Pl P1 => sce_ + "gliamo" ;
    Indi Pres Pl P2 => sce_ + "gliete" ;
    Indi Pres Pl P3 => sce_ + "lgono" ;
    Indi Imperf Sg P1 => sce_ + "glievo" ; --# notpresent
    Indi Imperf Sg P2 => sce_ + "glievi" ; --# notpresent
    Indi Imperf Sg P3 => sce_ + "glieva" ; --# notpresent
    Indi Imperf Pl P1 => sce_ + "glievamo" ; --# notpresent
    Indi Imperf Pl P2 => sce_ + "glievate" ; --# notpresent
    Indi Imperf Pl P3 => sce_ + "glievano" ; --# notpresent
    Pass Sg P1 => sce_ + "lsi" ; --# notpresent
    Pass Sg P2 => sce_ + "gliesti" ; --# notpresent
    Pass Sg P3 => sce_ + "lse" ; --# notpresent
    Pass Pl P1 => sce_ + "gliemmo" ; --# notpresent
    Pass Pl P2 => sce_ + "glieste" ; --# notpresent
    Pass Pl P3 => sce_ + "lsero" ; --# notpresent
    Fut Sg P1 => sce_ + "glierò" ; --# notpresent
    Fut Sg P2 => sce_ + "glierai" ; --# notpresent
    Fut Sg P3 => sce_ + "glierà" ; --# notpresent
    Fut Pl P1 => sce_ + "glieremo" ; --# notpresent
    Fut Pl P2 => sce_ + "glierete" ; --# notpresent
    Fut Pl P3 => sce_ + "glieranno" ; --# notpresent
    Cong Pres Sg P1 => sce_ + "lga" ;
    Cong Pres Sg P2 => sce_ + "lga" ;
    Cong Pres Sg P3 => sce_ + "lga" ;
    Cong Pres Pl P1 => sce_ + "gliamo" ;
    Cong Pres Pl P2 => sce_ + "gliate" ;
    Cong Pres Pl P3 => sce_ + "lgano" ;
    Cong Imperf Sg P1 => sce_ + "gliessi" ; --# notpresent
    Cong Imperf Sg P2 => sce_ + "gliessi" ; --# notpresent
    Cong Imperf Sg P3 => sce_ + "gliesse" ; --# notpresent
    Cong Imperf Pl P1 => sce_ + "gliessimo" ; --# notpresent
    Cong Imperf Pl P2 => sce_ + "glieste" ; --# notpresent
    Cong Imperf Pl P3 => sce_ + "gliessero" ; --# notpresent
    Cond Sg P1 => sce_ + "glierei" ; --# notpresent
    Cond Sg P2 => sce_ + "glieresti" ; --# notpresent
    Cond Sg P3 => sce_ + "glierebbe" ; --# notpresent
    Cond Pl P1 => sce_ + "glieremmo" ; --# notpresent
    Cond Pl P2 => sce_ + "gliereste" ; --# notpresent
    Cond Pl P3 => sce_ + "glierebbero" ; --# notpresent
    Imper SgP2 => sce_ + "gli" ;
    Imper PlP1 => sce_ + "gliamo" ;
    Imper PlP2 => sce_ + "gliete" ;
    Ger => sce_ + "gliendo" ;
    Part PresP Masc Sg => sce_ + "gliente" ;
    Part PresP Masc Pl => sce_ + "glienti" ;
    Part PresP Fem Sg => sce_ + "gliente" ;
    Part PresP Fem Pl => sce_ + "glienti" ;
    Part PassP Masc Sg => sce_ + "lto" ;
    Part PassP Masc Pl => sce_ + "lti" ;
    Part PassP Fem Sg => sce_ + "lta" ;
    Part PassP Fem Pl => sce_ + "lte"
    }
  } ;

oper scendere_80 : Str -> Verbo = \scendere ->
  let sce_ = Predef.tk 5 scendere in
 {s = table {
    Inf => sce_ + "ndere" ;
    InfClit => sce_ + "nder" ;
    Indi Pres Sg P1 => sce_ + "ndo" ;
    Indi Pres Sg P2 => sce_ + "ndi" ;
    Indi Pres Sg P3 => sce_ + "nde" ;
    Indi Pres Pl P1 => sce_ + "ndiamo" ;
    Indi Pres Pl P2 => sce_ + "ndete" ;
    Indi Pres Pl P3 => sce_ + "ndono" ;
    Indi Imperf Sg P1 => sce_ + "ndevo" ; --# notpresent
    Indi Imperf Sg P2 => sce_ + "ndevi" ; --# notpresent
    Indi Imperf Sg P3 => sce_ + "ndeva" ; --# notpresent
    Indi Imperf Pl P1 => sce_ + "ndevamo" ; --# notpresent
    Indi Imperf Pl P2 => sce_ + "ndevate" ; --# notpresent
    Indi Imperf Pl P3 => sce_ + "ndevano" ; --# notpresent
    Pass Sg P1 => sce_ + "si" ; --# notpresent
    Pass Sg P2 => sce_ + "ndesti" ; --# notpresent
    Pass Sg P3 => sce_ + "se" ; --# notpresent
    Pass Pl P1 => sce_ + "ndemmo" ; --# notpresent
    Pass Pl P2 => sce_ + "ndeste" ; --# notpresent
    Pass Pl P3 => sce_ + "sero" ; --# notpresent
    Fut Sg P1 => sce_ + "nderò" ; --# notpresent
    Fut Sg P2 => sce_ + "nderai" ; --# notpresent
    Fut Sg P3 => sce_ + "nderà" ; --# notpresent
    Fut Pl P1 => sce_ + "nderemo" ; --# notpresent
    Fut Pl P2 => sce_ + "nderete" ; --# notpresent
    Fut Pl P3 => sce_ + "nderanno" ; --# notpresent
    Cong Pres Sg P1 => sce_ + "nda" ;
    Cong Pres Sg P2 => sce_ + "nda" ;
    Cong Pres Sg P3 => sce_ + "nda" ;
    Cong Pres Pl P1 => sce_ + "ndiamo" ;
    Cong Pres Pl P2 => sce_ + "ndiate" ;
    Cong Pres Pl P3 => sce_ + "ndano" ;
    Cong Imperf Sg P1 => sce_ + "ndessi" ; --# notpresent
    Cong Imperf Sg P2 => sce_ + "ndessi" ; --# notpresent
    Cong Imperf Sg P3 => sce_ + "ndesse" ; --# notpresent
    Cong Imperf Pl P1 => sce_ + "ndessimo" ; --# notpresent
    Cong Imperf Pl P2 => sce_ + "ndeste" ; --# notpresent
    Cong Imperf Pl P3 => sce_ + "ndessero" ; --# notpresent
    Cond Sg P1 => sce_ + "nderei" ; --# notpresent
    Cond Sg P2 => sce_ + "nderesti" ; --# notpresent
    Cond Sg P3 => sce_ + "nderebbe" ; --# notpresent
    Cond Pl P1 => sce_ + "nderemmo" ; --# notpresent
    Cond Pl P2 => sce_ + "ndereste" ; --# notpresent
    Cond Pl P3 => sce_ + "nderebbero" ; --# notpresent
    Imper SgP2 => sce_ + "ndi" ;
    Imper PlP1 => sce_ + "ndiamo" ;
    Imper PlP2 => sce_ + "ndete" ;
    Ger => sce_ + "ndendo" ;
    Part PresP Masc Sg => sce_ + "ndente" ;
    Part PresP Masc Pl => sce_ + "ndenti" ;
    Part PresP Fem Sg => sce_ + "ndente" ;
    Part PresP Fem Pl => sce_ + "ndenti" ;
    Part PassP Masc Sg => sce_ + "so" ;
    Part PassP Masc Pl => sce_ + "si" ;
    Part PassP Fem Sg => sce_ + "sa" ;
    Part PassP Fem Pl => sce_ + "se"
    }
  } ;

oper scindere_81 : Str -> Verbo = \scindere ->
  let sci_ = Predef.tk 5 scindere in
 {s = table {
    Inf => sci_ + "ndere" ;
    InfClit => sci_ + "nder" ;
    Indi Pres Sg P1 => sci_ + "ndo" ;
    Indi Pres Sg P2 => sci_ + "ndi" ;
    Indi Pres Sg P3 => sci_ + "nde" ;
    Indi Pres Pl P1 => sci_ + "ndiamo" ;
    Indi Pres Pl P2 => sci_ + "ndete" ;
    Indi Pres Pl P3 => sci_ + "ndono" ;
    Indi Imperf Sg P1 => sci_ + "ndevo" ; --# notpresent
    Indi Imperf Sg P2 => sci_ + "ndevi" ; --# notpresent
    Indi Imperf Sg P3 => sci_ + "ndeva" ; --# notpresent
    Indi Imperf Pl P1 => sci_ + "ndevamo" ; --# notpresent
    Indi Imperf Pl P2 => sci_ + "ndevate" ; --# notpresent
    Indi Imperf Pl P3 => sci_ + "ndevano" ; --# notpresent
    Pass Sg P1 => sci_ + "ssi" ; --# notpresent
    Pass Sg P2 => sci_ + "ndesti" ; --# notpresent
    Pass Sg P3 => sci_ + "sse" ; --# notpresent
    Pass Pl P1 => sci_ + "ndemmo" ; --# notpresent
    Pass Pl P2 => sci_ + "ndeste" ; --# notpresent
    Pass Pl P3 => sci_ + "ssero" ; --# notpresent
    Fut Sg P1 => sci_ + "nderò" ; --# notpresent
    Fut Sg P2 => sci_ + "nderai" ; --# notpresent
    Fut Sg P3 => sci_ + "nderà" ; --# notpresent
    Fut Pl P1 => sci_ + "nderemo" ; --# notpresent
    Fut Pl P2 => sci_ + "nderete" ; --# notpresent
    Fut Pl P3 => sci_ + "nderanno" ; --# notpresent
    Cong Pres Sg P1 => sci_ + "nda" ;
    Cong Pres Sg P2 => sci_ + "nda" ;
    Cong Pres Sg P3 => sci_ + "nda" ;
    Cong Pres Pl P1 => sci_ + "ndiamo" ;
    Cong Pres Pl P2 => sci_ + "ndiate" ;
    Cong Pres Pl P3 => sci_ + "ndano" ;
    Cong Imperf Sg P1 => sci_ + "ndessi" ; --# notpresent
    Cong Imperf Sg P2 => sci_ + "ndessi" ; --# notpresent
    Cong Imperf Sg P3 => sci_ + "ndesse" ; --# notpresent
    Cong Imperf Pl P1 => sci_ + "ndessimo" ; --# notpresent
    Cong Imperf Pl P2 => sci_ + "ndeste" ; --# notpresent
    Cong Imperf Pl P3 => sci_ + "ndessero" ; --# notpresent
    Cond Sg P1 => sci_ + "nderei" ; --# notpresent
    Cond Sg P2 => sci_ + "nderesti" ; --# notpresent
    Cond Sg P3 => sci_ + "nderebbe" ; --# notpresent
    Cond Pl P1 => sci_ + "nderemmo" ; --# notpresent
    Cond Pl P2 => sci_ + "ndereste" ; --# notpresent
    Cond Pl P3 => sci_ + "nderebbero" ; --# notpresent
    Imper SgP2 => sci_ + "ndi" ;
    Imper PlP1 => sci_ + "ndiamo" ;
    Imper PlP2 => sci_ + "ndete" ;
    Ger => sci_ + "ndendo" ;
    Part PresP Masc Sg => sci_ + "ndente" ;
    Part PresP Masc Pl => sci_ + "ndenti" ;
    Part PresP Fem Sg => sci_ + "ndente" ;
    Part PresP Fem Pl => sci_ + "ndenti" ;
    Part PassP Masc Sg => sci_ + "sso" ;
    Part PassP Masc Pl => sci_ + "ssi" ;
    Part PassP Fem Sg => sci_ + "ssa" ;
    Part PassP Fem Pl => sci_ + "sse"
    }
  } ;

oper scrivere_82 : Str -> Verbo = \scrivere ->
  let scri_ = Predef.tk 4 scrivere in
 {s = table {
    Inf => scri_ + "vere" ;
    InfClit => scri_ + "ver" ;
    Indi Pres Sg P1 => scri_ + "vo" ;
    Indi Pres Sg P2 => scri_ + "vi" ;
    Indi Pres Sg P3 => scri_ + "ve" ;
    Indi Pres Pl P1 => scri_ + "viamo" ;
    Indi Pres Pl P2 => scri_ + "vete" ;
    Indi Pres Pl P3 => scri_ + "vono" ;
    Indi Imperf Sg P1 => scri_ + "vevo" ; --# notpresent
    Indi Imperf Sg P2 => scri_ + "vevi" ; --# notpresent
    Indi Imperf Sg P3 => scri_ + "veva" ; --# notpresent
    Indi Imperf Pl P1 => scri_ + "vevamo" ; --# notpresent
    Indi Imperf Pl P2 => scri_ + "vevate" ; --# notpresent
    Indi Imperf Pl P3 => scri_ + "vevano" ; --# notpresent
    Pass Sg P1 => scri_ + "ssi" ; --# notpresent
    Pass Sg P2 => scri_ + "vesti" ; --# notpresent
    Pass Sg P3 => scri_ + "sse" ; --# notpresent
    Pass Pl P1 => scri_ + "vemmo" ; --# notpresent
    Pass Pl P2 => scri_ + "veste" ; --# notpresent
    Pass Pl P3 => scri_ + "ssero" ; --# notpresent
    Fut Sg P1 => scri_ + "verò" ; --# notpresent
    Fut Sg P2 => scri_ + "verai" ; --# notpresent
    Fut Sg P3 => scri_ + "verà" ; --# notpresent
    Fut Pl P1 => scri_ + "veremo" ; --# notpresent
    Fut Pl P2 => scri_ + "verete" ; --# notpresent
    Fut Pl P3 => scri_ + "veranno" ; --# notpresent
    Cong Pres Sg P1 => scri_ + "va" ;
    Cong Pres Sg P2 => scri_ + "va" ;
    Cong Pres Sg P3 => scri_ + "va" ;
    Cong Pres Pl P1 => scri_ + "viamo" ;
    Cong Pres Pl P2 => scri_ + "viate" ;
    Cong Pres Pl P3 => scri_ + "vano" ;
    Cong Imperf Sg P1 => scri_ + "vessi" ; --# notpresent
    Cong Imperf Sg P2 => scri_ + "vessi" ; --# notpresent
    Cong Imperf Sg P3 => scri_ + "vesse" ; --# notpresent
    Cong Imperf Pl P1 => scri_ + "vessimo" ; --# notpresent
    Cong Imperf Pl P2 => scri_ + "veste" ; --# notpresent
    Cong Imperf Pl P3 => scri_ + "vessero" ; --# notpresent
    Cond Sg P1 => scri_ + "verei" ; --# notpresent
    Cond Sg P2 => scri_ + "veresti" ; --# notpresent
    Cond Sg P3 => scri_ + "verebbe" ; --# notpresent
    Cond Pl P1 => scri_ + "veremmo" ; --# notpresent
    Cond Pl P2 => scri_ + "vereste" ; --# notpresent
    Cond Pl P3 => scri_ + "verebbero" ; --# notpresent
    Imper SgP2 => scri_ + "vi" ;
    Imper PlP1 => scri_ + "viamo" ;
    Imper PlP2 => scri_ + "vete" ;
    Ger => scri_ + "vendo" ;
    Part PresP Masc Sg => scri_ + "vente" ;
    Part PresP Masc Pl => scri_ + "venti" ;
    Part PresP Fem Sg => scri_ + "vente" ;
    Part PresP Fem Pl => scri_ + "venti" ;
    Part PassP Masc Sg => scri_ + "tto" ;
    Part PassP Masc Pl => scri_ + "tti" ;
    Part PassP Fem Sg => scri_ + "tta" ;
    Part PassP Fem Pl => scri_ + "tte"
    }
  } ;

oper scuotere_83 : Str -> Verbo = \scuotere ->
  let sc_ = Predef.tk 6 scuotere in
 {s = table {
    Inf => sc_ + "uotere" ;
    InfClit => sc_ + "uoter" ;
    Indi Pres Sg P1 => sc_ + "uoto" ;
    Indi Pres Sg P2 => sc_ + "uoti" ;
    Indi Pres Sg P3 => sc_ + "uote" ;
    Indi Pres Pl P1 => sc_ + "uotiamo" ;
    Indi Pres Pl P2 => sc_ + "uotete" ;
    Indi Pres Pl P3 => sc_ + "uotono" ;
    Indi Imperf Sg P1 => sc_ + "uotevo" ; --# notpresent
    Indi Imperf Sg P2 => sc_ + "uotevi" ; --# notpresent
    Indi Imperf Sg P3 => sc_ + "uoteva" ; --# notpresent
    Indi Imperf Pl P1 => sc_ + "uotevamo" ; --# notpresent
    Indi Imperf Pl P2 => sc_ + "uotevate" ; --# notpresent
    Indi Imperf Pl P3 => sc_ + "uotevano" ; --# notpresent
    Pass Sg P1 => sc_ + "ossi" ; --# notpresent
    Pass Sg P2 => sc_ + "uotesti" ; --# notpresent
    Pass Sg P3 => sc_ + "osse" ; --# notpresent
    Pass Pl P1 => sc_ + "uotemmo" ; --# notpresent
    Pass Pl P2 => sc_ + "uoteste" ; --# notpresent
    Pass Pl P3 => sc_ + "ossero" ; --# notpresent
    Fut Sg P1 => sc_ + "uoterò" ; --# notpresent
    Fut Sg P2 => sc_ + "uoterai" ; --# notpresent
    Fut Sg P3 => sc_ + "uoterà" ; --# notpresent
    Fut Pl P1 => sc_ + "uoteremo" ; --# notpresent
    Fut Pl P2 => sc_ + "uoterete" ; --# notpresent
    Fut Pl P3 => sc_ + "uoteranno" ; --# notpresent
    Cong Pres Sg P1 => sc_ + "uota" ;
    Cong Pres Sg P2 => sc_ + "uota" ;
    Cong Pres Sg P3 => sc_ + "uota" ;
    Cong Pres Pl P1 => sc_ + "uotiamo" ;
    Cong Pres Pl P2 => sc_ + "uotiate" ;
    Cong Pres Pl P3 => sc_ + "uotano" ;
    Cong Imperf Sg P1 => sc_ + "uotessi" ; --# notpresent
    Cong Imperf Sg P2 => sc_ + "uotessi" ; --# notpresent
    Cong Imperf Sg P3 => sc_ + "uotesse" ; --# notpresent
    Cong Imperf Pl P1 => sc_ + "uotessimo" ; --# notpresent
    Cong Imperf Pl P2 => sc_ + "uoteste" ; --# notpresent
    Cong Imperf Pl P3 => sc_ + "uotessero" ; --# notpresent
    Cond Sg P1 => sc_ + "uoterei" ; --# notpresent
    Cond Sg P2 => sc_ + "uoteresti" ; --# notpresent
    Cond Sg P3 => sc_ + "uoterebbe" ; --# notpresent
    Cond Pl P1 => sc_ + "uoteremmo" ; --# notpresent
    Cond Pl P2 => sc_ + "uotereste" ; --# notpresent
    Cond Pl P3 => sc_ + "uoterebbero" ; --# notpresent
    Imper SgP2 => sc_ + "uoti" ;
    Imper PlP1 => sc_ + "uotiamo" ;
    Imper PlP2 => sc_ + "uotete" ;
    Ger => sc_ + "uotendo" ;
    Part PresP Masc Sg => sc_ + "uotente" ;
    Part PresP Masc Pl => sc_ + "uotenti" ;
    Part PresP Fem Sg => sc_ + "uotente" ;
    Part PresP Fem Pl => sc_ + "uotenti" ;
    Part PassP Masc Sg => sc_ + "osso" ;
    Part PassP Masc Pl => sc_ + "ossi" ;
    Part PassP Fem Sg => sc_ + "ossa" ;
    Part PassP Fem Pl => sc_ + "osse"
    }
  } ;

oper sedere_84 : Str -> Verbo = \sedere ->
  let s_ = Predef.tk 5 sedere in
 {s = table {
    Inf => s_ + "edere" ;
    InfClit => s_ + "eder" ;
    Indi Pres Sg P1 => s_ + "iedo" ;
    Indi Pres Sg P2 => s_ + "iedi" ;
    Indi Pres Sg P3 => s_ + "iede" ;
    Indi Pres Pl P1 => s_ + "ediamo" ;
    Indi Pres Pl P2 => s_ + "edete" ;
    Indi Pres Pl P3 => s_ + "iedono" ;
    Indi Imperf Sg P1 => s_ + "edevo" ; --# notpresent
    Indi Imperf Sg P2 => s_ + "edevi" ; --# notpresent
    Indi Imperf Sg P3 => s_ + "edeva" ; --# notpresent
    Indi Imperf Pl P1 => s_ + "edevamo" ; --# notpresent
    Indi Imperf Pl P2 => s_ + "edevate" ; --# notpresent
    Indi Imperf Pl P3 => s_ + "edevano" ; --# notpresent
    Pass Sg P1 => s_ + "edetti" ; --# notpresent
    Pass Sg P2 => s_ + "edesti" ; --# notpresent
    Pass Sg P3 => s_ + "edette" ; --# notpresent
    Pass Pl P1 => s_ + "edemmo" ; --# notpresent
    Pass Pl P2 => s_ + "edeste" ; --# notpresent
    Pass Pl P3 => s_ + "edettero" ; --# notpresent
    Fut Sg P1 => s_ + "ederò" ; --# notpresent
    Fut Sg P2 => s_ + "ederai" ; --# notpresent
    Fut Sg P3 => s_ + "ederà" ; --# notpresent
    Fut Pl P1 => s_ + "ederemo" ; --# notpresent
    Fut Pl P2 => s_ + "ederete" ; --# notpresent
    Fut Pl P3 => s_ + "ederanno" ; --# notpresent
    Cong Pres Sg P1 => s_ + "ieda" ;
    Cong Pres Sg P2 => s_ + "ieda" ;
    Cong Pres Sg P3 => s_ + "ieda" ;
    Cong Pres Pl P1 => s_ + "ediamo" ;
    Cong Pres Pl P2 => s_ + "ediate" ;
    Cong Pres Pl P3 => s_ + "iedano" ;
    Cong Imperf Sg P1 => s_ + "edessi" ; --# notpresent
    Cong Imperf Sg P2 => s_ + "edessi" ; --# notpresent
    Cong Imperf Sg P3 => s_ + "edesse" ; --# notpresent
    Cong Imperf Pl P1 => s_ + "edessimo" ; --# notpresent
    Cong Imperf Pl P2 => s_ + "edeste" ; --# notpresent
    Cong Imperf Pl P3 => s_ + "edessero" ; --# notpresent
    Cond Sg P1 => s_ + "ederei" ; --# notpresent
    Cond Sg P2 => s_ + "ederesti" ; --# notpresent
    Cond Sg P3 => s_ + "ederebbe" ; --# notpresent
    Cond Pl P1 => s_ + "ederemmo" ; --# notpresent
    Cond Pl P2 => s_ + "edereste" ; --# notpresent
    Cond Pl P3 => s_ + "ederebbero" ; --# notpresent
    Imper SgP2 => s_ + "iedi" ;
    Imper PlP1 => s_ + "ediamo" ;
    Imper PlP2 => s_ + "edete" ;
    Ger => s_ + "edendo" ;
    Part PresP Masc Sg => s_ + "edente" ;
    Part PresP Masc Pl => s_ + "edenti" ;
    Part PresP Fem Sg => s_ + "edente" ;
    Part PresP Fem Pl => s_ + "edenti" ;
    Part PassP Masc Sg => s_ + "eduto" ;
    Part PassP Masc Pl => s_ + "eduti" ;
    Part PassP Fem Sg => s_ + "eduta" ;
    Part PassP Fem Pl => s_ + "edute"
    }
  } ;

oper spargere_85 : Str -> Verbo = \spargere ->
  let spar_ = Predef.tk 4 spargere in
 {s = table {
    Inf => spar_ + "gere" ;
    InfClit => spar_ + "ger" ;
    Indi Pres Sg P1 => spar_ + "go" ;
    Indi Pres Sg P2 => spar_ + "gi" ;
    Indi Pres Sg P3 => spar_ + "ge" ;
    Indi Pres Pl P1 => spar_ + "giamo" ;
    Indi Pres Pl P2 => spar_ + "gete" ;
    Indi Pres Pl P3 => spar_ + "gono" ;
    Indi Imperf Sg P1 => spar_ + "gevo" ; --# notpresent
    Indi Imperf Sg P2 => spar_ + "gevi" ; --# notpresent
    Indi Imperf Sg P3 => spar_ + "geva" ; --# notpresent
    Indi Imperf Pl P1 => spar_ + "gevamo" ; --# notpresent
    Indi Imperf Pl P2 => spar_ + "gevate" ; --# notpresent
    Indi Imperf Pl P3 => spar_ + "gevano" ; --# notpresent
    Pass Sg P1 => spar_ + "si" ; --# notpresent
    Pass Sg P2 => spar_ + "gesti" ; --# notpresent
    Pass Sg P3 => spar_ + "se" ; --# notpresent
    Pass Pl P1 => spar_ + "gemmo" ; --# notpresent
    Pass Pl P2 => spar_ + "geste" ; --# notpresent
    Pass Pl P3 => spar_ + "sero" ; --# notpresent
    Fut Sg P1 => spar_ + "gerò" ; --# notpresent
    Fut Sg P2 => spar_ + "gerai" ; --# notpresent
    Fut Sg P3 => spar_ + "gerà" ; --# notpresent
    Fut Pl P1 => spar_ + "geremo" ; --# notpresent
    Fut Pl P2 => spar_ + "gerete" ; --# notpresent
    Fut Pl P3 => spar_ + "geranno" ; --# notpresent
    Cong Pres Sg P1 => spar_ + "ga" ;
    Cong Pres Sg P2 => spar_ + "ga" ;
    Cong Pres Sg P3 => spar_ + "ga" ;
    Cong Pres Pl P1 => spar_ + "giamo" ;
    Cong Pres Pl P2 => spar_ + "giate" ;
    Cong Pres Pl P3 => spar_ + "gano" ;
    Cong Imperf Sg P1 => spar_ + "gessi" ; --# notpresent
    Cong Imperf Sg P2 => spar_ + "gessi" ; --# notpresent
    Cong Imperf Sg P3 => spar_ + "gesse" ; --# notpresent
    Cong Imperf Pl P1 => spar_ + "gessimo" ; --# notpresent
    Cong Imperf Pl P2 => spar_ + "geste" ; --# notpresent
    Cong Imperf Pl P3 => spar_ + "gessero" ; --# notpresent
    Cond Sg P1 => spar_ + "gerei" ; --# notpresent
    Cond Sg P2 => spar_ + "geresti" ; --# notpresent
    Cond Sg P3 => spar_ + "gerebbe" ; --# notpresent
    Cond Pl P1 => spar_ + "geremmo" ; --# notpresent
    Cond Pl P2 => spar_ + "gereste" ; --# notpresent
    Cond Pl P3 => spar_ + "gerebbero" ; --# notpresent
    Imper SgP2 => spar_ + "gi" ;
    Imper PlP1 => spar_ + "giamo" ;
    Imper PlP2 => spar_ + "gete" ;
    Ger => spar_ + "gendo" ;
    Part PresP Masc Sg => spar_ + "gente" ;
    Part PresP Masc Pl => spar_ + "genti" ;
    Part PresP Fem Sg => spar_ + "gente" ;
    Part PresP Fem Pl => spar_ + "genti" ;
    Part PassP Masc Sg => spar_ + "so" ;
    Part PassP Masc Pl => spar_ + "si" ;
    Part PassP Fem Sg => spar_ + "sa" ;
    Part PassP Fem Pl => spar_ + "se"
    }
  } ;

oper spegnere_86 : Str -> Verbo = \spegnere ->
  let spe_ = Predef.tk 5 spegnere in
 {s = table {
    Inf => spe_ + "gnere" ;
    InfClit => spe_ + "gner" ;
    Indi Pres Sg P1 => spe_ + "ngo" ;
    Indi Pres Sg P2 => spe_ + "gni" ;
    Indi Pres Sg P3 => spe_ + "gne" ;
    Indi Pres Pl P1 => spe_ + "gniamo" ;
    Indi Pres Pl P2 => spe_ + "gnete" ;
    Indi Pres Pl P3 => spe_ + "ngono" ;
    Indi Imperf Sg P1 => spe_ + "gnevo" ; --# notpresent
    Indi Imperf Sg P2 => spe_ + "gnevi" ; --# notpresent
    Indi Imperf Sg P3 => spe_ + "gneva" ; --# notpresent
    Indi Imperf Pl P1 => spe_ + "gnevamo" ; --# notpresent
    Indi Imperf Pl P2 => spe_ + "gnevate" ; --# notpresent
    Indi Imperf Pl P3 => spe_ + "gnevano" ; --# notpresent
    Pass Sg P1 => spe_ + "nsi" ; --# notpresent
    Pass Sg P2 => spe_ + "gnesti" ; --# notpresent
    Pass Sg P3 => spe_ + "nse" ; --# notpresent
    Pass Pl P1 => spe_ + "gnemmo" ; --# notpresent
    Pass Pl P2 => spe_ + "gneste" ; --# notpresent
    Pass Pl P3 => spe_ + "nsero" ; --# notpresent
    Fut Sg P1 => spe_ + "gnerò" ; --# notpresent
    Fut Sg P2 => spe_ + "gnerai" ; --# notpresent
    Fut Sg P3 => spe_ + "gnerà" ; --# notpresent
    Fut Pl P1 => spe_ + "gneremo" ; --# notpresent
    Fut Pl P2 => spe_ + "gnerete" ; --# notpresent
    Fut Pl P3 => spe_ + "gneranno" ; --# notpresent
    Cong Pres Sg P1 => spe_ + "nga" ;
    Cong Pres Sg P2 => spe_ + "nga" ;
    Cong Pres Sg P3 => spe_ + "nga" ;
    Cong Pres Pl P1 => spe_ + "gniamo" ;
    Cong Pres Pl P2 => spe_ + "gniate" ;
    Cong Pres Pl P3 => spe_ + "ngano" ;
    Cong Imperf Sg P1 => spe_ + "gnessi" ; --# notpresent
    Cong Imperf Sg P2 => spe_ + "gnessi" ; --# notpresent
    Cong Imperf Sg P3 => spe_ + "gnesse" ; --# notpresent
    Cong Imperf Pl P1 => spe_ + "gnessimo" ; --# notpresent
    Cong Imperf Pl P2 => spe_ + "gneste" ; --# notpresent
    Cong Imperf Pl P3 => spe_ + "gnessero" ; --# notpresent
    Cond Sg P1 => spe_ + "gnerei" ; --# notpresent
    Cond Sg P2 => spe_ + "gneresti" ; --# notpresent
    Cond Sg P3 => spe_ + "gnerebbe" ; --# notpresent
    Cond Pl P1 => spe_ + "gneremmo" ; --# notpresent
    Cond Pl P2 => spe_ + "gnereste" ; --# notpresent
    Cond Pl P3 => spe_ + "gnerebbero" ; --# notpresent
    Imper SgP2 => spe_ + "gni" ;
    Imper PlP1 => spe_ + "gniamo" ;
    Imper PlP2 => spe_ + "gnete" ;
    Ger => spe_ + "gnendo" ;
    Part PresP Masc Sg => spe_ + "gnente" ;
    Part PresP Masc Pl => spe_ + "gnenti" ;
    Part PresP Fem Sg => spe_ + "gnente" ;
    Part PresP Fem Pl => spe_ + "gnenti" ;
    Part PassP Masc Sg => spe_ + "nto" ;
    Part PassP Masc Pl => spe_ + "nti" ;
    Part PassP Fem Sg => spe_ + "nta" ;
    Part PassP Fem Pl => spe_ + "nte"
    }
  } ;

oper stringere_87 : Str -> Verbo = \striingere ->
  let stri_ = Predef.tk 6 striingere in
 {s = table {
    Inf => stri_ + "ingere" ;
    InfClit => stri_ + "inger" ;
    Indi Pres Sg P1 => stri_ + "ingo" ;
    Indi Pres Sg P2 => stri_ + "ingi" ;
    Indi Pres Sg P3 => stri_ + "inge" ;
    Indi Pres Pl P1 => stri_ + "ingiamo" ;
    Indi Pres Pl P2 => stri_ + "ingete" ;
    Indi Pres Pl P3 => stri_ + "ingono" ;
    Indi Imperf Sg P1 => stri_ + "ingevo" ; --# notpresent
    Indi Imperf Sg P2 => stri_ + "ingevi" ; --# notpresent
    Indi Imperf Sg P3 => stri_ + "ingeva" ; --# notpresent
    Indi Imperf Pl P1 => stri_ + "ingevamo" ; --# notpresent
    Indi Imperf Pl P2 => stri_ + "ingevate" ; --# notpresent
    Indi Imperf Pl P3 => stri_ + "ingevano" ; --# notpresent
    Pass Sg P1 => stri_ + "insi" ; --# notpresent
    Pass Sg P2 => stri_ + "ingesti" ; --# notpresent
    Pass Sg P3 => stri_ + "inse" ; --# notpresent
    Pass Pl P1 => stri_ + "ingemmo" ; --# notpresent
    Pass Pl P2 => stri_ + "ingeste" ; --# notpresent
    Pass Pl P3 => stri_ + "insero" ; --# notpresent
    Fut Sg P1 => stri_ + "ingerò" ; --# notpresent
    Fut Sg P2 => stri_ + "ingerai" ; --# notpresent
    Fut Sg P3 => stri_ + "ingerà" ; --# notpresent
    Fut Pl P1 => stri_ + "ingeremo" ; --# notpresent
    Fut Pl P2 => stri_ + "ingerete" ; --# notpresent
    Fut Pl P3 => stri_ + "ingeranno" ; --# notpresent
    Cong Pres Sg P1 => stri_ + "inga" ;
    Cong Pres Sg P2 => stri_ + "inga" ;
    Cong Pres Sg P3 => stri_ + "inga" ;
    Cong Pres Pl P1 => stri_ + "ingiamo" ;
    Cong Pres Pl P2 => stri_ + "ingiate" ;
    Cong Pres Pl P3 => stri_ + "ingano" ;
    Cong Imperf Sg P1 => stri_ + "ingessi" ; --# notpresent
    Cong Imperf Sg P2 => stri_ + "ingessi" ; --# notpresent
    Cong Imperf Sg P3 => stri_ + "ingesse" ; --# notpresent
    Cong Imperf Pl P1 => stri_ + "ingessimo" ; --# notpresent
    Cong Imperf Pl P2 => stri_ + "ingeste" ; --# notpresent
    Cong Imperf Pl P3 => stri_ + "ingessero" ; --# notpresent
    Cond Sg P1 => stri_ + "ingerei" ; --# notpresent
    Cond Sg P2 => stri_ + "ingeresti" ; --# notpresent
    Cond Sg P3 => stri_ + "ingerebbe" ; --# notpresent
    Cond Pl P1 => stri_ + "ingeremmo" ; --# notpresent
    Cond Pl P2 => stri_ + "ingereste" ; --# notpresent
    Cond Pl P3 => stri_ + "ingerebbero" ; --# notpresent
    Imper SgP2 => stri_ + "ingi" ;
    Imper PlP1 => stri_ + "ingiamo" ;
    Imper PlP2 => stri_ + "ingete" ;
    Ger => stri_ + "ingendo" ;
    Part PresP Masc Sg => stri_ + "ingente" ;
    Part PresP Masc Pl => stri_ + "ingenti" ;
    Part PresP Fem Sg => stri_ + "ingente" ;
    Part PresP Fem Pl => stri_ + "ingenti" ;
    Part PassP Masc Sg => stri_ + "etto" ;
    Part PassP Masc Pl => stri_ + "etti" ;
    Part PassP Fem Sg => stri_ + "etta" ;
    Part PassP Fem Pl => stri_ + "ette"
    }
  } ;

oper svellere_88 : Str -> Verbo = \svellere ->
  let svel_ = Predef.tk 4 svellere in
 {s = table {
    Inf => svel_ + "lere" ;
    InfClit => svel_ + "ler" ;
    Indi Pres Sg P1 => svel_ + "lo" ;
    Indi Pres Sg P2 => svel_ + "li" ;
    Indi Pres Sg P3 => svel_ + "le" ;
    Indi Pres Pl P1 => svel_ + "liamo" ;
    Indi Pres Pl P2 => svel_ + "lete" ;
    Indi Pres Pl P3 => svel_ + "lono" ;
    Indi Imperf Sg P1 => svel_ + "levo" ; --# notpresent
    Indi Imperf Sg P2 => svel_ + "levi" ; --# notpresent
    Indi Imperf Sg P3 => svel_ + "leva" ; --# notpresent
    Indi Imperf Pl P1 => svel_ + "levamo" ; --# notpresent
    Indi Imperf Pl P2 => svel_ + "levate" ; --# notpresent
    Indi Imperf Pl P3 => svel_ + "levano" ; --# notpresent
    Pass Sg P1 => svel_ + "si" ; --# notpresent
    Pass Sg P2 => svel_ + "lesti" ; --# notpresent
    Pass Sg P3 => svel_ + "se" ; --# notpresent
    Pass Pl P1 => svel_ + "lemmo" ; --# notpresent
    Pass Pl P2 => svel_ + "leste" ; --# notpresent
    Pass Pl P3 => svel_ + "sero" ; --# notpresent
    Fut Sg P1 => svel_ + "lerò" ; --# notpresent
    Fut Sg P2 => svel_ + "lerai" ; --# notpresent
    Fut Sg P3 => svel_ + "lerà" ; --# notpresent
    Fut Pl P1 => svel_ + "leremo" ; --# notpresent
    Fut Pl P2 => svel_ + "lerete" ; --# notpresent
    Fut Pl P3 => svel_ + "leranno" ; --# notpresent
    Cong Pres Sg P1 => svel_ + "la" ;
    Cong Pres Sg P2 => svel_ + "la" ;
    Cong Pres Sg P3 => svel_ + "la" ;
    Cong Pres Pl P1 => svel_ + "liamo" ;
    Cong Pres Pl P2 => svel_ + "liate" ;
    Cong Pres Pl P3 => svel_ + "lano" ;
    Cong Imperf Sg P1 => svel_ + "lessi" ; --# notpresent
    Cong Imperf Sg P2 => svel_ + "lessi" ; --# notpresent
    Cong Imperf Sg P3 => svel_ + "lesse" ; --# notpresent
    Cong Imperf Pl P1 => svel_ + "lessimo" ; --# notpresent
    Cong Imperf Pl P2 => svel_ + "leste" ; --# notpresent
    Cong Imperf Pl P3 => svel_ + "lessero" ; --# notpresent
    Cond Sg P1 => svel_ + "lerei" ; --# notpresent
    Cond Sg P2 => svel_ + "leresti" ; --# notpresent
    Cond Sg P3 => svel_ + "lerebbe" ; --# notpresent
    Cond Pl P1 => svel_ + "leremmo" ; --# notpresent
    Cond Pl P2 => svel_ + "lereste" ; --# notpresent
    Cond Pl P3 => svel_ + "lerebbero" ; --# notpresent
    Imper SgP2 => svel_ + "li" ;
    Imper PlP1 => svel_ + "liamo" ;
    Imper PlP2 => svel_ + "lete" ;
    Ger => svel_ + "lendo" ;
    Part PresP Masc Sg => svel_ + "lente" ;
    Part PresP Masc Pl => svel_ + "lenti" ;
    Part PresP Fem Sg => svel_ + "lente" ;
    Part PresP Fem Pl => svel_ + "lenti" ;
    Part PassP Masc Sg => svel_ + "to" ;
    Part PassP Masc Pl => svel_ + "ti" ;
    Part PassP Fem Sg => svel_ + "ta" ;
    Part PassP Fem Pl => svel_ + "te"
    }
  } ;

oper tenere_89 : Str -> Verbo = \tenere ->
  let t_ = Predef.tk 5 tenere in
 {s = table {
    Inf => t_ + "enere" ;
    InfClit => t_ + "ener" ;
    Indi Pres Sg P1 => t_ + "engo" ;
    Indi Pres Sg P2 => t_ + "ieni" ;
    Indi Pres Sg P3 => t_ + "iene" ;
    Indi Pres Pl P1 => t_ + "eniamo" ;
    Indi Pres Pl P2 => t_ + "enete" ;
    Indi Pres Pl P3 => t_ + "engono" ;
    Indi Imperf Sg P1 => t_ + "enevo" ; --# notpresent
    Indi Imperf Sg P2 => t_ + "enevi" ; --# notpresent
    Indi Imperf Sg P3 => t_ + "eneva" ; --# notpresent
    Indi Imperf Pl P1 => t_ + "enevamo" ; --# notpresent
    Indi Imperf Pl P2 => t_ + "enevate" ; --# notpresent
    Indi Imperf Pl P3 => t_ + "enevano" ; --# notpresent
    Pass Sg P1 => t_ + "enni" ; --# notpresent
    Pass Sg P2 => t_ + "enesti" ; --# notpresent
    Pass Sg P3 => t_ + "enne" ; --# notpresent
    Pass Pl P1 => t_ + "enemmo" ; --# notpresent
    Pass Pl P2 => t_ + "eneste" ; --# notpresent
    Pass Pl P3 => t_ + "ennero" ; --# notpresent
    Fut Sg P1 => t_ + "errò" ; --# notpresent
    Fut Sg P2 => t_ + "errai" ; --# notpresent
    Fut Sg P3 => t_ + "errà" ; --# notpresent
    Fut Pl P1 => t_ + "erremo" ; --# notpresent
    Fut Pl P2 => t_ + "errete" ; --# notpresent
    Fut Pl P3 => t_ + "erranno" ; --# notpresent
    Cong Pres Sg P1 => t_ + "enga" ;
    Cong Pres Sg P2 => t_ + "enga" ;
    Cong Pres Sg P3 => t_ + "enga" ;
    Cong Pres Pl P1 => t_ + "eniamo" ;
    Cong Pres Pl P2 => t_ + "eniate" ;
    Cong Pres Pl P3 => t_ + "engano" ;
    Cong Imperf Sg P1 => t_ + "enessi" ; --# notpresent
    Cong Imperf Sg P2 => t_ + "enessi" ; --# notpresent
    Cong Imperf Sg P3 => t_ + "enesse" ; --# notpresent
    Cong Imperf Pl P1 => t_ + "enessimo" ; --# notpresent
    Cong Imperf Pl P2 => t_ + "eneste" ; --# notpresent
    Cong Imperf Pl P3 => t_ + "enessero" ; --# notpresent
    Cond Sg P1 => t_ + "errei" ; --# notpresent
    Cond Sg P2 => t_ + "erresti" ; --# notpresent
    Cond Sg P3 => t_ + "errebbe" ; --# notpresent
    Cond Pl P1 => t_ + "erremmo" ; --# notpresent
    Cond Pl P2 => t_ + "erreste" ; --# notpresent
    Cond Pl P3 => t_ + "errebbero" ; --# notpresent
    Imper SgP2 => t_ + "ieni" ;
    Imper PlP1 => t_ + "eniamo" ;
    Imper PlP2 => t_ + "enete" ;
    Ger => t_ + "enendo" ;
    Part PresP Masc Sg => t_ + "enente" ;
    Part PresP Masc Pl => t_ + "enenti" ;
    Part PresP Fem Sg => t_ + "enente" ;
    Part PresP Fem Pl => t_ + "enenti" ;
    Part PassP Masc Sg => t_ + "enuto" ;
    Part PassP Masc Pl => t_ + "enuti" ;
    Part PassP Fem Sg => t_ + "enuta" ;
    Part PassP Fem Pl => t_ + "enute"
    }
  } ;

oper torcere_90 : Str -> Verbo = \torcere ->
  let tor_ = Predef.tk 4 torcere in
 {s = table {
    Inf => tor_ + "cere" ;
    InfClit => tor_ + "cer" ;
    Indi Pres Sg P1 => tor_ + "co" ;
    Indi Pres Sg P2 => tor_ + "ci" ;
    Indi Pres Sg P3 => tor_ + "ce" ;
    Indi Pres Pl P1 => tor_ + "ciamo" ;
    Indi Pres Pl P2 => tor_ + "cete" ;
    Indi Pres Pl P3 => tor_ + "cono" ;
    Indi Imperf Sg P1 => tor_ + "cevo" ; --# notpresent
    Indi Imperf Sg P2 => tor_ + "cevi" ; --# notpresent
    Indi Imperf Sg P3 => tor_ + "ceva" ; --# notpresent
    Indi Imperf Pl P1 => tor_ + "cevamo" ; --# notpresent
    Indi Imperf Pl P2 => tor_ + "cevate" ; --# notpresent
    Indi Imperf Pl P3 => tor_ + "cevano" ; --# notpresent
    Pass Sg P1 => tor_ + "si" ; --# notpresent
    Pass Sg P2 => tor_ + "cesti" ; --# notpresent
    Pass Sg P3 => tor_ + "se" ; --# notpresent
    Pass Pl P1 => tor_ + "cemmo" ; --# notpresent
    Pass Pl P2 => tor_ + "ceste" ; --# notpresent
    Pass Pl P3 => tor_ + "sero" ; --# notpresent
    Fut Sg P1 => tor_ + "cerò" ; --# notpresent
    Fut Sg P2 => tor_ + "cerai" ; --# notpresent
    Fut Sg P3 => tor_ + "cerà" ; --# notpresent
    Fut Pl P1 => tor_ + "ceremo" ; --# notpresent
    Fut Pl P2 => tor_ + "cerete" ; --# notpresent
    Fut Pl P3 => tor_ + "ceranno" ; --# notpresent
    Cong Pres Sg P1 => tor_ + "ca" ;
    Cong Pres Sg P2 => tor_ + "ca" ;
    Cong Pres Sg P3 => tor_ + "ca" ;
    Cong Pres Pl P1 => tor_ + "ciamo" ;
    Cong Pres Pl P2 => tor_ + "ciate" ;
    Cong Pres Pl P3 => tor_ + "cano" ;
    Cong Imperf Sg P1 => tor_ + "cessi" ; --# notpresent
    Cong Imperf Sg P2 => tor_ + "cessi" ; --# notpresent
    Cong Imperf Sg P3 => tor_ + "cesse" ; --# notpresent
    Cong Imperf Pl P1 => tor_ + "cessimo" ; --# notpresent
    Cong Imperf Pl P2 => tor_ + "ceste" ; --# notpresent
    Cong Imperf Pl P3 => tor_ + "cessero" ; --# notpresent
    Cond Sg P1 => tor_ + "cerei" ; --# notpresent
    Cond Sg P2 => tor_ + "ceresti" ; --# notpresent
    Cond Sg P3 => tor_ + "cerebbe" ; --# notpresent
    Cond Pl P1 => tor_ + "ceremmo" ; --# notpresent
    Cond Pl P2 => tor_ + "cereste" ; --# notpresent
    Cond Pl P3 => tor_ + "cerebbero" ; --# notpresent
    Imper SgP2 => tor_ + "ci" ;
    Imper PlP1 => tor_ + "ciamo" ;
    Imper PlP2 => tor_ + "cete" ;
    Ger => tor_ + "cendo" ;
    Part PresP Masc Sg => tor_ + "cente" ;
    Part PresP Masc Pl => tor_ + "centi" ;
    Part PresP Fem Sg => tor_ + "cente" ;
    Part PresP Fem Pl => tor_ + "centi" ;
    Part PassP Masc Sg => tor_ + "to" ;
    Part PassP Masc Pl => tor_ + "ti" ;
    Part PassP Fem Sg => tor_ + "ta" ;
    Part PassP Fem Pl => tor_ + "te"
    }
  } ;

oper trarre_91 : Str -> Verbo = \trarre ->
  let tra_ = Predef.tk 3 trarre in
 {s = table {
    Inf => tra_ + "rre" ;
    InfClit => tra_ + "r" ;
    Indi Pres Sg P1 => tra_ + "ggo" ;
    Indi Pres Sg P2 => tra_ + "i" ;
    Indi Pres Sg P3 => tra_ + "e" ;
    Indi Pres Pl P1 => tra_ + "iamo" ;
    Indi Pres Pl P2 => tra_ + "ete" ;
    Indi Pres Pl P3 => tra_ + "ggono" ;
    Indi Imperf Sg P1 => tra_ + "evo" ; --# notpresent
    Indi Imperf Sg P2 => tra_ + "evi" ; --# notpresent
    Indi Imperf Sg P3 => tra_ + "eva" ; --# notpresent
    Indi Imperf Pl P1 => tra_ + "evamo" ; --# notpresent
    Indi Imperf Pl P2 => tra_ + "evate" ; --# notpresent
    Indi Imperf Pl P3 => tra_ + "evano" ; --# notpresent
    Pass Sg P1 => tra_ + "ssi" ; --# notpresent
    Pass Sg P2 => tra_ + "esti" ; --# notpresent
    Pass Sg P3 => tra_ + "sse" ; --# notpresent
    Pass Pl P1 => tra_ + "emmo" ; --# notpresent
    Pass Pl P2 => tra_ + "este" ; --# notpresent
    Pass Pl P3 => tra_ + "ssero" ; --# notpresent
    Fut Sg P1 => tra_ + "rrò" ; --# notpresent
    Fut Sg P2 => tra_ + "rrai" ; --# notpresent
    Fut Sg P3 => tra_ + "rrà" ; --# notpresent
    Fut Pl P1 => tra_ + "rremo" ; --# notpresent
    Fut Pl P2 => tra_ + "rrete" ; --# notpresent
    Fut Pl P3 => tra_ + "rranno" ; --# notpresent
    Cong Pres Sg P1 => tra_ + "gga" ;
    Cong Pres Sg P2 => tra_ + "gga" ;
    Cong Pres Sg P3 => tra_ + "gga" ;
    Cong Pres Pl P1 => tra_ + "iamo" ;
    Cong Pres Pl P2 => tra_ + "iate" ;
    Cong Pres Pl P3 => tra_ + "ggano" ;
    Cong Imperf Sg P1 => tra_ + "essi" ; --# notpresent
    Cong Imperf Sg P2 => tra_ + "essi" ; --# notpresent
    Cong Imperf Sg P3 => tra_ + "esse" ; --# notpresent
    Cong Imperf Pl P1 => tra_ + "essimo" ; --# notpresent
    Cong Imperf Pl P2 => tra_ + "este" ; --# notpresent
    Cong Imperf Pl P3 => tra_ + "essero" ; --# notpresent
    Cond Sg P1 => tra_ + "rrei" ; --# notpresent
    Cond Sg P2 => tra_ + "rresti" ; --# notpresent
    Cond Sg P3 => tra_ + "rrebbe" ; --# notpresent
    Cond Pl P1 => tra_ + "rremmo" ; --# notpresent
    Cond Pl P2 => tra_ + "rreste" ; --# notpresent
    Cond Pl P3 => tra_ + "rrebbero" ; --# notpresent
    Imper SgP2 => tra_ + "i" ;
    Imper PlP1 => tra_ + "iamo" ;
    Imper PlP2 => tra_ + "ete" ;
    Ger => tra_ + "endo" ;
    Part PresP Masc Sg => tra_ + "ente" ;
    Part PresP Masc Pl => tra_ + "enti" ;
    Part PresP Fem Sg => tra_ + "ente" ;
    Part PresP Fem Pl => tra_ + "enti" ;
    Part PassP Masc Sg => tra_ + "tto" ;
    Part PassP Masc Pl => tra_ + "tti" ;
    Part PassP Fem Sg => tra_ + "tta" ;
    Part PassP Fem Pl => tra_ + "tte"
    }
  } ;

oper valere_92 : Str -> Verbo = \valere ->
  let va_ = Predef.tk 4 valere in
 {s = table {
    Inf => va_ + "lere" ;
    InfClit => va_ + "ler" ;
    Indi Pres Sg P1 => va_ + "lgo" ;
    Indi Pres Sg P2 => va_ + "li" ;
    Indi Pres Sg P3 => va_ + "le" ;
    Indi Pres Pl P1 => va_ + "liamo" ;
    Indi Pres Pl P2 => va_ + "lete" ;
    Indi Pres Pl P3 => va_ + "lgono" ;
    Indi Imperf Sg P1 => va_ + "levo" ; --# notpresent
    Indi Imperf Sg P2 => va_ + "levi" ; --# notpresent
    Indi Imperf Sg P3 => va_ + "leva" ; --# notpresent
    Indi Imperf Pl P1 => va_ + "levamo" ; --# notpresent
    Indi Imperf Pl P2 => va_ + "levate" ; --# notpresent
    Indi Imperf Pl P3 => va_ + "levano" ; --# notpresent
    Pass Sg P1 => va_ + "lsi" ; --# notpresent
    Pass Sg P2 => va_ + "lesti" ; --# notpresent
    Pass Sg P3 => va_ + "lse" ; --# notpresent
    Pass Pl P1 => va_ + "lemmo" ; --# notpresent
    Pass Pl P2 => va_ + "leste" ; --# notpresent
    Pass Pl P3 => va_ + "lsero" ; --# notpresent
    Fut Sg P1 => va_ + "rrò" ; --# notpresent
    Fut Sg P2 => va_ + "rrai" ; --# notpresent
    Fut Sg P3 => va_ + "rrà" ; --# notpresent
    Fut Pl P1 => va_ + "rremo" ; --# notpresent
    Fut Pl P2 => va_ + "rrete" ; --# notpresent
    Fut Pl P3 => va_ + "rranno" ; --# notpresent
    Cong Pres Sg P1 => va_ + "lga" ;
    Cong Pres Sg P2 => va_ + "lga" ;
    Cong Pres Sg P3 => va_ + "lga" ;
    Cong Pres Pl P1 => va_ + "liamo" ;
    Cong Pres Pl P2 => va_ + "liate" ;
    Cong Pres Pl P3 => va_ + "lgano" ;
    Cong Imperf Sg P1 => va_ + "lessi" ; --# notpresent
    Cong Imperf Sg P2 => va_ + "lessi" ; --# notpresent
    Cong Imperf Sg P3 => va_ + "lesse" ; --# notpresent
    Cong Imperf Pl P1 => va_ + "lessimo" ; --# notpresent
    Cong Imperf Pl P2 => va_ + "leste" ; --# notpresent
    Cong Imperf Pl P3 => va_ + "lessero" ; --# notpresent
    Cond Sg P1 => va_ + "rrei" ; --# notpresent
    Cond Sg P2 => va_ + "rresti" ; --# notpresent
    Cond Sg P3 => va_ + "rrebbe" ; --# notpresent
    Cond Pl P1 => va_ + "rremmo" ; --# notpresent
    Cond Pl P2 => va_ + "rreste" ; --# notpresent
    Cond Pl P3 => va_ + "rrebbero" ; --# notpresent
    Imper SgP2 => va_ + "li" ;
    Imper PlP1 => va_ + "liamo" ;
    Imper PlP2 => va_ + "lete" ;
    Ger => va_ + "lendo" ;
    Part PresP Masc Sg => va_ + "lente" ;
    Part PresP Masc Pl => va_ + "lenti" ;
    Part PresP Fem Sg => va_ + "lente" ;
    Part PresP Fem Pl => va_ + "lenti" ;
    Part PassP Masc Sg => va_ + "lso" ;
    Part PassP Masc Pl => va_ + "lsi" ;
    Part PassP Fem Sg => va_ + "lsa" ;
    Part PassP Fem Pl => va_ + "lse"
    }
  } ;

oper vedere_93 : Str -> Verbo = \vedereedere ->
  let vedere_ = Predef.tk 5 vedereedere in
 {s = table {
    Inf => vedere_ + "edere" ;
    InfClit => vedere_ + "eder" ;
    Indi Pres Sg P1 => vedere_ + "edo" ;
    Indi Pres Sg P2 => vedere_ + "edi" ;
    Indi Pres Sg P3 => vedere_ + "ede" ;
    Indi Pres Pl P1 => vedere_ + "ediamo" ;
    Indi Pres Pl P2 => vedere_ + "edete" ;
    Indi Pres Pl P3 => vedere_ + "edono" ;
    Indi Imperf Sg P1 => vedere_ + "edevo" ; --# notpresent
    Indi Imperf Sg P2 => vedere_ + "edevi" ; --# notpresent
    Indi Imperf Sg P3 => vedere_ + "edeva" ; --# notpresent
    Indi Imperf Pl P1 => vedere_ + "edevamo" ; --# notpresent
    Indi Imperf Pl P2 => vedere_ + "edevate" ; --# notpresent
    Indi Imperf Pl P3 => vedere_ + "edevano" ; --# notpresent
    Pass Sg P1 => vedere_ + "idi" ; --# notpresent
    Pass Sg P2 => vedere_ + "edesti" ; --# notpresent
    Pass Sg P3 => vedere_ + "ide" ; --# notpresent
    Pass Pl P1 => vedere_ + "edemmo" ; --# notpresent
    Pass Pl P2 => vedere_ + "edeste" ; --# notpresent
    Pass Pl P3 => vedere_ + "idero" ; --# notpresent
    Fut Sg P1 => vedere_ + "edrò" ; --# notpresent
    Fut Sg P2 => vedere_ + "edrai" ; --# notpresent
    Fut Sg P3 => vedere_ + "edrà" ; --# notpresent
    Fut Pl P1 => vedere_ + "edremo" ; --# notpresent
    Fut Pl P2 => vedere_ + "edrete" ; --# notpresent
    Fut Pl P3 => vedere_ + "edranno" ; --# notpresent
    Cong Pres Sg P1 => vedere_ + "eda" ;
    Cong Pres Sg P2 => vedere_ + "eda" ;
    Cong Pres Sg P3 => vedere_ + "eda" ;
    Cong Pres Pl P1 => vedere_ + "ediamo" ;
    Cong Pres Pl P2 => vedere_ + "ediate" ;
    Cong Pres Pl P3 => vedere_ + "edano" ;
    Cong Imperf Sg P1 => vedere_ + "edessi" ; --# notpresent
    Cong Imperf Sg P2 => vedere_ + "edessi" ; --# notpresent
    Cong Imperf Sg P3 => vedere_ + "edesse" ; --# notpresent
    Cong Imperf Pl P1 => vedere_ + "edessimo" ; --# notpresent
    Cong Imperf Pl P2 => vedere_ + "edeste" ; --# notpresent
    Cong Imperf Pl P3 => vedere_ + "edessero" ; --# notpresent
    Cond Sg P1 => vedere_ + "edrei" ; --# notpresent
    Cond Sg P2 => vedere_ + "edresti" ; --# notpresent
    Cond Sg P3 => vedere_ + "edrebbe" ; --# notpresent
    Cond Pl P1 => vedere_ + "edremmo" ; --# notpresent
    Cond Pl P2 => vedere_ + "edreste" ; --# notpresent
    Cond Pl P3 => vedere_ + "edrebbero" ; --# notpresent
    Imper SgP2 => vedere_ + "edi" ;
    Imper PlP1 => vedere_ + "ediamo" ;
    Imper PlP2 => vedere_ + "edete" ;
    Ger => vedere_ + "edendo" ;
    Part PresP Masc Sg => vedere_ + "edente" ;
    Part PresP Masc Pl => vedere_ + "edenti" ;
    Part PresP Fem Sg => vedere_ + "edente" ;
    Part PresP Fem Pl => vedere_ + "edenti" ;
    Part PassP Masc Sg => vedere_ + "isto" ;
    Part PassP Masc Pl => vedere_ + "isti" ;
    Part PassP Fem Sg => vedere_ + "ista" ;
    Part PassP Fem Pl => vedere_ + "iste"
    }
  } ;

oper vincere_94 : Str -> Verbo = \vincere ->
  let vin_ = Predef.tk 4 vincere in
 {s = table {
    Inf => vin_ + "cere" ;
    InfClit => vin_ + "cer" ;
    Indi Pres Sg P1 => vin_ + "co" ;
    Indi Pres Sg P2 => vin_ + "ci" ;
    Indi Pres Sg P3 => vin_ + "ce" ;
    Indi Pres Pl P1 => vin_ + "ciamo" ;
    Indi Pres Pl P2 => vin_ + "cete" ;
    Indi Pres Pl P3 => vin_ + "cono" ;
    Indi Imperf Sg P1 => vin_ + "cevo" ; --# notpresent
    Indi Imperf Sg P2 => vin_ + "cevi" ; --# notpresent
    Indi Imperf Sg P3 => vin_ + "ceva" ; --# notpresent
    Indi Imperf Pl P1 => vin_ + "cevamo" ; --# notpresent
    Indi Imperf Pl P2 => vin_ + "cevate" ; --# notpresent
    Indi Imperf Pl P3 => vin_ + "cevano" ; --# notpresent
    Pass Sg P1 => vin_ + "si" ; --# notpresent
    Pass Sg P2 => vin_ + "cesti" ; --# notpresent
    Pass Sg P3 => vin_ + "se" ; --# notpresent
    Pass Pl P1 => vin_ + "cemmo" ; --# notpresent
    Pass Pl P2 => vin_ + "ceste" ; --# notpresent
    Pass Pl P3 => vin_ + "sero" ; --# notpresent
    Fut Sg P1 => vin_ + "cerò" ; --# notpresent
    Fut Sg P2 => vin_ + "cerai" ; --# notpresent
    Fut Sg P3 => vin_ + "cerà" ; --# notpresent
    Fut Pl P1 => vin_ + "ceremo" ; --# notpresent
    Fut Pl P2 => vin_ + "cerete" ; --# notpresent
    Fut Pl P3 => vin_ + "ceranno" ; --# notpresent
    Cong Pres Sg P1 => vin_ + "ca" ;
    Cong Pres Sg P2 => vin_ + "ca" ;
    Cong Pres Sg P3 => vin_ + "ca" ;
    Cong Pres Pl P1 => vin_ + "ciamo" ;
    Cong Pres Pl P2 => vin_ + "ciate" ;
    Cong Pres Pl P3 => vin_ + "cano" ;
    Cong Imperf Sg P1 => vin_ + "cessi" ; --# notpresent
    Cong Imperf Sg P2 => vin_ + "cessi" ; --# notpresent
    Cong Imperf Sg P3 => vin_ + "cesse" ; --# notpresent
    Cong Imperf Pl P1 => vin_ + "cessimo" ; --# notpresent
    Cong Imperf Pl P2 => vin_ + "ceste" ; --# notpresent
    Cong Imperf Pl P3 => vin_ + "cessero" ; --# notpresent
    Cond Sg P1 => vin_ + "cerei" ; --# notpresent
    Cond Sg P2 => vin_ + "ceresti" ; --# notpresent
    Cond Sg P3 => vin_ + "cerebbe" ; --# notpresent
    Cond Pl P1 => vin_ + "ceremmo" ; --# notpresent
    Cond Pl P2 => vin_ + "cereste" ; --# notpresent
    Cond Pl P3 => vin_ + "cerebbero" ; --# notpresent
    Imper SgP2 => vin_ + "ci" ;
    Imper PlP1 => vin_ + "ciamo" ;
    Imper PlP2 => vin_ + "cete" ;
    Ger => vin_ + "cendo" ;
    Part PresP Masc Sg => vin_ + "cente" ;
    Part PresP Masc Pl => vin_ + "centi" ;
    Part PresP Fem Sg => vin_ + "cente" ;
    Part PresP Fem Pl => vin_ + "centi" ;
    Part PassP Masc Sg => vin_ + "to" ;
    Part PassP Masc Pl => vin_ + "ti" ;
    Part PassP Fem Sg => vin_ + "ta" ;
    Part PassP Fem Pl => vin_ + "te"
    }
  } ;

oper vivere_95 : Str -> Verbo = \viverevere ->
  let vivere_ = Predef.tk 4 viverevere in
 {s = table {
    Inf => vivere_ + "vere" ;
    InfClit => vivere_ + "ver" ;
    Indi Pres Sg P1 => vivere_ + "vo" ;
    Indi Pres Sg P2 => vivere_ + "vi" ;
    Indi Pres Sg P3 => vivere_ + "ve" ;
    Indi Pres Pl P1 => vivere_ + "viamo" ;
    Indi Pres Pl P2 => vivere_ + "vete" ;
    Indi Pres Pl P3 => vivere_ + "vono" ;
    Indi Imperf Sg P1 => vivere_ + "vevo" ; --# notpresent
    Indi Imperf Sg P2 => vivere_ + "vevi" ; --# notpresent
    Indi Imperf Sg P3 => vivere_ + "veva" ; --# notpresent
    Indi Imperf Pl P1 => vivere_ + "vevamo" ; --# notpresent
    Indi Imperf Pl P2 => vivere_ + "vevate" ; --# notpresent
    Indi Imperf Pl P3 => vivere_ + "vevano" ; --# notpresent
    Pass Sg P1 => vivere_ + "ssi" ; --# notpresent
    Pass Sg P2 => vivere_ + "vesti" ; --# notpresent
    Pass Sg P3 => vivere_ + "sse" ; --# notpresent
    Pass Pl P1 => vivere_ + "vemmo" ; --# notpresent
    Pass Pl P2 => vivere_ + "veste" ; --# notpresent
    Pass Pl P3 => vivere_ + "ssero" ; --# notpresent
    Fut Sg P1 => vivere_ + "vrò" ; --# notpresent
    Fut Sg P2 => vivere_ + "vrai" ; --# notpresent
    Fut Sg P3 => vivere_ + "vrà" ; --# notpresent
    Fut Pl P1 => vivere_ + "vremo" ; --# notpresent
    Fut Pl P2 => vivere_ + "vrete" ; --# notpresent
    Fut Pl P3 => vivere_ + "vranno" ; --# notpresent
    Cong Pres Sg P1 => vivere_ + "va" ;
    Cong Pres Sg P2 => vivere_ + "va" ;
    Cong Pres Sg P3 => vivere_ + "va" ;
    Cong Pres Pl P1 => vivere_ + "viamo" ;
    Cong Pres Pl P2 => vivere_ + "viate" ;
    Cong Pres Pl P3 => vivere_ + "vano" ;
    Cong Imperf Sg P1 => vivere_ + "vessi" ; --# notpresent
    Cong Imperf Sg P2 => vivere_ + "vessi" ; --# notpresent
    Cong Imperf Sg P3 => vivere_ + "vesse" ; --# notpresent
    Cong Imperf Pl P1 => vivere_ + "vessimo" ; --# notpresent
    Cong Imperf Pl P2 => vivere_ + "veste" ; --# notpresent
    Cong Imperf Pl P3 => vivere_ + "vessero" ; --# notpresent
    Cond Sg P1 => vivere_ + "vrei" ; --# notpresent
    Cond Sg P2 => vivere_ + "vresti" ; --# notpresent
    Cond Sg P3 => vivere_ + "vrebbe" ; --# notpresent
    Cond Pl P1 => vivere_ + "vremmo" ; --# notpresent
    Cond Pl P2 => vivere_ + "vreste" ; --# notpresent
    Cond Pl P3 => vivere_ + "vrebbero" ; --# notpresent
    Imper SgP2 => vivere_ + "vi" ;
    Imper PlP1 => vivere_ + "viamo" ;
    Imper PlP2 => vivere_ + "vete" ;
    Ger => vivere_ + "vendo" ;
    Part PresP Masc Sg => vivere_ + "vente" ;
    Part PresP Masc Pl => vivere_ + "venti" ;
    Part PresP Fem Sg => vivere_ + "vente" ;
    Part PresP Fem Pl => vivere_ + "venti" ;
    Part PassP Masc Sg => vivere_ + "ssuto" ;
    Part PassP Masc Pl => vivere_ + "ssuti" ;
    Part PassP Fem Sg => vivere_ + "ssuta" ;
    Part PassP Fem Pl => vivere_ + "ssute"
    }
  } ;

oper volere_96 : Str -> Verbo = \volere ->
  let v_ = Predef.tk 5 volere in
 {s = table {
    Inf => v_ + "olere" ;
    InfClit => v_ + "oler" ;
    Indi Pres Sg P1 => v_ + "oglio" ;
    Indi Pres Sg P2 => v_ + "uoi" ;
    Indi Pres Sg P3 => v_ + "uole" ;
    Indi Pres Pl P1 => v_ + "ogliamo" ;
    Indi Pres Pl P2 => v_ + "olete" ;
    Indi Pres Pl P3 => v_ + "ogliono" ;
    Indi Imperf Sg P1 => v_ + "olevo" ; --# notpresent
    Indi Imperf Sg P2 => v_ + "olevi" ; --# notpresent
    Indi Imperf Sg P3 => v_ + "oleva" ; --# notpresent
    Indi Imperf Pl P1 => v_ + "olevamo" ; --# notpresent
    Indi Imperf Pl P2 => v_ + "olevate" ; --# notpresent
    Indi Imperf Pl P3 => v_ + "olevano" ; --# notpresent
    Pass Sg P1 => v_ + "olli" ; --# notpresent
    Pass Sg P2 => v_ + "olesti" ; --# notpresent
    Pass Sg P3 => v_ + "olle" ; --# notpresent
    Pass Pl P1 => v_ + "olemmo" ; --# notpresent
    Pass Pl P2 => v_ + "oleste" ; --# notpresent
    Pass Pl P3 => v_ + "ollero" ; --# notpresent
    Fut Sg P1 => v_ + "orrò" ; --# notpresent
    Fut Sg P2 => v_ + "orrai" ; --# notpresent
    Fut Sg P3 => v_ + "orrà" ; --# notpresent
    Fut Pl P1 => v_ + "orremo" ; --# notpresent
    Fut Pl P2 => v_ + "orrete" ; --# notpresent
    Fut Pl P3 => v_ + "orranno" ; --# notpresent
    Cong Pres Sg P1 => v_ + "oglia" ;
    Cong Pres Sg P2 => v_ + "oglia" ;
    Cong Pres Sg P3 => v_ + "oglia" ;
    Cong Pres Pl P1 => v_ + "ogliamo" ;
    Cong Pres Pl P2 => v_ + "ogliate" ;
    Cong Pres Pl P3 => v_ + "ogliano" ;
    Cong Imperf Sg P1 => v_ + "olessi" ; --# notpresent
    Cong Imperf Sg P2 => v_ + "olessi" ; --# notpresent
    Cong Imperf Sg P3 => v_ + "olesse" ; --# notpresent
    Cong Imperf Pl P1 => v_ + "olessimo" ; --# notpresent
    Cong Imperf Pl P2 => v_ + "oleste" ; --# notpresent
    Cong Imperf Pl P3 => v_ + "olessero" ; --# notpresent
    Cond Sg P1 => v_ + "orrei" ; --# notpresent
    Cond Sg P2 => v_ + "orresti" ; --# notpresent
    Cond Sg P3 => v_ + "orrebbe" ; --# notpresent
    Cond Pl P1 => v_ + "orremmo" ; --# notpresent
    Cond Pl P2 => v_ + "orreste" ; --# notpresent
    Cond Pl P3 => v_ + "orrebbero" ; --# notpresent
    Imper SgP2 => v_ + "uoi" ;
    Imper PlP1 => v_ + "ogliamo" ;
    Imper PlP2 => v_ + "olete" ;
    Ger => v_ + "olendo" ;
    Part PresP Masc Sg => v_ + "olente" ;
    Part PresP Masc Pl => v_ + "olenti" ;
    Part PresP Fem Sg => v_ + "olente" ;
    Part PresP Fem Pl => v_ + "olenti" ;
    Part PassP Masc Sg => v_ + "oluto" ;
    Part PassP Masc Pl => v_ + "oluti" ;
    Part PassP Fem Sg => v_ + "oluta" ;
    Part PassP Fem Pl => v_ + "olute"
    }
  } ;

oper volgere_97 : Str -> Verbo = \volgere ->
  let vol_ = Predef.tk 4 volgere in
 {s = table {
    Inf => vol_ + "gere" ;
    InfClit => vol_ + "ger" ;
    Indi Pres Sg P1 => vol_ + "go" ;
    Indi Pres Sg P2 => vol_ + "gi" ;
    Indi Pres Sg P3 => vol_ + "ge" ;
    Indi Pres Pl P1 => vol_ + "giamo" ;
    Indi Pres Pl P2 => vol_ + "gete" ;
    Indi Pres Pl P3 => vol_ + "gono" ;
    Indi Imperf Sg P1 => vol_ + "gevo" ; --# notpresent
    Indi Imperf Sg P2 => vol_ + "gevi" ; --# notpresent
    Indi Imperf Sg P3 => vol_ + "geva" ; --# notpresent
    Indi Imperf Pl P1 => vol_ + "gevamo" ; --# notpresent
    Indi Imperf Pl P2 => vol_ + "gevate" ; --# notpresent
    Indi Imperf Pl P3 => vol_ + "gevano" ; --# notpresent
    Pass Sg P1 => vol_ + "si" ; --# notpresent
    Pass Sg P2 => vol_ + "gesti" ; --# notpresent
    Pass Sg P3 => vol_ + "se" ; --# notpresent
    Pass Pl P1 => vol_ + "gemmo" ; --# notpresent
    Pass Pl P2 => vol_ + "geste" ; --# notpresent
    Pass Pl P3 => vol_ + "sero" ; --# notpresent
    Fut Sg P1 => vol_ + "gerò" ; --# notpresent
    Fut Sg P2 => vol_ + "gerai" ; --# notpresent
    Fut Sg P3 => vol_ + "gerà" ; --# notpresent
    Fut Pl P1 => vol_ + "geremo" ; --# notpresent
    Fut Pl P2 => vol_ + "gerete" ; --# notpresent
    Fut Pl P3 => vol_ + "geranno" ; --# notpresent
    Cong Pres Sg P1 => vol_ + "ga" ;
    Cong Pres Sg P2 => vol_ + "ga" ;
    Cong Pres Sg P3 => vol_ + "ga" ;
    Cong Pres Pl P1 => vol_ + "giamo" ;
    Cong Pres Pl P2 => vol_ + "giate" ;
    Cong Pres Pl P3 => vol_ + "gano" ;
    Cong Imperf Sg P1 => vol_ + "gessi" ; --# notpresent
    Cong Imperf Sg P2 => vol_ + "gessi" ; --# notpresent
    Cong Imperf Sg P3 => vol_ + "gesse" ; --# notpresent
    Cong Imperf Pl P1 => vol_ + "gessimo" ; --# notpresent
    Cong Imperf Pl P2 => vol_ + "geste" ; --# notpresent
    Cong Imperf Pl P3 => vol_ + "gessero" ; --# notpresent
    Cond Sg P1 => vol_ + "gerei" ; --# notpresent
    Cond Sg P2 => vol_ + "geresti" ; --# notpresent
    Cond Sg P3 => vol_ + "gerebbe" ; --# notpresent
    Cond Pl P1 => vol_ + "geremmo" ; --# notpresent
    Cond Pl P2 => vol_ + "gereste" ; --# notpresent
    Cond Pl P3 => vol_ + "gerebbero" ; --# notpresent
    Imper SgP2 => vol_ + "gi" ;
    Imper PlP1 => vol_ + "giamo" ;
    Imper PlP2 => vol_ + "gete" ;
    Ger => vol_ + "gendo" ;
    Part PresP Masc Sg => vol_ + "gente" ;
    Part PresP Masc Pl => vol_ + "genti" ;
    Part PresP Fem Sg => vol_ + "gente" ;
    Part PresP Fem Pl => vol_ + "genti" ;
    Part PassP Masc Sg => vol_ + "to" ;
    Part PassP Masc Pl => vol_ + "ti" ;
    Part PassP Fem Sg => vol_ + "ta" ;
    Part PassP Fem Pl => vol_ + "te"
    }
  } ;

---- solere_98a
---- suggere_98b

oper sentire_99 : Str -> Verbo = \sentire ->
  let sen_ = Predef.tk 4 sentire in
 {s = table {
    Inf => sen_ + "tire" ;
    InfClit => sen_ + "tir" ;
    Indi Pres Sg P1 => sen_ + "to" ;
    Indi Pres Sg P2 => sen_ + "ti" ;
    Indi Pres Sg P3 => sen_ + "te" ;
    Indi Pres Pl P1 => sen_ + "tiamo" ;
    Indi Pres Pl P2 => sen_ + "tite" ;
    Indi Pres Pl P3 => sen_ + "tono" ;
    Indi Imperf Sg P1 => sen_ + "tivo" ; --# notpresent
    Indi Imperf Sg P2 => sen_ + "tivi" ; --# notpresent
    Indi Imperf Sg P3 => sen_ + "tiva" ; --# notpresent
    Indi Imperf Pl P1 => sen_ + "tivamo" ; --# notpresent
    Indi Imperf Pl P2 => sen_ + "tivate" ; --# notpresent
    Indi Imperf Pl P3 => sen_ + "tivano" ; --# notpresent
    Pass Sg P1 => sen_ + "tii" ; --# notpresent
    Pass Sg P2 => sen_ + "tisti" ; --# notpresent
    Pass Sg P3 => sen_ + "tì" ; --# notpresent
    Pass Pl P1 => sen_ + "timmo" ; --# notpresent
    Pass Pl P2 => sen_ + "tiste" ; --# notpresent
    Pass Pl P3 => sen_ + "tirono" ; --# notpresent
    Fut Sg P1 => sen_ + "tirò" ; --# notpresent
    Fut Sg P2 => sen_ + "tirai" ; --# notpresent
    Fut Sg P3 => sen_ + "tirà" ; --# notpresent
    Fut Pl P1 => sen_ + "tiremo" ; --# notpresent
    Fut Pl P2 => sen_ + "tirete" ; --# notpresent
    Fut Pl P3 => sen_ + "tiranno" ; --# notpresent
    Cong Pres Sg P1 => sen_ + "ta" ;
    Cong Pres Sg P2 => sen_ + "ta" ;
    Cong Pres Sg P3 => sen_ + "ta" ;
    Cong Pres Pl P1 => sen_ + "tiamo" ;
    Cong Pres Pl P2 => sen_ + "tiate" ;
    Cong Pres Pl P3 => sen_ + "tano" ;
    Cong Imperf Sg P1 => sen_ + "tissi" ; --# notpresent
    Cong Imperf Sg P2 => sen_ + "tissi" ; --# notpresent
    Cong Imperf Sg P3 => sen_ + "tisse" ; --# notpresent
    Cong Imperf Pl P1 => sen_ + "tissimo" ; --# notpresent
    Cong Imperf Pl P2 => sen_ + "tiste" ; --# notpresent
    Cong Imperf Pl P3 => sen_ + "tissero" ; --# notpresent
    Cond Sg P1 => sen_ + "tirei" ; --# notpresent
    Cond Sg P2 => sen_ + "tiresti" ; --# notpresent
    Cond Sg P3 => sen_ + "tirebbe" ; --# notpresent
    Cond Pl P1 => sen_ + "tiremmo" ; --# notpresent
    Cond Pl P2 => sen_ + "tireste" ; --# notpresent
    Cond Pl P3 => sen_ + "tirebbero" ; --# notpresent
    Imper SgP2 => sen_ + "ti" ;
    Imper PlP1 => sen_ + "tiamo" ;
    Imper PlP2 => sen_ + "tite" ;
    Ger => sen_ + "tendo" ;
    Part PresP Masc Sg => sen_ + "zient" ;
    Part PresP Masc Pl => sen_ + "zieni" ;
    Part PresP Fem Sg => sen_ + "zient" ;
    Part PresP Fem Pl => sen_ + "zieni" ;
    Part PassP Masc Sg => sen_ + "tito" ;
    Part PassP Masc Pl => sen_ + "titi" ;
    Part PassP Fem Sg => sen_ + "tita" ;
    Part PassP Fem Pl => sen_ + "tite"
    }
  } ;

oper dormire_99b : Str -> Verbo = \dormire ->
  let dorm_ = Predef.tk 3 dormire in
 {s = table {
    Inf => dorm_ + "ire" ;
    InfClit => dorm_ + "ir" ;
    Indi Pres Sg P1 => dorm_ + "o" ;
    Indi Pres Sg P2 => dorm_ + "i" ;
    Indi Pres Sg P3 => dorm_ + "e" ;
    Indi Pres Pl P1 => dorm_ + "iamo" ;
    Indi Pres Pl P2 => dorm_ + "ite" ;
    Indi Pres Pl P3 => dorm_ + "ono" ;
    Indi Imperf Sg P1 => dorm_ + "ivo" ; --# notpresent
    Indi Imperf Sg P2 => dorm_ + "ivi" ; --# notpresent
    Indi Imperf Sg P3 => dorm_ + "iva" ; --# notpresent
    Indi Imperf Pl P1 => dorm_ + "ivamo" ; --# notpresent
    Indi Imperf Pl P2 => dorm_ + "ivate" ; --# notpresent
    Indi Imperf Pl P3 => dorm_ + "ivano" ; --# notpresent
    Pass Sg P1 => dorm_ + "ii" ; --# notpresent
    Pass Sg P2 => dorm_ + "isti" ; --# notpresent
    Pass Sg P3 => dorm_ + "ì" ; --# notpresent
    Pass Pl P1 => dorm_ + "immo" ; --# notpresent
    Pass Pl P2 => dorm_ + "iste" ; --# notpresent
    Pass Pl P3 => dorm_ + "irono" ; --# notpresent
    Fut Sg P1 => dorm_ + "irò" ; --# notpresent
    Fut Sg P2 => dorm_ + "irai" ; --# notpresent
    Fut Sg P3 => dorm_ + "irà" ; --# notpresent
    Fut Pl P1 => dorm_ + "iremo" ; --# notpresent
    Fut Pl P2 => dorm_ + "irete" ; --# notpresent
    Fut Pl P3 => dorm_ + "iranno" ; --# notpresent
    Cong Pres Sg P1 => dorm_ + "a" ;
    Cong Pres Sg P2 => dorm_ + "a" ;
    Cong Pres Sg P3 => dorm_ + "a" ;
    Cong Pres Pl P1 => dorm_ + "iamo" ;
    Cong Pres Pl P2 => dorm_ + "iate" ;
    Cong Pres Pl P3 => dorm_ + "ano" ;
    Cong Imperf Sg P1 => dorm_ + "issi" ; --# notpresent
    Cong Imperf Sg P2 => dorm_ + "issi" ; --# notpresent
    Cong Imperf Sg P3 => dorm_ + "isse" ; --# notpresent
    Cong Imperf Pl P1 => dorm_ + "issimo" ; --# notpresent
    Cong Imperf Pl P2 => dorm_ + "iste" ; --# notpresent
    Cong Imperf Pl P3 => dorm_ + "issero" ; --# notpresent
    Cond Sg P1 => dorm_ + "irei" ; --# notpresent
    Cond Sg P2 => dorm_ + "iresti" ; --# notpresent
    Cond Sg P3 => dorm_ + "irebbe" ; --# notpresent
    Cond Pl P1 => dorm_ + "iremmo" ; --# notpresent
    Cond Pl P2 => dorm_ + "ireste" ; --# notpresent
    Cond Pl P3 => dorm_ + "irebbero" ; --# notpresent
    Imper SgP2 => dorm_ + "i" ;
    Imper PlP1 => dorm_ + "iamo" ;
    Imper PlP2 => dorm_ + "ite" ;
    Ger => dorm_ + "endo" ;
    Part PresP Masc Sg => dorm_ + "ente" ;
    Part PresP Masc Pl => dorm_ + "enti" ;
    Part PresP Fem Sg => dorm_ + "ente" ;
    Part PresP Fem Pl => dorm_ + "enti" ;
    Part PassP Masc Sg => dorm_ + "ito" ;
    Part PassP Masc Pl => dorm_ + "iti" ;
    Part PassP Fem Sg => dorm_ + "ita" ;
    Part PassP Fem Pl => dorm_ + "ite"
    }
  } ;

oper finire_100 : Str -> Verbo = \finire ->
  let fin_ = Predef.tk 3 finire in
 {s = table {
    Inf => fin_ + "ire" ;
    InfClit => fin_ + "ir" ;
    Indi Pres Sg P1 => fin_ + "isco" ;
    Indi Pres Sg P2 => fin_ + "isci" ;
    Indi Pres Sg P3 => fin_ + "isce" ;
    Indi Pres Pl P1 => fin_ + "iamo" ;
    Indi Pres Pl P2 => fin_ + "ite" ;
    Indi Pres Pl P3 => fin_ + "iscono" ;
    Indi Imperf Sg P1 => fin_ + "ivo" ; --# notpresent
    Indi Imperf Sg P2 => fin_ + "ivi" ; --# notpresent
    Indi Imperf Sg P3 => fin_ + "iva" ; --# notpresent
    Indi Imperf Pl P1 => fin_ + "ivamo" ; --# notpresent
    Indi Imperf Pl P2 => fin_ + "ivate" ; --# notpresent
    Indi Imperf Pl P3 => fin_ + "ivano" ; --# notpresent
    Pass Sg P1 => fin_ + "ii" ; --# notpresent
    Pass Sg P2 => fin_ + "isti" ; --# notpresent
    Pass Sg P3 => fin_ + "ì" ; --# notpresent
    Pass Pl P1 => fin_ + "immo" ; --# notpresent
    Pass Pl P2 => fin_ + "iste" ; --# notpresent
    Pass Pl P3 => fin_ + "irono" ; --# notpresent
    Fut Sg P1 => fin_ + "irò" ; --# notpresent
    Fut Sg P2 => fin_ + "irai" ; --# notpresent
    Fut Sg P3 => fin_ + "irà" ; --# notpresent
    Fut Pl P1 => fin_ + "iremo" ; --# notpresent
    Fut Pl P2 => fin_ + "irete" ; --# notpresent
    Fut Pl P3 => fin_ + "iranno" ; --# notpresent
    Cong Pres Sg P1 => fin_ + "isca" ;
    Cong Pres Sg P2 => fin_ + "isca" ;
    Cong Pres Sg P3 => fin_ + "isca" ;
    Cong Pres Pl P1 => fin_ + "iamo" ;
    Cong Pres Pl P2 => fin_ + "iate" ;
    Cong Pres Pl P3 => fin_ + "iscano" ;
    Cong Imperf Sg P1 => fin_ + "issi" ; --# notpresent
    Cong Imperf Sg P2 => fin_ + "issi" ; --# notpresent
    Cong Imperf Sg P3 => fin_ + "isse" ; --# notpresent
    Cong Imperf Pl P1 => fin_ + "issimo" ; --# notpresent
    Cong Imperf Pl P2 => fin_ + "iste" ; --# notpresent
    Cong Imperf Pl P3 => fin_ + "issero" ; --# notpresent
    Cond Sg P1 => fin_ + "irei" ; --# notpresent
    Cond Sg P2 => fin_ + "iresti" ; --# notpresent
    Cond Sg P3 => fin_ + "irebbe" ; --# notpresent
    Cond Pl P1 => fin_ + "iremmo" ; --# notpresent
    Cond Pl P2 => fin_ + "ireste" ; --# notpresent
    Cond Pl P3 => fin_ + "irebbero" ; --# notpresent
    Imper SgP2 => fin_ + "isci" ;
    Imper PlP1 => fin_ + "iamo" ;
    Imper PlP2 => fin_ + "ite" ;
    Ger => fin_ + "endo" ;
    Part PresP Masc Sg => fin_ + "ente" ;
    Part PresP Masc Pl => fin_ + "enti" ;
    Part PresP Fem Sg => fin_ + "ente" ;
    Part PresP Fem Pl => fin_ + "enti" ;
    Part PassP Masc Sg => fin_ + "ito" ;
    Part PassP Masc Pl => fin_ + "iti" ;
    Part PassP Fem Sg => fin_ + "ita" ;
    Part PassP Fem Pl => fin_ + "ite"
    }
  } ;

---- apparire_101

oper aprire_102 : Str -> Verbo = \aprire ->
  let ap_ = Predef.tk 4 aprire in
 {s = table {
    Inf => ap_ + "rire" ;
    InfClit => ap_ + "rir" ;
    Indi Pres Sg P1 => ap_ + "ro" ;
    Indi Pres Sg P2 => ap_ + "ri" ;
    Indi Pres Sg P3 => ap_ + "re" ;
    Indi Pres Pl P1 => ap_ + "riamo" ;
    Indi Pres Pl P2 => ap_ + "rite" ;
    Indi Pres Pl P3 => ap_ + "rono" ;
    Indi Imperf Sg P1 => ap_ + "rivo" ; --# notpresent
    Indi Imperf Sg P2 => ap_ + "rivi" ; --# notpresent
    Indi Imperf Sg P3 => ap_ + "riva" ; --# notpresent
    Indi Imperf Pl P1 => ap_ + "rivamo" ; --# notpresent
    Indi Imperf Pl P2 => ap_ + "rivate" ; --# notpresent
    Indi Imperf Pl P3 => ap_ + "rivano" ; --# notpresent
    Pass Sg P1 => variants {ap_ + "rii" ; ap_ + "ersi"} ; --# notpresent
    Pass Sg P2 => ap_ + "risti" ; --# notpresent
    Pass Sg P3 => variants {ap_ + "rì" ; ap_ + "erse"} ; --# notpresent
    Pass Pl P1 => ap_ + "rimmo" ; --# notpresent
    Pass Pl P2 => ap_ + "riste" ; --# notpresent
    Pass Pl P3 => variants {ap_ + "rirono" ; ap_ + "ersero"} ; --# notpresent
    Fut Sg P1 => ap_ + "rirò" ; --# notpresent
    Fut Sg P2 => ap_ + "rirai" ; --# notpresent
    Fut Sg P3 => ap_ + "rirà" ; --# notpresent
    Fut Pl P1 => ap_ + "riremo" ; --# notpresent
    Fut Pl P2 => ap_ + "rirete" ; --# notpresent
    Fut Pl P3 => ap_ + "riranno" ; --# notpresent
    Cong Pres Sg P1 => ap_ + "ra" ;
    Cong Pres Sg P2 => ap_ + "ra" ;
    Cong Pres Sg P3 => ap_ + "ra" ;
    Cong Pres Pl P1 => ap_ + "riamo" ;
    Cong Pres Pl P2 => ap_ + "riate" ;
    Cong Pres Pl P3 => ap_ + "rano" ;
    Cong Imperf Sg P1 => ap_ + "rissi" ; --# notpresent
    Cong Imperf Sg P2 => ap_ + "rissi" ; --# notpresent
    Cong Imperf Sg P3 => ap_ + "risse" ; --# notpresent
    Cong Imperf Pl P1 => ap_ + "rissimo" ; --# notpresent
    Cong Imperf Pl P2 => ap_ + "riste" ; --# notpresent
    Cong Imperf Pl P3 => ap_ + "rissero" ; --# notpresent
    Cond Sg P1 => ap_ + "rirei" ; --# notpresent
    Cond Sg P2 => ap_ + "riresti" ; --# notpresent
    Cond Sg P3 => ap_ + "rirebbe" ; --# notpresent
    Cond Pl P1 => ap_ + "riremmo" ; --# notpresent
    Cond Pl P2 => ap_ + "rireste" ; --# notpresent
    Cond Pl P3 => ap_ + "rirebbero" ; --# notpresent
    Imper SgP2 => ap_ + "ri" ;
    Imper PlP1 => ap_ + "riamo" ;
    Imper PlP2 => ap_ + "rite" ;
    Ger => ap_ + "rendo" ;
    Part PresP Masc Sg => ap_ + "rendo" ;
    Part PresP Masc Pl => ap_ + "rendo" ;
    Part PresP Fem Sg => ap_ + "rendo" ;
    Part PresP Fem Pl => ap_ + "rendo" ;
    Part PassP Masc Sg => ap_ + "erto" ;
    Part PassP Masc Pl => ap_ + "erti" ;
    Part PassP Fem Sg => ap_ + "erta" ;
    Part PassP Fem Pl => ap_ + "erte"
    }
  } ;


oper cucire_103 : Str -> Verbo = \cucire ->
  let cuc_ = Predef.tk 3 cucire in
 {s = table {
    Inf => cuc_ + "ire" ;
    InfClit => cuc_ + "ir" ;
    Indi Pres Sg P1 => cuc_ + "io" ;
    Indi Pres Sg P2 => cuc_ + "i" ;
    Indi Pres Sg P3 => cuc_ + "e" ;
    Indi Pres Pl P1 => cuc_ + "iamo" ;
    Indi Pres Pl P2 => cuc_ + "ite" ;
    Indi Pres Pl P3 => cuc_ + "iono" ;
    Indi Imperf Sg P1 => cuc_ + "ivo" ; --# notpresent
    Indi Imperf Sg P2 => cuc_ + "ivi" ; --# notpresent
    Indi Imperf Sg P3 => cuc_ + "iva" ; --# notpresent
    Indi Imperf Pl P1 => cuc_ + "ivamo" ; --# notpresent
    Indi Imperf Pl P2 => cuc_ + "ivate" ; --# notpresent
    Indi Imperf Pl P3 => cuc_ + "ivano" ; --# notpresent
    Pass Sg P1 => cuc_ + "ii" ; --# notpresent
    Pass Sg P2 => cuc_ + "isti" ; --# notpresent
    Pass Sg P3 => cuc_ + "ì" ; --# notpresent
    Pass Pl P1 => cuc_ + "immo" ; --# notpresent
    Pass Pl P2 => cuc_ + "iste" ; --# notpresent
    Pass Pl P3 => cuc_ + "irono" ; --# notpresent
    Fut Sg P1 => cuc_ + "irò" ; --# notpresent
    Fut Sg P2 => cuc_ + "irai" ; --# notpresent
    Fut Sg P3 => cuc_ + "irà" ; --# notpresent
    Fut Pl P1 => cuc_ + "iremo" ; --# notpresent
    Fut Pl P2 => cuc_ + "irete" ; --# notpresent
    Fut Pl P3 => cuc_ + "iranno" ; --# notpresent
    Cong Pres Sg P1 => cuc_ + "ia" ;
    Cong Pres Sg P2 => cuc_ + "ia" ;
    Cong Pres Sg P3 => cuc_ + "ia" ;
    Cong Pres Pl P1 => cuc_ + "iamo" ;
    Cong Pres Pl P2 => cuc_ + "iate" ;
    Cong Pres Pl P3 => cuc_ + "iano" ;
    Cong Imperf Sg P1 => cuc_ + "issi" ; --# notpresent
    Cong Imperf Sg P2 => cuc_ + "issi" ; --# notpresent
    Cong Imperf Sg P3 => cuc_ + "isse" ; --# notpresent
    Cong Imperf Pl P1 => cuc_ + "issimo" ; --# notpresent
    Cong Imperf Pl P2 => cuc_ + "iste" ; --# notpresent
    Cong Imperf Pl P3 => cuc_ + "issero" ; --# notpresent
    Cond Sg P1 => cuc_ + "irei" ; --# notpresent
    Cond Sg P2 => cuc_ + "iresti" ; --# notpresent
    Cond Sg P3 => cuc_ + "irebbe" ; --# notpresent
    Cond Pl P1 => cuc_ + "iremmo" ; --# notpresent
    Cond Pl P2 => cuc_ + "ireste" ; --# notpresent
    Cond Pl P3 => cuc_ + "irebbero" ; --# notpresent
    Imper SgP2 => cuc_ + "i" ;
    Imper PlP1 => cuc_ + "iamo" ;
    Imper PlP2 => cuc_ + "ite" ;
    Ger => cuc_ + "endo" ;
    Part PresP Masc Sg => cuc_ + "ente" ;
    Part PresP Masc Pl => cuc_ + "enti" ;
    Part PresP Fem Sg => cuc_ + "ente" ;
    Part PresP Fem Pl => cuc_ + "enti" ;
    Part PassP Masc Sg => cuc_ + "ito" ;
    Part PassP Masc Pl => cuc_ + "iti" ;
    Part PassP Fem Sg => cuc_ + "ita" ;
    Part PassP Fem Pl => cuc_ + "ite"
    }
  } ;

oper fuggire_104 : Str -> Verbo = \fuggire ->
  let fugg_ = Predef.tk 3 fuggire in
 {s = table {
    Inf => fugg_ + "ire" ;
    InfClit => fugg_ + "ir" ;
    Indi Pres Sg P1 => fugg_ + "o" ;
    Indi Pres Sg P2 => fugg_ + "i" ;
    Indi Pres Sg P3 => fugg_ + "e" ;
    Indi Pres Pl P1 => fugg_ + "iamo" ;
    Indi Pres Pl P2 => fugg_ + "ite" ;
    Indi Pres Pl P3 => fugg_ + "ono" ;
    Indi Imperf Sg P1 => fugg_ + "ivo" ; --# notpresent
    Indi Imperf Sg P2 => fugg_ + "ivi" ; --# notpresent
    Indi Imperf Sg P3 => fugg_ + "iva" ; --# notpresent
    Indi Imperf Pl P1 => fugg_ + "ivamo" ; --# notpresent
    Indi Imperf Pl P2 => fugg_ + "ivate" ; --# notpresent
    Indi Imperf Pl P3 => fugg_ + "ivano" ; --# notpresent
    Pass Sg P1 => fugg_ + "ii" ; --# notpresent
    Pass Sg P2 => fugg_ + "isti" ; --# notpresent
    Pass Sg P3 => fugg_ + "ì" ; --# notpresent
    Pass Pl P1 => fugg_ + "immo" ; --# notpresent
    Pass Pl P2 => fugg_ + "iste" ; --# notpresent
    Pass Pl P3 => fugg_ + "irono" ; --# notpresent
    Fut Sg P1 => fugg_ + "irò" ; --# notpresent
    Fut Sg P2 => fugg_ + "irai" ; --# notpresent
    Fut Sg P3 => fugg_ + "irà" ; --# notpresent
    Fut Pl P1 => fugg_ + "iremo" ; --# notpresent
    Fut Pl P2 => fugg_ + "irete" ; --# notpresent
    Fut Pl P3 => fugg_ + "iranno" ; --# notpresent
    Cong Pres Sg P1 => fugg_ + "a" ;
    Cong Pres Sg P2 => fugg_ + "a" ;
    Cong Pres Sg P3 => fugg_ + "a" ;
    Cong Pres Pl P1 => fugg_ + "iamo" ;
    Cong Pres Pl P2 => fugg_ + "iate" ;
    Cong Pres Pl P3 => fugg_ + "ano" ;
    Cong Imperf Sg P1 => fugg_ + "issi" ; --# notpresent
    Cong Imperf Sg P2 => fugg_ + "issi" ; --# notpresent
    Cong Imperf Sg P3 => fugg_ + "isse" ; --# notpresent
    Cong Imperf Pl P1 => fugg_ + "issimo" ; --# notpresent
    Cong Imperf Pl P2 => fugg_ + "iste" ; --# notpresent
    Cong Imperf Pl P3 => fugg_ + "issero" ; --# notpresent
    Cond Sg P1 => fugg_ + "irei" ; --# notpresent
    Cond Sg P2 => fugg_ + "iresti" ; --# notpresent
    Cond Sg P3 => fugg_ + "irebbe" ; --# notpresent
    Cond Pl P1 => fugg_ + "iremmo" ; --# notpresent
    Cond Pl P2 => fugg_ + "ireste" ; --# notpresent
    Cond Pl P3 => fugg_ + "irebbero" ; --# notpresent
    Imper SgP2 => fugg_ + "i" ;
    Imper PlP1 => fugg_ + "iamo" ;
    Imper PlP2 => fugg_ + "ite" ;
    Ger => fugg_ + "endo" ;
    Part PresP Masc Sg => fugg_ + "ente" ;
    Part PresP Masc Pl => fugg_ + "enti" ;
    Part PresP Fem Sg => fugg_ + "ente" ;
    Part PresP Fem Pl => fugg_ + "enti" ;
    Part PassP Masc Sg => fugg_ + "ito" ;
    Part PassP Masc Pl => fugg_ + "iti" ;
    Part PassP Fem Sg => fugg_ + "ita" ;
    Part PassP Fem Pl => fugg_ + "ite"
    }
  } ;

oper morire_105 : Str -> Verbo = \morire ->
  let mor_ = Predef.tk 3 morire ;
      m_   = Predef.tk 5 morire
  in
 {s = table {
    Inf => mor_ + "ire" ;
    InfClit => mor_ + "ir" ;
    Indi Pres Sg P1 => m_ + "uoio" ;
    Indi Pres Sg P2 => m_ + "uori" ;
    Indi Pres Sg P3 => m_ + "uore" ;
    Indi Pres Pl P1 => mor_ + "iamo" ;
    Indi Pres Pl P2 => mor_ + "ite" ;
    Indi Pres Pl P3 => m_ + "uoiono" ;
    Indi Imperf Sg P1 => mor_ + "ivo" ; --# notpresent
    Indi Imperf Sg P2 => mor_ + "ivi" ; --# notpresent
    Indi Imperf Sg P3 => mor_ + "iva" ; --# notpresent
    Indi Imperf Pl P1 => mor_ + "ivamo" ; --# notpresent
    Indi Imperf Pl P2 => mor_ + "ivate" ; --# notpresent
    Indi Imperf Pl P3 => mor_ + "ivano" ; --# notpresent
    Pass Sg P1 => mor_ + "ii" ; --# notpresent
    Pass Sg P2 => mor_ + "isti" ; --# notpresent
    Pass Sg P3 => mor_ + "ì" ; --# notpresent
    Pass Pl P1 => mor_ + "immo" ; --# notpresent
    Pass Pl P2 => mor_ + "iste" ; --# notpresent
    Pass Pl P3 => mor_ + "irono" ; --# notpresent
    Fut Sg P1 => mor_ + "irò" ;  ---- also morrò etc --# notpresent
    Fut Sg P2 => mor_ + "irai" ; --# notpresent
    Fut Sg P3 => mor_ + "irà" ; --# notpresent
    Fut Pl P1 => mor_ + "iremo" ; --# notpresent
    Fut Pl P2 => mor_ + "irete" ; --# notpresent
    Fut Pl P3 => mor_ + "iranno" ; --# notpresent
    Cong Pres Sg P1 => m_ + "uoia" ;
    Cong Pres Sg P2 => m_ + "uoia" ;
    Cong Pres Sg P3 => m_ + "uoia" ;
    Cong Pres Pl P1 => mor_ + "iamo" ;
    Cong Pres Pl P2 => mor_ + "iate" ;
    Cong Pres Pl P3 => m_ + "uoiano" ;
    Cong Imperf Sg P1 => mor_ + "issi" ; --# notpresent
    Cong Imperf Sg P2 => mor_ + "issi" ; --# notpresent
    Cong Imperf Sg P3 => mor_ + "isse" ; --# notpresent
    Cong Imperf Pl P1 => mor_ + "issimo" ; --# notpresent
    Cong Imperf Pl P2 => mor_ + "iste" ; --# notpresent
    Cong Imperf Pl P3 => mor_ + "issero" ; --# notpresent
    Cond Sg P1 => mor_ + "irei" ; --# notpresent
    Cond Sg P2 => mor_ + "iresti" ; --# notpresent
    Cond Sg P3 => mor_ + "irebbe" ; --# notpresent
    Cond Pl P1 => mor_ + "iremmo" ; --# notpresent
    Cond Pl P2 => mor_ + "ireste" ; --# notpresent
    Cond Pl P3 => mor_ + "irebbero" ; --# notpresent
    Imper SgP2 => m_ + "uori" ;
    Imper PlP1 => mor_ + "iamo" ;
    Imper PlP2 => mor_ + "ite" ;
    Ger => mor_ + "endo" ;
    Part PresP Masc Sg => mor_ + "ente" ;
    Part PresP Masc Pl => mor_ + "enti" ;
    Part PresP Fem Sg => mor_ + "ente" ;
    Part PresP Fem Pl => mor_ + "enti" ;
    Part PassP Masc Sg => mor_ + "to" ;
    Part PassP Masc Pl => mor_ + "ti" ;
    Part PassP Fem Sg => mor_ + "ta" ;
    Part PassP Fem Pl => mor_ + "te"
    }
  } ;

oper salire_106 : Str -> Verbo = \salire ->
  let x_ = Predef.tk 6 salire in
    mkVerbo
     (x_ + "salire") (x_ + "salgo") (x_ + "sale") (x_ + "saliamo")
     (x_ + "salirò") (x_ + "salii") (x_ + "salisti") (x_ + "salì")
     (x_ + "salirono") (x_ + "sali") (x_ + "salito") ;

oper seguire_107 : Str -> Verbo = \seguire ->
  let x_ = Predef.tk 7 seguire in
    mkVerbo
     (x_ + "seguire") (x_ + "seguo") (x_ + "segue") (x_ + "seguiamo")
     (x_ + "seguirò") (x_ + "seguii") (x_ + "seguisti") (x_ + "seguì")
     (x_ + "seguirono") (x_ + "segui") (x_ + "seguito") ;

oper udire_108 : Str -> Verbo = \udire ->
  let x_ = Predef.tk 5 udire in
    mkVerbo (x_ + "udire") (x_ + "odo") (x_ + "ode") (x_ + "udiamo")
     (x_ + "udirò") (x_ + "udii") (x_ + "udisti") (x_ + "udì")
     (x_ + "udirono") (x_ + "odi") (x_ + "udito") ;

oper uscire_109 : Str -> Verbo = \uscire ->
  let x_ = Predef.tk 6 uscire in
    mkVerbo (x_ + "uscire") (x_ + "esco") (x_ + "esce")
      (x_ + "usciamo") (x_ + "uscirò") (x_ + "uscii") (x_ + "uscisti")
      (x_ + "uscì") (x_ + "uscirono") (x_ + "esci") (x_ + "uscito") ;

oper venire_110 : Str -> Verbo = \venire ->
  let v_ = Predef.tk 5 venire in
 {s = table {
    Inf => v_ + "enire" ;
    InfClit => v_ + "enir" ;
    Indi Pres Sg P1 => v_ + "engo" ;
    Indi Pres Sg P2 => v_ + "ieni" ;
    Indi Pres Sg P3 => v_ + "iene" ;
    Indi Pres Pl P1 => v_ + "eniamo" ;
    Indi Pres Pl P2 => v_ + "enite" ;
    Indi Pres Pl P3 => v_ + "engono" ;
    Indi Imperf Sg P1 => v_ + "enivo" ; --# notpresent
    Indi Imperf Sg P2 => v_ + "enivi" ; --# notpresent
    Indi Imperf Sg P3 => v_ + "eniva" ; --# notpresent
    Indi Imperf Pl P1 => v_ + "enivamo" ; --# notpresent
    Indi Imperf Pl P2 => v_ + "enivate" ; --# notpresent
    Indi Imperf Pl P3 => v_ + "enivano" ; --# notpresent
    Pass Sg P1 => v_ + "enni" ; --# notpresent
    Pass Sg P2 => v_ + "enisti" ; --# notpresent
    Pass Sg P3 => v_ + "enne" ; --# notpresent
    Pass Pl P1 => v_ + "enimmo" ; --# notpresent
    Pass Pl P2 => v_ + "eniste" ; --# notpresent
    Pass Pl P3 => v_ + "ennero" ; --# notpresent
    Fut Sg P1 => v_ + "errò" ; --# notpresent
    Fut Sg P2 => v_ + "errai" ; --# notpresent
    Fut Sg P3 => v_ + "errà" ; --# notpresent
    Fut Pl P1 => v_ + "erremo" ; --# notpresent
    Fut Pl P2 => v_ + "errete" ; --# notpresent
    Fut Pl P3 => v_ + "erranno" ; --# notpresent
    Cong Pres Sg P1 => v_ + "enga" ;
    Cong Pres Sg P2 => v_ + "enga" ;
    Cong Pres Sg P3 => v_ + "enga" ;
    Cong Pres Pl P1 => v_ + "eniamo" ;
    Cong Pres Pl P2 => v_ + "eniate" ;
    Cong Pres Pl P3 => v_ + "engano" ;
    Cong Imperf Sg P1 => v_ + "enissi" ; --# notpresent
    Cong Imperf Sg P2 => v_ + "enissi" ; --# notpresent
    Cong Imperf Sg P3 => v_ + "enisse" ; --# notpresent
    Cong Imperf Pl P1 => v_ + "enissimo" ; --# notpresent
    Cong Imperf Pl P2 => v_ + "eniste" ; --# notpresent
    Cong Imperf Pl P3 => v_ + "enissero" ; --# notpresent
    Cond Sg P1 => v_ + "errei" ; --# notpresent
    Cond Sg P2 => v_ + "erresti" ; --# notpresent
    Cond Sg P3 => v_ + "errebbe" ; --# notpresent
    Cond Pl P1 => v_ + "erremmo" ; --# notpresent
    Cond Pl P2 => v_ + "erreste" ; --# notpresent
    Cond Pl P3 => v_ + "errebbero" ; --# notpresent
    Imper SgP2 => v_ + "ieni" ;
    Imper PlP1 => v_ + "eniamo" ;
    Imper PlP2 => v_ + "enite" ;
    Ger => v_ + "enendo" ;
    Part PresP Masc Sg => v_ + "eniente" ;
    Part PresP Masc Pl => v_ + "enienti" ;
    Part PresP Fem Sg => v_ + "eniente" ;
    Part PresP Fem Pl => v_ + "enienti" ;
    Part PassP Masc Sg => v_ + "enuto" ;
    Part PassP Masc Pl => v_ + "enuti" ;
    Part PassP Fem Sg => v_ + "enuta" ;
    Part PassP Fem Pl => v_ + "enute"
    }
  } ;

  verbBesch : {s : VForm => Str} -> {s : VF => Str} = \amare -> {s = table {
    VInfin False           => amare.s ! Inf ;
    VInfin True            => amare.s ! InfClit ;
    VFin (VPres   Indic) n p    => amare.s ! Indi Pres n p ;
    VFin (VPres   Conjunct) n p => amare.s ! Cong Pres n p ;
    VFin (VImperf Indic) n p    => amare.s ! Indi Imperf n p ;  --# notpresent
    VFin (VImperf Conjunct) n p => amare.s ! Cong Imperf n p ; --# notpresent
    VFin VPasse n p        => amare.s ! Pass n p ; --# notpresent
    VFin VFut n p          => amare.s ! Fut  n p ; --# notpresent
    VFin VCondit n p       => amare.s ! Cond n p ; --# notpresent
    VImper np              => amare.s ! Imper np ;
    VPart g n              => amare.s ! Part PassP g n ;
    VGer                   => amare.s ! Ger ;
    VPresPart              => Predef.tk 2 (amare.s ! Ger) + "te"
    }
  } ;

param
  Tempo =
     Pres
   | Imperf --# notpresent
   ;
  TempoP =
     PresP
   | PassP
   ;
  VForm =
     Inf
   | InfClit
   | Indi  Tempo  Number   Person
   | Pass         Number   Person --# notpresent
   | Fut          Number   Person --# notpresent
   | Cong  Tempo  Number   Person
   | Cond         Number   Person --# notpresent
   | Imper        NumPersI
   | Ger
   | Part  TempoP Gender   Number
   ;

 oper
  mkVerbo : (x1,_,_,_,_,_,_,_,_,_,x11 : Str) -> Verbo ;
  mkVerbo
    dovere devo deve dobbiamo dovro
    dovetti dovesti dovette dovettero dovi dovuto =
   let
     dove  = Predef.tk 2 dovere ;
     dov   = init dove ;
     dev   = init devo ;
     dovr  = init dovro ;
     dovei = Predef.tk 3 dovesti ;
     dovut = init dovuto
   in (
   {s = table {
    Inf => dovere ;
    InfClit => init dovere ;
    Indi Pres Sg P1 => devo ;
    Indi Pres Sg P2 => init deve + "i" ;
    Indi Pres Sg P3 => deve ;
    Indi Pres Pl P1 => dobbiamo ;
    Indi Pres Pl P2 => dove + "te" ;
    Indi Pres Pl P3 => init deve + "ono" ;
    Indi Imperf Sg P1 => dove + "vo" ; --# notpresent
    Indi Imperf Sg P2 => dove + "vi" ; --# notpresent
    Indi Imperf Sg P3 => dove + "va" ; --# notpresent
    Indi Imperf Pl P1 => dove + "vamo" ; --# notpresent
    Indi Imperf Pl P2 => dove + "vate" ; --# notpresent
    Indi Imperf Pl P3 => dove + "vano" ; --# notpresent
    Pass Sg P1 => dovetti ; --# notpresent
    Pass Sg P2 => dovesti ; --# notpresent
    Pass Sg P3 => dovette ; --# notpresent
    Pass Pl P1 => dovei + "mmo" ; --# notpresent
    Pass Pl P2 => dovei + "ste" ; --# notpresent
    Pass Pl P3 => dovettero ; --# notpresent
    Fut Sg P1 => dovro ; --# notpresent
    Fut Sg P2 => dovr + "ai" ; --# notpresent
    Fut Sg P3 => dovr + "à" ; --# notpresent
    Fut Pl P1 => dovr + "emo" ; --# notpresent
    Fut Pl P2 => dovr + "ete" ; --# notpresent
    Fut Pl P3 => dovr + "anno" ; --# notpresent
    Cong Pres Sg P1 => dev + "a" ;
    Cong Pres Sg P2 => dev + "a" ;
    Cong Pres Sg P3 => dev + "a" ;
    Cong Pres Pl P1 => dobbiamo ;
    Cong Pres Pl P2 => Predef.tk 2 dobbiamo + "te" ;
    Cong Pres Pl P3 => dev + "ano" ;
    Cong Imperf Sg P1 => dovei + "ssi" ; --# notpresent
    Cong Imperf Sg P2 => dovei + "ssi" ; --# notpresent
    Cong Imperf Sg P3 => dovei + "sse" ; --# notpresent
    Cong Imperf Pl P1 => dovei + "ssimo" ; --# notpresent
    Cong Imperf Pl P2 => dovei + "ste" ; --# notpresent
    Cong Imperf Pl P3 => dovei + "ssero" ; --# notpresent
    Cond Sg P1 => dovr + "ei" ; --# notpresent
    Cond Sg P2 => dovr + "esti" ; --# notpresent
    Cond Sg P3 => dovr + "ebbe" ; --# notpresent
    Cond Pl P1 => dovr + "emmo" ; --# notpresent
    Cond Pl P2 => dovr + "este" ; --# notpresent
    Cond Pl P3 => dovr + "ebbero" ; --# notpresent
    Imper SgP2 => dovi ;
    Imper PlP1 => dobbiamo ;
    Imper PlP2 => dove + "te" ;
    Ger => dov + "endo" ;
    Part PresP _ Sg => dov + "ente" ;
    Part PresP _ Pl => dov + "enti" ;
    Part PassP Masc Sg => dovuto ;
    Part PassP Masc Pl => dovut + "i" ;
    Part PassP Fem Sg => dovut + "a" ;
    Part PassP Fem Pl => dovut + "e"
    }
  }) ;

}
