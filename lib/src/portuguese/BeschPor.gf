--# -path=.:../romance:../common:../abstract:../prelude

resource BeschPor = open Prelude, CommonRomance in {

  flags optimize=noexpand ; -- faster than values
        coding=utf8 ;

-- machine-generated file

oper
  Verbum = {s : VFB => Str} ;

  -- The full conjunction is a table on $VForm$:
 param
    VImpers =
        Infn -- garantir
      | Ger  -- garantindo
      | Part -- garantido
      ;

    Mode = Ind | Sub ;

    VPers =
        Pres   Mode Number Person
      | PretI  Mode Number Person    --# notpresent --# notpresent
      | MQPerf      Number Person    --# notpresent --# notpresent
      | PretP       Number Person    --# notpresent --# notpresent
      | Fut    Mode Number Person    --# notpresent --# notpresent
      | Cond        Number Person    --# notpresent --# notpresent
      | Imper       Number Person
      ;

    VFB =
        VI VImpers
      | VPB VPers
      ;

oper
  -- hack to get the same behaviour as from variants. parses both, linearizes the first.  
  vars : Str -> Str -> Str = \x,y -> pre { "" => x ; _ => y } ;
    
  verbBesch : {s : VFB => Str} -> {s : CommonRomance.VF => Str} = \amar ->
  -- conversion from Portuguese forms to romance forms
    {s = table {
       VInfin _ => amar.s ! VI Infn ;
       VFin (VPres Indic) n p => amar.s ! VPB (Pres Ind n p) ;
       VFin (VPres Conjunct) n p => amar.s ! VPB (Pres Sub n p) ;
       VFin (VImperf Indic) n p => amar.s ! VPB (PretI Ind n p) ;  --# notpresent --# notpresent
       VFin (VImperf Conjunct) n p => amar.s ! VPB (PretI Sub n p) ; --# notpresent --# notpresent
       VFin VPasse n p        => amar.s ! VPB (PretP n p) ; --# notpresent --# notpresent
       VFin VFut n p          => amar.s ! VPB (Fut Ind n p) ; --# notpresent --# notpresent
       VFin VCondit n p       => amar.s ! VPB (Cond n p) ; --# notpresent --# notpresent
       VImper SgP2            => amar.s ! VPB (Imper  Sg P2) ;
       VImper PlP1            => amar.s ! VPB (Imper  Pl P1) ;
       VImper PlP2            => amar.s ! VPB (Imper  Pl P2) ;
       VPart g n              => amar.s ! VI Part ;
       VGer | VPresPart       => amar.s ! VI Ger
       }
    } ;


oper ter_1 : Str -> Verbum = \ter ->
  let x_ = Predef.tk 3 ter in
 {s = table {
    VI Infn => x_ + "ter" ;
    VI Ger => x_ + "tendo" ;
    VI Part => x_ + "tido" ;
    VPB (Pres Ind Sg P1) => x_ + "tenho" ;
    VPB (Pres Ind Sg P2) => x_ + "tens" ;
    VPB (Pres Ind Sg P3) => x_ + "tem" ;
    VPB (Pres Ind Pl P1) => x_ + "temos" ;
    VPB (Pres Ind Pl P2) => x_ + "tendes" ;
    VPB (Pres Ind Pl P3) => x_ + "têm" ;
    VPB (Pres Sub Sg P1) => x_ + "tenha" ;
    VPB (Pres Sub Sg P2) => x_ + "tenhas" ;
    VPB (Pres Sub Sg P3) => x_ + "tenha" ;
    VPB (Pres Sub Pl P1) => x_ + "tenhamos" ;
    VPB (Pres Sub Pl P2) => x_ + "tenhais" ;
    VPB (Pres Sub Pl P3) => x_ + "tenham" ;
    VPB (PretI Ind Sg P1) => x_ + "tinha" ; --# notpresent
    VPB (PretI Ind Sg P2) => x_ + "tinhas" ; --# notpresent
    VPB (PretI Ind Sg P3) => x_ + "tinha" ; --# notpresent
    VPB (PretI Ind Pl P1) => x_ + "tínhamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => x_ + "tínheis" ; --# notpresent
    VPB (PretI Ind Pl P3) => x_ + "tinham" ; --# notpresent
    VPB (PretI Sub Sg P1) => x_ + "tivesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => x_ + "tivesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => x_ + "tivesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => x_ + "tivéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => x_ + "tivésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => x_ + "tivessem" ; --# notpresent
    VPB (MQPerf Sg P1) => x_ + "tivera" ; --# notpresent
    VPB (MQPerf Sg P2) => x_ + "tiveras" ; --# notpresent
    VPB (MQPerf Sg P3) => x_ + "tivera" ; --# notpresent
    VPB (MQPerf Pl P1) => x_ + "tivéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => x_ + "tivéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => x_ + "tiveram" ; --# notpresent
    VPB (PretP Sg P1) => x_ + "tive" ; --# notpresent
    VPB (PretP Sg P2) => x_ + "tiveste" ; --# notpresent
    VPB (PretP Sg P3) => x_ + "teve" ; --# notpresent
    VPB (PretP Pl P1) => x_ + "tivemos" ; --# notpresent
    VPB (PretP Pl P2) => x_ + "tivestes" ; --# notpresent
    VPB (PretP Pl P3) => x_ + "tiveram" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "terei" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "terás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "terá" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "teremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "tereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "terão" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "tiver" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "tiveres" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "tiver" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "tivermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "tiverdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "tiverem" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "teria" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "terias" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "teria" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "teríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "teríeis" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "teriam" ; --# notpresent
    VPB (Imper Sg P2) => x_ + "tem" ;
    VPB (Imper Sg P3) => x_ + "tenha" ;
    VPB (Imper Pl P1) => x_ + "tenhamos" ;
    VPB (Imper Pl P2) => x_ + "tende" ;
    VPB (Imper Pl P3) => x_ + "tenham" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper haver_2 : Str -> Verbum = \haver ->
  let x_ = Predef.tk 5 haver in
 {s = table {
    VI Infn => x_ + "haver" ;
    VI Ger => x_ + "havendo" ;
    VI Part => x_ + "havido" ;
    VPB (Pres Ind Sg P1) => x_ + "hei" ;
    VPB (Pres Ind Sg P2) => x_ + "hás" ;
    VPB (Pres Ind Sg P3) => x_ + "há" ;
    VPB (Pres Ind Pl P1) => x_ + vars "havemos"  "hemos" ;
    VPB (Pres Ind Pl P2) => x_ + vars "haveis"  "heis" ;
    VPB (Pres Ind Pl P3) => x_ + "hão" ;
    VPB (Pres Sub Sg P1) => x_ + "haja" ;
    VPB (Pres Sub Sg P2) => x_ + "hajas" ;
    VPB (Pres Sub Sg P3) => x_ + "haja" ;
    VPB (Pres Sub Pl P1) => x_ + "hajamos" ;
    VPB (Pres Sub Pl P2) => x_ + "hajais" ;
    VPB (Pres Sub Pl P3) => x_ + "hajam" ;
    VPB (PretI Ind Sg P1) => x_ + "havia" ; --# notpresent
    VPB (PretI Ind Sg P2) => x_ + "havias" ; --# notpresent
    VPB (PretI Ind Sg P3) => x_ + "havia" ; --# notpresent
    VPB (PretI Ind Pl P1) => x_ + "havíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => x_ + "havíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => x_ + "haviam" ; --# notpresent
    VPB (PretI Sub Sg P1) => x_ + "houvesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => x_ + "houvesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => x_ + "houvesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => x_ + "houvéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => x_ + "houvésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => x_ + "houvessem" ; --# notpresent
    VPB (MQPerf Sg P1) => x_ + "houvera" ; --# notpresent
    VPB (MQPerf Sg P2) => x_ + "houveras" ; --# notpresent
    VPB (MQPerf Sg P3) => x_ + "houvera" ; --# notpresent
    VPB (MQPerf Pl P1) => x_ + "houvéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => x_ + "houvéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => x_ + "houveram" ; --# notpresent
    VPB (PretP Sg P1) => x_ + "houve" ; --# notpresent
    VPB (PretP Sg P2) => x_ + "houveste" ; --# notpresent
    VPB (PretP Sg P3) => x_ + "houve" ; --# notpresent
    VPB (PretP Pl P1) => x_ + "houvemos" ; --# notpresent
    VPB (PretP Pl P2) => x_ + "houvestes" ; --# notpresent
    VPB (PretP Pl P3) => x_ + "houveram" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "haverei" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "haverás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "haverá" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "haveremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "havereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "haverão" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "houver" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "houveres" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "houver" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "houvermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "houverdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "houveram" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "haveria" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "haverias" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "haveria" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "haveríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "haveríeis" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "haveriam" ; --# notpresent
    VPB (Imper Sg P2) => x_ + "há" ;
    VPB (Imper Sg P3) => x_ + "haja" ;
    VPB (Imper Pl P1) => x_ + "hajamos" ;
    VPB (Imper Pl P2) => x_ + "havei" ;
    VPB (Imper Pl P3) => x_ + "hajam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ser_3 : Str -> Verbum = \ser ->
  let x_ = Predef.tk 3 ser in
 {s = table {
    VI Infn => x_ + "ser" ;
    VI Ger => x_ + "sendo" ;
    VI Part => x_ + "sido" ;
    VPB (Pres Ind Sg P1) => x_ + "sou" ;
    VPB (Pres Ind Sg P2) => x_ + "és" ;
    VPB (Pres Ind Sg P3) => x_ + "é" ;
    VPB (Pres Ind Pl P1) => x_ + "somos" ;
    VPB (Pres Ind Pl P2) => x_ + "sois" ;
    VPB (Pres Ind Pl P3) => x_ + "são" ;
    VPB (Pres Sub Sg P1) => x_ + "seja" ;
    VPB (Pres Sub Sg P2) => x_ + "sejas" ;
    VPB (Pres Sub Sg P3) => x_ + "seja" ;
    VPB (Pres Sub Pl P1) => x_ + "sejamos" ;
    VPB (Pres Sub Pl P2) => x_ + "sejais" ;
    VPB (Pres Sub Pl P3) => x_ + "sejam" ;
    VPB (PretI Ind Sg P1) => x_ + "era" ; --# notpresent
    VPB (PretI Ind Sg P2) => x_ + "eras" ; --# notpresent
    VPB (PretI Ind Sg P3) => x_ + "era" ; --# notpresent
    VPB (PretI Ind Pl P1) => x_ + "éramos" ; --# notpresent
    VPB (PretI Ind Pl P2) => x_ + "éreis" ; --# notpresent
    VPB (PretI Ind Pl P3) => x_ + "eram" ; --# notpresent
    VPB (PretI Sub Sg P1) => x_ + "fosse" ; --# notpresent
    VPB (PretI Sub Sg P2) => x_ + "fosses" ; --# notpresent
    VPB (PretI Sub Sg P3) => x_ + "fosse" ; --# notpresent
    VPB (PretI Sub Pl P1) => x_ + "fôssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => x_ + "fôsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => x_ + "fossem" ; --# notpresent
    VPB (MQPerf Sg P1) => x_ + "fora" ; --# notpresent
    VPB (MQPerf Sg P2) => x_ + "foras" ; --# notpresent
    VPB (MQPerf Sg P3) => x_ + "fora" ; --# notpresent
    VPB (MQPerf Pl P1) => x_ + "fôramos" ; --# notpresent
    VPB (MQPerf Pl P2) => x_ + "fôreis" ; --# notpresent
    VPB (MQPerf Pl P3) => x_ + "foram" ; --# notpresent
    VPB (PretP Sg P1) => x_ + "fui" ; --# notpresent
    VPB (PretP Sg P2) => x_ + "foste" ; --# notpresent
    VPB (PretP Sg P3) => x_ + "foi" ; --# notpresent
    VPB (PretP Pl P1) => x_ + "fomos" ; --# notpresent
    VPB (PretP Pl P2) => x_ + "fostes" ; --# notpresent
    VPB (PretP Pl P3) => x_ + "foram" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "serei" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "serás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "será" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "seremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "sereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "serão" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "for" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "fores" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "for" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "formos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "fordes" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "forem" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "seria" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "serias" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "seria" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "seríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "seríeis" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "seriam" ; --# notpresent
    VPB (Imper Sg P2) => x_ + "sê" ;
    VPB (Imper Sg P3) => x_ + "seja" ;
    VPB (Imper Pl P1) => x_ + "sejamos" ;
    VPB (Imper Pl P2) => x_ + "sede" ;
    VPB (Imper Pl P3) => x_ + "sejam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper comprar_4 : Str -> Verbum = \comprar ->
  let compr_ = Predef.tk 2 comprar in
 {s = table {
    VI Infn => compr_ + "ar" ;
    VI Ger => compr_ + "ando" ;
    VI Part => compr_ + "ado" ;
    VPB (Pres Ind Sg P1) => compr_ + "o" ;
    VPB (Pres Ind Sg P2) => compr_ + "as" ;
    VPB (Pres Ind Sg P3) => compr_ + "a" ;
    VPB (Pres Ind Pl P1) => compr_ + "amos" ;
    VPB (Pres Ind Pl P2) => compr_ + "ais" ;
    VPB (Pres Ind Pl P3) => compr_ + "am" ;
    VPB (Pres Sub Sg P1) => compr_ + "e" ;
    VPB (Pres Sub Sg P2) => compr_ + "es" ;
    VPB (Pres Sub Sg P3) => compr_ + "e" ;
    VPB (Pres Sub Pl P1) => compr_ + "emos" ;
    VPB (Pres Sub Pl P2) => compr_ + "eis" ;
    VPB (Pres Sub Pl P3) => compr_ + "em" ;
    VPB (PretI Ind Sg P1) => compr_ + "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => compr_ + "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => compr_ + "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => compr_ + "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => compr_ + "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => compr_ + "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => compr_ + "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => compr_ + "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => compr_ + "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => compr_ + "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => compr_ + "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => compr_ + "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => compr_ + "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => compr_ + "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => compr_ + "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => compr_ + "arámos" ; --# notpresent
    VPB (MQPerf Pl P2) => compr_ + "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => compr_ + "aram" ; --# notpresent
    VPB (PretP Sg P1) => compr_ + "ei" ; --# notpresent
    VPB (PretP Sg P2) => compr_ + "aste" ; --# notpresent
    VPB (PretP Sg P3) => compr_ + "ou" ; --# notpresent
    VPB (PretP Pl P1) => compr_ + vars "amos"  "ámos" ; --# notpresent
    VPB (PretP Pl P2) => compr_ + "astes" ; --# notpresent
    VPB (PretP Pl P3) => compr_ + "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => compr_ + "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => compr_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => compr_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => compr_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => compr_ + "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => compr_ + "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => compr_ + "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => compr_ + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => compr_ + "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => compr_ + "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => compr_ + "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => compr_ + "arem" ; --# notpresent
    VPB (Cond Sg P1) => compr_ + "aria" ; --# notpresent
    VPB (Cond Sg P2) => compr_ + "arias" ; --# notpresent
    VPB (Cond Sg P3) => compr_ + "aria" ; --# notpresent
    VPB (Cond Pl P1) => compr_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => compr_ + "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => compr_ + "ariam" ; --# notpresent
    VPB (Imper Sg P2) => compr_ + "a" ;
    VPB (Imper Sg P3) => compr_ + "e" ;
    VPB (Imper Pl P1) => compr_ + "emos" ;
    VPB (Imper Pl P2) => compr_ + "ai" ;
    VPB (Imper Pl P3) => compr_ + "em" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper vender_5 : Str -> Verbum = \vender ->
  let vend_ = Predef.tk 2 vender in
 {s = table {
    VI Infn => vend_ + "er" ;
    VI Ger => vend_ + "endo" ;
    VI Part => vend_ + "ido" ;
    VPB (Pres Ind Sg P1) => vend_ + "o" ;
    VPB (Pres Ind Sg P2) => vend_ + "es" ;
    VPB (Pres Ind Sg P3) => vend_ + "e" ;
    VPB (Pres Ind Pl P1) => vend_ + "emos" ;
    VPB (Pres Ind Pl P2) => vend_ + "eis" ;
    VPB (Pres Ind Pl P3) => vend_ + "em" ;
    VPB (Pres Sub Sg P1) => vend_ + "a" ;
    VPB (Pres Sub Sg P2) => vend_ + "as" ;
    VPB (Pres Sub Sg P3) => vend_ + "a" ;
    VPB (Pres Sub Pl P1) => vend_ + "amos" ;
    VPB (Pres Sub Pl P2) => vend_ + "ais" ;
    VPB (Pres Sub Pl P3) => vend_ + "am" ;
    VPB (PretI Ind Sg P1) => vend_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => vend_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => vend_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => vend_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => vend_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => vend_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => vend_ + "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => vend_ + "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => vend_ + "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => vend_ + "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => vend_ + "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => vend_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => vend_ + "era" ; --# notpresent
    VPB (MQPerf Sg P2) => vend_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => vend_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => vend_ + "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => vend_ + "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => vend_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => vend_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => vend_ + "este" ; --# notpresent
    VPB (PretP Sg P3) => vend_ + "eu" ; --# notpresent
    VPB (PretP Pl P1) => vend_ + "emos" ; --# notpresent
    VPB (PretP Pl P2) => vend_ + "estes" ; --# notpresent
    VPB (PretP Pl P3) => vend_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => vend_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => vend_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => vend_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => vend_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => vend_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => vend_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => vend_ + "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => vend_ + "ereis" ; --# notpresent
    VPB (Fut Sub Sg P3) => vend_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => vend_ + "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => vend_ + "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => vend_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => vend_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => vend_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => vend_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => vend_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => vend_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => vend_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => vend_ + "e" ;
    VPB (Imper Sg P3) => vend_ + "a" ;
    VPB (Imper Pl P1) => vend_ + "amos" ;
    VPB (Imper Pl P2) => vend_ + "ei" ;
    VPB (Imper Pl P3) => vend_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper garantir_6 : Str -> Verbum = \garantir ->
  let garant_ = Predef.tk 2 garantir in
 {s = table {
    VI Infn => garant_ + "ir" ;
    VI Ger => garant_ + "indo" ;
    VI Part => garant_ + "ido" ;
    VPB (Pres Ind Sg P1) => garant_ + "o" ;
    VPB (Pres Ind Sg P2) => garant_ + "es" ;
    VPB (Pres Ind Sg P3) => garant_ + "e" ;
    VPB (Pres Ind Pl P1) => garant_ + "imos" ;
    VPB (Pres Ind Pl P2) => garant_ + "is" ;
    VPB (Pres Ind Pl P3) => garant_ + "em" ;
    VPB (Pres Sub Sg P1) => garant_ + "a" ;
    VPB (Pres Sub Sg P2) => garant_ + "as" ;
    VPB (Pres Sub Sg P3) => garant_ + "a" ;
    VPB (Pres Sub Pl P1) => garant_ + "amos" ;
    VPB (Pres Sub Pl P2) => garant_ + "ais" ;
    VPB (Pres Sub Pl P3) => garant_ + "am" ;
    VPB (PretI Ind Sg P1) => garant_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => garant_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => garant_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => garant_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => garant_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => garant_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => garant_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => garant_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => garant_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => garant_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => garant_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => garant_ + "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => garant_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => garant_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => garant_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => garant_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => garant_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => garant_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => garant_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => garant_ + "ste" ; --# notpresent
    VPB (PretP Sg P3) => garant_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => garant_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => garant_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => garant_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => garant_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => garant_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => garant_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => garant_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => garant_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => garant_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => garant_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => garant_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => garant_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => garant_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => garant_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => garant_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => garant_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => garant_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => garant_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => garant_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => garant_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => garant_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => garant_ + "e" ;
    VPB (Imper Sg P3) => garant_ + "a" ;
    VPB (Imper Pl P1) => garant_ + "amos" ;
    VPB (Imper Pl P2) => garant_ + "i" ;
    VPB (Imper Pl P3) => garant_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper estar_10 : Str -> Verbum = \estar ->
  let est_ = Predef.tk 2 estar in
 {s = table {
    VI Infn => est_ + "ar" ;
    VI Ger => est_ + "ando" ;
    VI Part => est_ + "ado" ;
    VPB (Pres Ind Sg P1) => est_ + "ou" ;
    VPB (Pres Ind Sg P2) => est_ + "ás" ;
    VPB (Pres Ind Sg P3) => est_ + "á" ;
    VPB (Pres Ind Pl P1) => est_ + "amos" ;
    VPB (Pres Ind Pl P2) => est_ + "ais" ;
    VPB (Pres Ind Pl P3) => est_ + "ão" ;
    VPB (Pres Sub Sg P1) => est_ + "eja" ;
    VPB (Pres Sub Sg P2) => est_ + "ejas" ;
    VPB (Pres Sub Sg P3) => est_ + "eja" ;
    VPB (Pres Sub Pl P1) => est_ + "ejamos" ;
    VPB (Pres Sub Pl P2) => est_ + "ejais" ;
    VPB (Pres Sub Pl P3) => est_ + "ejam" ;
    VPB (PretI Ind Sg P1) => est_ + "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => est_ + "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => est_ + "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => est_ + "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => est_ + "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => est_ + "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => est_ + "ivesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => est_ + "ivesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => est_ + "ivesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => est_ + "ivéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => est_ + "ivésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => est_ + "ivessem" ; --# notpresent
    VPB (MQPerf Sg P1) => est_ + "ivera" ; --# notpresent
    VPB (MQPerf Sg P2) => est_ + "iveras" ; --# notpresent
    VPB (MQPerf Sg P3) => est_ + "ivera" ; --# notpresent
    VPB (MQPerf Pl P1) => est_ + "ivéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => est_ + "ivéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => est_ + "iveram" ; --# notpresent
    VPB (PretP Sg P1) => est_ + "ive" ; --# notpresent
    VPB (PretP Sg P2) => est_ + "iveste" ; --# notpresent
    VPB (PretP Sg P3) => est_ + "eve" ; --# notpresent
    VPB (PretP Pl P1) => est_ + "ivemos" ; --# notpresent
    VPB (PretP Pl P2) => est_ + "ivestes" ; --# notpresent
    VPB (PretP Pl P3) => est_ + "iveram" ; --# notpresent
    VPB (Fut Ind Sg P1) => est_ + "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => est_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => est_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => est_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => est_ + "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => est_ + "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => est_ + "iver" ; --# notpresent
    VPB (Fut Sub Sg P2) => est_ + "iverese" ; --# notpresent
    VPB (Fut Sub Sg P3) => est_ + "iver" ; --# notpresent
    VPB (Fut Sub Pl P1) => est_ + "ivermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => est_ + "iverdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => est_ + "iverem" ; --# notpresent
    VPB (Cond Sg P1) => est_ + "aria" ; --# notpresent
    VPB (Cond Sg P2) => est_ + "arias" ; --# notpresent
    VPB (Cond Sg P3) => est_ + "aria" ; --# notpresent
    VPB (Cond Pl P1) => est_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => est_ + "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => est_ + "ariam" ; --# notpresent
    VPB (Imper Sg P2) => est_ + "á" ;
    VPB (Imper Sg P3) => est_ + "eja" ;
    VPB (Imper Pl P1) => est_ + "ejamos" ;
    VPB (Imper Pl P2) => est_ + "ai" ;
    VPB (Imper Pl P3) => est_ + "ejam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper dar_11 : Str -> Verbum = \dar ->
  let x_ = Predef.tk 3 dar in
 {s = table {
    VI Infn => x_ + "dar" ;
    VI Ger => x_ + "dando" ;
    VI Part => x_ + "dado" ;
    VPB (Pres Ind Sg P1) => x_ + "dou" ;
    VPB (Pres Ind Sg P2) => x_ + "dás" ;
    VPB (Pres Ind Sg P3) => x_ + "dá" ;
    VPB (Pres Ind Pl P1) => x_ + "damos" ;
    VPB (Pres Ind Pl P2) => x_ + "dais" ;
    VPB (Pres Ind Pl P3) => x_ + "dão" ;
    VPB (Pres Sub Sg P1) => x_ + "dê" ;
    VPB (Pres Sub Sg P2) => x_ + "dês" ;
    VPB (Pres Sub Sg P3) => x_ + "dê" ;
    VPB (Pres Sub Pl P1) => x_ + "demos" ;
    VPB (Pres Sub Pl P2) => x_ + "deis" ;
    VPB (Pres Sub Pl P3) => x_ + vars "deem"  "dêem" ;
    VPB (PretI Ind Sg P1) => x_ + "dava" ; --# notpresent
    VPB (PretI Ind Sg P2) => x_ + "davas" ; --# notpresent
    VPB (PretI Ind Sg P3) => x_ + "dava" ; --# notpresent
    VPB (PretI Ind Pl P1) => x_ + "dávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => x_ + "dáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => x_ + "davam" ; --# notpresent
    VPB (PretI Sub Sg P1) => x_ + "desse" ; --# notpresent
    VPB (PretI Sub Sg P2) => x_ + "desses" ; --# notpresent
    VPB (PretI Sub Sg P3) => x_ + "desse" ; --# notpresent
    VPB (PretI Sub Pl P1) => x_ + "déssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => x_ + "désseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => x_ + "dessem" ; --# notpresent
    VPB (MQPerf Sg P1) => x_ + "dera" ; --# notpresent
    VPB (MQPerf Sg P2) => x_ + "deras" ; --# notpresent
    VPB (MQPerf Sg P3) => x_ + "dera" ; --# notpresent
    VPB (MQPerf Pl P1) => x_ + "déramos" ; --# notpresent
    VPB (MQPerf Pl P2) => x_ + "déreis" ; --# notpresent
    VPB (MQPerf Pl P3) => x_ + "deram" ; --# notpresent
    VPB (PretP Sg P1) => x_ + "dei" ; --# notpresent
    VPB (PretP Sg P2) => x_ + "deste" ; --# notpresent
    VPB (PretP Sg P3) => x_ + "deu" ; --# notpresent
    VPB (PretP Pl P1) => x_ + "demos" ; --# notpresent
    VPB (PretP Pl P2) => x_ + "destes" ; --# notpresent
    VPB (PretP Pl P3) => x_ + "deram" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "darei" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "darás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "dará" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "daremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "dareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "darão" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "der" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "deres" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "der" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "dermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "derdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "derem" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "daria" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "darias" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "daria" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "daríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "daríeis" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "dariam" ; --# notpresent
    VPB (Imper Sg P2) => x_ + "dá" ;
    VPB (Imper Sg P3) => x_ + "dê" ;
    VPB (Imper Pl P1) => x_ + "demos" ;
    VPB (Imper Pl P2) => x_ + "dai" ;
    VPB (Imper Pl P3) => x_ + vars "deem"  "dêem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ficar_12 : Str -> Verbum = \ficar ->
  let x_ = Predef.tk 5 ficar in
 {s = table {
    VI Infn => x_ + "ficar" ;
    VI Ger => x_ + "ficando" ;
    VI Part => x_ + "ficado" ;
    VPB (Pres Ind Sg P1) => x_ + "fico" ;
    VPB (Pres Ind Sg P2) => x_ + "ficas" ;
    VPB (Pres Ind Sg P3) => x_ + "fica" ;
    VPB (Pres Ind Pl P1) => x_ + "ficamos" ;
    VPB (Pres Ind Pl P2) => x_ + "ficais" ;
    VPB (Pres Ind Pl P3) => x_ + "ficam" ;
    VPB (Pres Sub Sg P1) => x_ + "fique" ;
    VPB (Pres Sub Sg P2) => x_ + "fiques" ;
    VPB (Pres Sub Sg P3) => x_ + "fique" ;
    VPB (Pres Sub Pl P1) => x_ + "fiquemos" ;
    VPB (Pres Sub Pl P2) => x_ + "fiqueis" ;
    VPB (Pres Sub Pl P3) => x_ + "fiquem" ;
    VPB (PretI Ind Sg P1) => x_ + "ficava" ; --# notpresent
    VPB (PretI Ind Sg P2) => x_ + "ficavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => x_ + "ficava" ; --# notpresent
    VPB (PretI Ind Pl P1) => x_ + "ficávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => x_ + "ficáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => x_ + "ficavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => x_ + "ficasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => x_ + "ficasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => x_ + "ficasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => x_ + "ficássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => x_ + "ficásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => x_ + "ficassem" ; --# notpresent
    VPB (MQPerf Sg P1) => x_ + "ficara" ; --# notpresent
    VPB (MQPerf Sg P2) => x_ + "ficaras" ; --# notpresent
    VPB (MQPerf Sg P3) => x_ + "ficara" ; --# notpresent
    VPB (MQPerf Pl P1) => x_ + "ficáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => x_ + "ficáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => x_ + "ficaram" ; --# notpresent
    VPB (PretP Sg P1) => x_ + "fiquei" ; --# notpresent
    VPB (PretP Sg P2) => x_ + "ficaste" ; --# notpresent
    VPB (PretP Sg P3) => x_ + "ficou" ; --# notpresent
    VPB (PretP Pl P1) => x_ + vars "ficamos"  "ficámos" ; --# notpresent
    VPB (PretP Pl P2) => x_ + "ficastes" ; --# notpresent
    VPB (PretP Pl P3) => x_ + "ficaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "ficarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "ficarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "ficará" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "ficaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "ficareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "ficarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "ficar" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "ficares" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "ficar" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "ficarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "ficardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "ficarem" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "ficaria" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "ficarias" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "ficaria" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "ficaríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "ficaríeis" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "ficariam" ; --# notpresent
    VPB (Imper Sg P2) => x_ + "fica" ;
    VPB (Imper Sg P3) => x_ + "fique" ;
    VPB (Imper Pl P1) => x_ + "fiquemos" ;
    VPB (Imper Pl P2) => x_ + "ficai" ;
    VPB (Imper Pl P3) => x_ + "fiquem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper começar_13 : Str -> Verbum = \começar ->
  let x_ = Predef.tk 7 começar in
 {s = table {
    VI Infn => x_ + "começar" ;
    VI Ger => x_ + "começando" ;
    VI Part => x_ + "começado" ;
    VPB (Pres Ind Sg P1) => x_ + "começo" ;
    VPB (Pres Ind Sg P2) => x_ + "começas" ;
    VPB (Pres Ind Sg P3) => x_ + "começa" ;
    VPB (Pres Ind Pl P1) => x_ + "começamos" ;
    VPB (Pres Ind Pl P2) => x_ + "começais" ;
    VPB (Pres Ind Pl P3) => x_ + "começam" ;
    VPB (Pres Sub Sg P1) => x_ + "comece" ;
    VPB (Pres Sub Sg P2) => x_ + "comeces" ;
    VPB (Pres Sub Sg P3) => x_ + "comece" ;
    VPB (Pres Sub Pl P1) => x_ + "comecemos" ;
    VPB (Pres Sub Pl P2) => x_ + "comeceis" ;
    VPB (Pres Sub Pl P3) => x_ + "comecem" ;
    VPB (PretI Ind Sg P1) => x_ + "começava" ; --# notpresent
    VPB (PretI Ind Sg P2) => x_ + "começavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => x_ + "começava" ; --# notpresent
    VPB (PretI Ind Pl P1) => x_ + "começávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => x_ + "começáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => x_ + "começavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => x_ + "começasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => x_ + "começasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => x_ + "começasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => x_ + "começássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => x_ + "começasseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => x_ + "começassem" ; --# notpresent
    VPB (MQPerf Sg P1) => x_ + "começara" ; --# notpresent
    VPB (MQPerf Sg P2) => x_ + "começaras" ; --# notpresent
    VPB (MQPerf Sg P3) => x_ + "começara" ; --# notpresent
    VPB (MQPerf Pl P1) => x_ + "começáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => x_ + "começáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => x_ + "começaram" ; --# notpresent
    VPB (PretP Sg P1) => x_ + "comecei" ; --# notpresent
    VPB (PretP Sg P2) => x_ + "começaste" ; --# notpresent
    VPB (PretP Sg P3) => x_ + "começou" ; --# notpresent
    VPB (PretP Pl P1) => x_ + vars "começamos"  "começámos" ; --# notpresent
    VPB (PretP Pl P2) => x_ + "começastes" ; --# notpresent
    VPB (PretP Pl P3) => x_ + "começaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "começarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "começarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "começará" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "começaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "começareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "começarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "começar" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "começares" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "começar" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "começarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "começardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "começarem" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "começaria" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "começarias" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "começaria" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "começaríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "começarieis" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "começariam" ; --# notpresent
    VPB (Imper Sg P2) => x_ + "começa" ;
    VPB (Imper Sg P3) => x_ + "comece" ;
    VPB (Imper Pl P1) => x_ + "comecemos" ;
    VPB (Imper Pl P2) => x_ + "começai" ;
    VPB (Imper Pl P3) => x_ + "comecem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper chegar_14 : Str -> Verbum = \chegar ->
  let cheg_ = Predef.tk 2 chegar in
 {s = table {
    VI Infn => cheg_ + "ar" ;
    VI Ger => cheg_ + "ando" ;
    VI Part => cheg_ + "ado" ;
    VPB (Pres Ind Sg P1) => cheg_ + "o" ;
    VPB (Pres Ind Sg P2) => cheg_ + "as" ;
    VPB (Pres Ind Sg P3) => cheg_ + "a" ;
    VPB (Pres Ind Pl P1) => cheg_ + "amos" ;
    VPB (Pres Ind Pl P2) => cheg_ + "ais" ;
    VPB (Pres Ind Pl P3) => cheg_ + "am" ;
    VPB (Pres Sub Sg P1) => cheg_ + "ue" ;
    VPB (Pres Sub Sg P2) => cheg_ + "ues" ;
    VPB (Pres Sub Sg P3) => cheg_ + "ue" ;
    VPB (Pres Sub Pl P1) => cheg_ + "uemos" ;
    VPB (Pres Sub Pl P2) => cheg_ + "ueis" ;
    VPB (Pres Sub Pl P3) => cheg_ + "uem" ;
    VPB (PretI Ind Sg P1) => cheg_ + "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => cheg_ + "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => cheg_ + "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => cheg_ + "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => cheg_ + "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => cheg_ + "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => cheg_ + "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => cheg_ + "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => cheg_ + "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => cheg_ + "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => cheg_ + "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => cheg_ + "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => cheg_ + "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => cheg_ + "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => cheg_ + "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => cheg_ + "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => cheg_ + "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => cheg_ + "aram" ; --# notpresent
    VPB (PretP Sg P1) => cheg_ + "uei" ; --# notpresent
    VPB (PretP Sg P2) => cheg_ + "aste" ; --# notpresent
    VPB (PretP Sg P3) => cheg_ + "ou" ; --# notpresent
    VPB (PretP Pl P1) => cheg_ + vars "amos"  "ámos" ; --# notpresent
    VPB (PretP Pl P2) => cheg_ + "astes" ; --# notpresent
    VPB (PretP Pl P3) => cheg_ + "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => cheg_ + "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => cheg_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => cheg_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => cheg_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => cheg_ + "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => cheg_ + "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => cheg_ + "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => cheg_ + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => cheg_ + "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => cheg_ + "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => cheg_ + "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => cheg_ + "arem" ; --# notpresent
    VPB (Cond Sg P1) => cheg_ + "aria" ; --# notpresent
    VPB (Cond Sg P2) => cheg_ + "arias" ; --# notpresent
    VPB (Cond Sg P3) => cheg_ + "aria" ; --# notpresent
    VPB (Cond Pl P1) => cheg_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => cheg_ + "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => cheg_ + "ariam" ; --# notpresent
    VPB (Imper Sg P2) => cheg_ + "a" ;
    VPB (Imper Sg P3) => cheg_ + "ue" ;
    VPB (Imper Pl P1) => cheg_ + "uemos" ;
    VPB (Imper Pl P2) => cheg_ + "ai" ;
    VPB (Imper Pl P3) => cheg_ + "uem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper recear_15 : Str -> Verbum = \recear ->
  let rec_ = Predef.tk 3 recear in
 {s = table {
    VI Infn => rec_ + "ear" ;
    VI Ger => rec_ + "eando" ;
    VI Part => rec_ + "ado" ;
    VPB (Pres Ind Sg P1) => rec_ + "eio" ;
    VPB (Pres Ind Sg P2) => rec_ + "eias" ;
    VPB (Pres Ind Sg P3) => rec_ + "eia" ;
    VPB (Pres Ind Pl P1) => rec_ + "eamos" ;
    VPB (Pres Ind Pl P2) => rec_ + "eais" ;
    VPB (Pres Ind Pl P3) => rec_ + "eiam" ;
    VPB (Pres Sub Sg P1) => rec_ + "eie" ;
    VPB (Pres Sub Sg P2) => rec_ + "eies" ;
    VPB (Pres Sub Sg P3) => rec_ + "eie" ;
    VPB (Pres Sub Pl P1) => rec_ + "eemos" ;
    VPB (Pres Sub Pl P2) => rec_ + "eeis" ;
    VPB (Pres Sub Pl P3) => rec_ + "eiem" ;
    VPB (PretI Ind Sg P1) => rec_ + "eava" ; --# notpresent
    VPB (PretI Ind Sg P2) => rec_ + "eavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => rec_ + "eava" ; --# notpresent
    VPB (PretI Ind Pl P1) => rec_ + "eávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => rec_ + "eáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => rec_ + "eavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => rec_ + "easse" ; --# notpresent
    VPB (PretI Sub Sg P2) => rec_ + "easses" ; --# notpresent
    VPB (PretI Sub Sg P3) => rec_ + "easse" ; --# notpresent
    VPB (PretI Sub Pl P1) => rec_ + "eássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => rec_ + "eásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => rec_ + "eassem" ; --# notpresent
    VPB (MQPerf Sg P1) => rec_ + "eara" ; --# notpresent
    VPB (MQPerf Sg P2) => rec_ + "earas" ; --# notpresent
    VPB (MQPerf Sg P3) => rec_ + "eara" ; --# notpresent
    VPB (MQPerf Pl P1) => rec_ + "eáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => rec_ + "eáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => rec_ + "earam" ; --# notpresent
    VPB (PretP Sg P1) => rec_ + "eei" ; --# notpresent
    VPB (PretP Sg P2) => rec_ + "easte" ; --# notpresent
    VPB (PretP Sg P3) => rec_ + "eou" ; --# notpresent
    VPB (PretP Pl P1) => rec_ + vars "eamos"  "eámos" ; --# notpresent
    VPB (PretP Pl P2) => rec_ + "eastes" ; --# notpresent
    VPB (PretP Pl P3) => rec_ + "earam" ; --# notpresent
    VPB (Fut Ind Sg P1) => rec_ + "earei" ; --# notpresent
    VPB (Fut Ind Sg P2) => rec_ + "earás" ; --# notpresent
    VPB (Fut Ind Sg P3) => rec_ + "eará" ; --# notpresent
    VPB (Fut Ind Pl P1) => rec_ + "earemos" ; --# notpresent
    VPB (Fut Ind Pl P2) => rec_ + "eareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => rec_ + "earão" ; --# notpresent
    VPB (Fut Sub Sg P1) => rec_ + "ear" ; --# notpresent
    VPB (Fut Sub Sg P2) => rec_ + "eares" ; --# notpresent
    VPB (Fut Sub Sg P3) => rec_ + "ear" ; --# notpresent
    VPB (Fut Sub Pl P1) => rec_ + "earmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => rec_ + "eardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => rec_ + "earem" ; --# notpresent
    VPB (Cond Sg P1) => rec_ + "earia" ; --# notpresent
    VPB (Cond Sg P2) => rec_ + "earias" ; --# notpresent
    VPB (Cond Sg P3) => rec_ + "earia" ; --# notpresent
    VPB (Cond Pl P1) => rec_ + "earíamos" ; --# notpresent
    VPB (Cond Pl P2) => rec_ + "earíeis" ; --# notpresent
    VPB (Cond Pl P3) => rec_ + "eariam" ; --# notpresent
    VPB (Imper Sg P2) => rec_ + "eia" ;
    VPB (Imper Sg P3) => rec_ + "eie" ;
    VPB (Imper Pl P1) => rec_ + "eemos" ;
    VPB (Imper Pl P2) => rec_ + "eai" ;
    VPB (Imper Pl P3) => rec_ + "eiem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper anunciar_16 : Str -> Verbum = \anunciar ->
  let anunci_ = Predef.tk 2 anunciar in
 {s = table {
    VI Infn => anunci_ + "ar" ;
    VI Ger => anunci_ + "ando" ;
    VI Part => anunci_ + "ado" ;
    VPB (Pres Ind Sg P1) => anunci_ + "o" ;
    VPB (Pres Ind Sg P2) => anunci_ + "as" ;
    VPB (Pres Ind Sg P3) => anunci_ + "a" ;
    VPB (Pres Ind Pl P1) => anunci_ + "amos" ;
    VPB (Pres Ind Pl P2) => anunci_ + "ais" ;
    VPB (Pres Ind Pl P3) => anunci_ + "am" ;
    VPB (Pres Sub Sg P1) => anunci_ + "e" ;
    VPB (Pres Sub Sg P2) => anunci_ + "es" ;
    VPB (Pres Sub Sg P3) => anunci_ + "e" ;
    VPB (Pres Sub Pl P1) => anunci_ + "emos" ;
    VPB (Pres Sub Pl P2) => anunci_ + "eis" ;
    VPB (Pres Sub Pl P3) => anunci_ + "em" ;
    VPB (PretI Ind Sg P1) => anunci_ + "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => anunci_ + "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => anunci_ + "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => anunci_ + "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => anunci_ + "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => anunci_ + "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => anunci_ + "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => anunci_ + "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => anunci_ + "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => anunci_ + "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => anunci_ + "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => anunci_ + "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => anunci_ + "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => anunci_ + "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => anunci_ + "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => anunci_ + "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => anunci_ + "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => anunci_ + "aram" ; --# notpresent
    VPB (PretP Sg P1) => anunci_ + "ei" ; --# notpresent
    VPB (PretP Sg P2) => anunci_ + "aste" ; --# notpresent
    VPB (PretP Sg P3) => anunci_ + "ou" ; --# notpresent
    VPB (PretP Pl P1) => anunci_ + vars "amos"  "ámos" ; --# notpresent
    VPB (PretP Pl P2) => anunci_ + "astes" ; --# notpresent
    VPB (PretP Pl P3) => anunci_ + "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => anunci_ + "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => anunci_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => anunci_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => anunci_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => anunci_ + "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => anunci_ + "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => anunci_ + "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => anunci_ + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => anunci_ + "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => anunci_ + "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => anunci_ + "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => anunci_ + "arem" ; --# notpresent
    VPB (Cond Sg P1) => anunci_ + "aria" ; --# notpresent
    VPB (Cond Sg P2) => anunci_ + "arias" ; --# notpresent
    VPB (Cond Sg P3) => anunci_ + "aria" ; --# notpresent
    VPB (Cond Pl P1) => anunci_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => anunci_ + "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => anunci_ + "ariam" ; --# notpresent
    VPB (Imper Sg P2) => anunci_ + "a" ;
    VPB (Imper Sg P3) => anunci_ + "e" ;
    VPB (Imper Pl P1) => anunci_ + "emos" ;
    VPB (Imper Pl P2) => anunci_ + "ai" ;
    VPB (Imper Pl P3) => anunci_ + "em" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper odiar_17 : Str -> Verbum = \odiar ->
  let od_ = Predef.tk 3 odiar in
 {s = table {
    VI Infn => od_ + "iar" ;
    VI Ger => od_ + "iando" ;
    VI Part => od_ + "iado" ;
    VPB (Pres Ind Sg P1) => od_ + "eio" ;
    VPB (Pres Ind Sg P2) => od_ + "eias" ;
    VPB (Pres Ind Sg P3) => od_ + "eia" ;
    VPB (Pres Ind Pl P1) => od_ + "iamos" ;
    VPB (Pres Ind Pl P2) => od_ + "iais" ;
    VPB (Pres Ind Pl P3) => od_ + "eiam" ;
    VPB (Pres Sub Sg P1) => od_ + "eie" ;
    VPB (Pres Sub Sg P2) => od_ + "eies" ;
    VPB (Pres Sub Sg P3) => od_ + "eie" ;
    VPB (Pres Sub Pl P1) => od_ + "iemos" ;
    VPB (Pres Sub Pl P2) => od_ + "ieis" ;
    VPB (Pres Sub Pl P3) => od_ + "eiem" ;
    VPB (PretI Ind Sg P1) => od_ + "iava" ; --# notpresent
    VPB (PretI Ind Sg P2) => od_ + "iavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => od_ + "iava" ; --# notpresent
    VPB (PretI Ind Pl P1) => od_ + "iávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => od_ + "iáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => od_ + "iavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => od_ + "iasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => od_ + "iasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => od_ + "iasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => od_ + "iássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => od_ + "iásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => od_ + "iassem" ; --# notpresent
    VPB (MQPerf Sg P1) => od_ + "iara" ; --# notpresent
    VPB (MQPerf Sg P2) => od_ + "iaras" ; --# notpresent
    VPB (MQPerf Sg P3) => od_ + "iara" ; --# notpresent
    VPB (MQPerf Pl P1) => od_ + "iáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => od_ + "ipareis" ; --# notpresent
    VPB (MQPerf Pl P3) => od_ + "iaram" ; --# notpresent
    VPB (PretP Sg P1) => od_ + "iei" ; --# notpresent
    VPB (PretP Sg P2) => od_ + "iaste" ; --# notpresent
    VPB (PretP Sg P3) => od_ + "iou" ; --# notpresent
    VPB (PretP Pl P1) => od_ + "iámos" ; --# notpresent
    VPB (PretP Pl P2) => od_ + "iastes" ; --# notpresent
    VPB (PretP Pl P3) => od_ + "iaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => od_ + "iarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => od_ + "iarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => od_ + "iará" ; --# notpresent
    VPB (Fut Ind Pl P1) => od_ + "iaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => od_ + "iareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => od_ + "iarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => od_ + "iar" ; --# notpresent
    VPB (Fut Sub Sg P2) => od_ + "iares" ; --# notpresent
    VPB (Fut Sub Sg P3) => od_ + "iar" ; --# notpresent
    VPB (Fut Sub Pl P1) => od_ + "iarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => od_ + "iardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => od_ + "iarem" ; --# notpresent
    VPB (Cond Sg P1) => od_ + "iaria" ; --# notpresent
    VPB (Cond Sg P2) => od_ + "iarias" ; --# notpresent
    VPB (Cond Sg P3) => od_ + "iaria" ; --# notpresent
    VPB (Cond Pl P1) => od_ + "iaríamos" ; --# notpresent
    VPB (Cond Pl P2) => od_ + "iaríeis" ; --# notpresent
    VPB (Cond Pl P3) => od_ + "iariam" ; --# notpresent
    VPB (Imper Sg P2) => od_ + "eia" ;
    VPB (Imper Sg P3) => od_ + "eie" ;
    VPB (Imper Pl P1) => od_ + "iemos" ;
    VPB (Imper Pl P2) => od_ + "iai" ;
    VPB (Imper Pl P3) => od_ + "eiem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper comerciar_18 : Str -> Verbum = \comerciar ->
  let comerc_ = Predef.tk 3 comerciar in
 {s = table {
    VI Infn => comerc_ + "iar" ;
    VI Ger => comerc_ + "iando" ;
    VI Part => comerc_ + "iado" ;
    VPB (Pres Ind Sg P1) => comerc_ + vars "eio"  "io" ;
    VPB (Pres Ind Sg P2) => comerc_ + vars "eias"  "ias" ;
    VPB (Pres Ind Sg P3) => comerc_ + vars "eia"  "ia" ;
    VPB (Pres Ind Pl P1) => comerc_ + "iamos" ;
    VPB (Pres Ind Pl P2) => comerc_ + "iais" ;
    VPB (Pres Ind Pl P3) => comerc_ + vars "eiam"  "iam" ;
    VPB (Pres Sub Sg P1) => comerc_ + vars "eie"  "ie" ;
    VPB (Pres Sub Sg P2) => comerc_ + vars "eies"  "ies" ;
    VPB (Pres Sub Sg P3) => comerc_ + vars "eie"  "ie" ;
    VPB (Pres Sub Pl P1) => comerc_ + "iemos" ;
    VPB (Pres Sub Pl P2) => comerc_ + "ieis" ;
    VPB (Pres Sub Pl P3) => comerc_ + vars "eiem"  "iem" ;
    VPB (PretI Ind Sg P1) => comerc_ + "iava" ; --# notpresent
    VPB (PretI Ind Sg P2) => comerc_ + "iavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => comerc_ + "iava" ; --# notpresent
    VPB (PretI Ind Pl P1) => comerc_ + "iávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => comerc_ + "iáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => comerc_ + "iavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => comerc_ + "iasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => comerc_ + "iasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => comerc_ + "iasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => comerc_ + "iássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => comerc_ + "iásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => comerc_ + "iassem" ; --# notpresent
    VPB (MQPerf Sg P1) => comerc_ + "iara" ; --# notpresent
    VPB (MQPerf Sg P2) => comerc_ + "iaras" ; --# notpresent
    VPB (MQPerf Sg P3) => comerc_ + "iara" ; --# notpresent
    VPB (MQPerf Pl P1) => comerc_ + "iáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => comerc_ + "iáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => comerc_ + "iaram" ; --# notpresent
    VPB (PretP Sg P1) => comerc_ + "iei" ; --# notpresent
    VPB (PretP Sg P2) => comerc_ + "iaste" ; --# notpresent
    VPB (PretP Sg P3) => comerc_ + "iou" ; --# notpresent
    VPB (PretP Pl P1) => comerc_ + vars "iamos"  "iamos" ; --# notpresent
    VPB (PretP Pl P2) => comerc_ + "iastes" ; --# notpresent
    VPB (PretP Pl P3) => comerc_ + "iaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => comerc_ + "iarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => comerc_ + "iarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => comerc_ + "iará" ; --# notpresent
    VPB (Fut Ind Pl P1) => comerc_ + "iaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => comerc_ + "iareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => comerc_ + "iarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => comerc_ + "iar" ; --# notpresent
    VPB (Fut Sub Sg P2) => comerc_ + "iares" ; --# notpresent
    VPB (Fut Sub Sg P3) => comerc_ + "iar" ; --# notpresent
    VPB (Fut Sub Pl P1) => comerc_ + "iarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => comerc_ + "iardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => comerc_ + "iarem" ; --# notpresent
    VPB (Cond Sg P1) => comerc_ + "iaria" ; --# notpresent
    VPB (Cond Sg P2) => comerc_ + "iarias" ; --# notpresent
    VPB (Cond Sg P3) => comerc_ + "iaria" ; --# notpresent
    VPB (Cond Pl P1) => comerc_ + "iaríamos" ; --# notpresent
    VPB (Cond Pl P2) => comerc_ + "iaríeis" ; --# notpresent
    VPB (Cond Pl P3) => comerc_ + "iariam" ; --# notpresent
    VPB (Imper Sg P2) => comerc_ + vars "eia"  "ia" ;
    VPB (Imper Sg P3) => comerc_ + vars "eie"  "ie" ;
    VPB (Imper Pl P1) => comerc_ + "iemos" ;
    VPB (Imper Pl P2) => comerc_ + "iai" ;
    VPB (Imper Pl P3) => comerc_ + vars "eiem"  "iem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper saudar_19 : Str -> Verbum = \saudar ->
  let saud_ = Predef.tk 2 saudar in
 {s = table {
    VI Infn => saud_ + "ar" ;
    VI Ger => saud_ + "ando" ;
    VI Part => saud_ + "ado" ;
    VPB (Pres Ind Sg P1) => saud_ + "o" ;
    VPB (Pres Ind Sg P2) => saud_ + "as" ;
    VPB (Pres Ind Sg P3) => saud_ + "a" ;
    VPB (Pres Ind Pl P1) => saud_ + "amos" ;
    VPB (Pres Ind Pl P2) => saud_ + "ais" ;
    VPB (Pres Ind Pl P3) => saud_ + "am" ;
    VPB (Pres Sub Sg P1) => saud_ + "e" ;
    VPB (Pres Sub Sg P2) => saud_ + "es" ;
    VPB (Pres Sub Sg P3) => saud_ + "e" ;
    VPB (Pres Sub Pl P1) => saud_ + "emos" ;
    VPB (Pres Sub Pl P2) => saud_ + "eis" ;
    VPB (Pres Sub Pl P3) => saud_ + "em" ;
    VPB (PretI Ind Sg P1) => saud_ + "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => saud_ + "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => saud_ + "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => saud_ + "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => saud_ + "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => saud_ + "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => saud_ + "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => saud_ + "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => saud_ + "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => saud_ + "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => saud_ + "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => saud_ + "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => saud_ + "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => saud_ + "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => saud_ + "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => saud_ + "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => saud_ + "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => saud_ + "aram" ; --# notpresent
    VPB (PretP Sg P1) => saud_ + "ei" ; --# notpresent
    VPB (PretP Sg P2) => saud_ + "aste" ; --# notpresent
    VPB (PretP Sg P3) => saud_ + "ou" ; --# notpresent
    VPB (PretP Pl P1) => saud_ + vars "amos"  "ámos" ; --# notpresent
    VPB (PretP Pl P2) => saud_ + "astes" ; --# notpresent
    VPB (PretP Pl P3) => saud_ + "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => saud_ + "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => saud_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => saud_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => saud_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => saud_ + "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => saud_ + "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => saud_ + "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => saud_ + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => saud_ + "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => saud_ + "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => saud_ + "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => saud_ + "arem" ; --# notpresent
    VPB (Cond Sg P1) => saud_ + "aria" ; --# notpresent
    VPB (Cond Sg P2) => saud_ + "arias" ; --# notpresent
    VPB (Cond Sg P3) => saud_ + "aria" ; --# notpresent
    VPB (Cond Pl P1) => saud_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => saud_ + "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => saud_ + "ariam" ; --# notpresent
    VPB (Imper Sg P2) => saud_ + "a" ;
    VPB (Imper Sg P3) => saud_ + "e" ;
    VPB (Imper Pl P1) => saud_ + "emos" ;
    VPB (Imper Pl P2) => saud_ + "ai" ;
    VPB (Imper Pl P3) => saud_ + "em" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper perdoar_20 : Str -> Verbum = \perdoar ->
  let perd_ = Predef.tk 3 perdoar in
 {s = table {
    VI Infn => perd_ + "oar" ;
    VI Ger => perd_ + "oando" ;
    VI Part => perd_ + "oado" ;
    VPB (Pres Ind Sg P1) => perd_ + vars "ôo"  "oo" ;
    VPB (Pres Ind Sg P2) => perd_ + "oas" ;
    VPB (Pres Ind Sg P3) => perd_ + "oa" ;
    VPB (Pres Ind Pl P1) => perd_ + "oamos" ;
    VPB (Pres Ind Pl P2) => perd_ + "oais" ;
    VPB (Pres Ind Pl P3) => perd_ + "oam" ;
    VPB (Pres Sub Sg P1) => perd_ + "oe" ;
    VPB (Pres Sub Sg P2) => perd_ + "oes" ;
    VPB (Pres Sub Sg P3) => perd_ + "oe" ;
    VPB (Pres Sub Pl P1) => perd_ + "oemos" ;
    VPB (Pres Sub Pl P2) => perd_ + "oeis" ;
    VPB (Pres Sub Pl P3) => perd_ + "oem" ;
    VPB (PretI Ind Sg P1) => perd_ + "oava" ; --# notpresent
    VPB (PretI Ind Sg P2) => perd_ + "oavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => perd_ + "oava" ; --# notpresent
    VPB (PretI Ind Pl P1) => perd_ + "oávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => perd_ + "oáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => perd_ + "oavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => perd_ + "oasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => perd_ + "oasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => perd_ + "oasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => perd_ + "oássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => perd_ + "oásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => perd_ + "oassem" ; --# notpresent
    VPB (MQPerf Sg P1) => perd_ + "oara" ; --# notpresent
    VPB (MQPerf Sg P2) => perd_ + "oaras" ; --# notpresent
    VPB (MQPerf Sg P3) => perd_ + "oara" ; --# notpresent
    VPB (MQPerf Pl P1) => perd_ + "oáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => perd_ + "oáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => perd_ + "oaram" ; --# notpresent
    VPB (PretP Sg P1) => perd_ + "oei" ; --# notpresent
    VPB (PretP Sg P2) => perd_ + "oaste" ; --# notpresent
    VPB (PretP Sg P3) => perd_ + "oou" ; --# notpresent
    VPB (PretP Pl P1) => perd_ + "oamos" ; --# notpresent
    VPB (PretP Pl P2) => perd_ + "oastes" ; --# notpresent
    VPB (PretP Pl P3) => perd_ + "oaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => perd_ + "oarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => perd_ + "oarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => perd_ + "oará" ; --# notpresent
    VPB (Fut Ind Pl P1) => perd_ + "oaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => perd_ + "oareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => perd_ + "oarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => perd_ + "oar" ; --# notpresent
    VPB (Fut Sub Sg P2) => perd_ + "oares" ; --# notpresent
    VPB (Fut Sub Sg P3) => perd_ + "oar" ; --# notpresent
    VPB (Fut Sub Pl P1) => perd_ + "oarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => perd_ + "oardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => perd_ + "oarem" ; --# notpresent
    VPB (Cond Sg P1) => perd_ + "oaria" ; --# notpresent
    VPB (Cond Sg P2) => perd_ + "oarias" ; --# notpresent
    VPB (Cond Sg P3) => perd_ + "oaria" ; --# notpresent
    VPB (Cond Pl P1) => perd_ + "oaríamos" ; --# notpresent
    VPB (Cond Pl P2) => perd_ + "oaríeis" ; --# notpresent
    VPB (Cond Pl P3) => perd_ + "oariam" ; --# notpresent
    VPB (Imper Sg P2) => perd_ + "oa" ;
    VPB (Imper Sg P3) => perd_ + "oe" ;
    VPB (Imper Pl P1) => perd_ + "oemos" ;
    VPB (Imper Pl P2) => perd_ + "oai" ;
    VPB (Imper Pl P3) => perd_ + "oem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper averiguar_21 : Str -> Verbum = \averiguar ->
  let averigu_ = Predef.tk 2 averiguar in
 {s = table {
    VI Infn => averigu_ + "ar" ;
    VI Ger => averigu_ + "ando" ;
    VI Part => averigu_ + "ado" ;
    VPB (Pres Ind Sg P1) => averigu_ + "o" ;
    VPB (Pres Ind Sg P2) => averigu_ + "as" ;
    VPB (Pres Ind Sg P3) => averigu_ + "a" ;
    VPB (Pres Ind Pl P1) => averigu_ + "amos" ;
    VPB (Pres Ind Pl P2) => averigu_ + "ais" ;
    VPB (Pres Ind Pl P3) => averigu_ + "am" ;
    VPB (Pres Sub Sg P1) => averigu_ + "e" ;
    VPB (Pres Sub Sg P2) => averigu_ + "es" ;
    VPB (Pres Sub Sg P3) => averigu_ + "e" ;
    VPB (Pres Sub Pl P1) => averigu_ + "emos" ;
    VPB (Pres Sub Pl P2) => averigu_ + "eis" ;
    VPB (Pres Sub Pl P3) => averigu_ + "em" ;
    VPB (PretI Ind Sg P1) => averigu_ + "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => averigu_ + "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => averigu_ + "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => averigu_ + "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => averigu_ + "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => averigu_ + "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => averigu_ + "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => averigu_ + "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => averigu_ + "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => averigu_ + "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => averigu_ + "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => averigu_ + "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => averigu_ + "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => averigu_ + "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => averigu_ + "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => averigu_ + "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => averigu_ + "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => averigu_ + "aram" ; --# notpresent
    VPB (PretP Sg P1) => averigu_ + "ei" ; --# notpresent
    VPB (PretP Sg P2) => averigu_ + "aste" ; --# notpresent
    VPB (PretP Sg P3) => averigu_ + "ou" ; --# notpresent
    VPB (PretP Pl P1) => averigu_ + "amos" ; --# notpresent
    VPB (PretP Pl P2) => averigu_ + "astes" ; --# notpresent
    VPB (PretP Pl P3) => averigu_ + "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => averigu_ + "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => averigu_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => averigu_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => averigu_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => averigu_ + "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => averigu_ + "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => averigu_ + "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => averigu_ + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => averigu_ + "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => averigu_ + "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => averigu_ + "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => averigu_ + "arem" ; --# notpresent
    VPB (Cond Sg P1) => averigu_ + "aria" ; --# notpresent
    VPB (Cond Sg P2) => averigu_ + "arias" ; --# notpresent
    VPB (Cond Sg P3) => averigu_ + "aria" ; --# notpresent
    VPB (Cond Pl P1) => averigu_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => averigu_ + "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => averigu_ + "ariam" ; --# notpresent
    VPB (Imper Sg P2) => averigu_ + "a" ;
    VPB (Imper Sg P3) => averigu_ + "e" ;
    VPB (Imper Pl P1) => averigu_ + "emos" ;
    VPB (Imper Pl P2) => averigu_ + "ai" ;
    VPB (Imper Pl P3) => averigu_ + "em" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper neviscar_22 : Str -> Verbum = \neviscar ->
  let x_ = Predef.tk 8 neviscar in
 {s = table {
    VI Infn => x_ + "neviscar" ;
    VI Ger => x_ + "neviscando" ;
    VI Part => x_ + "neviscado" ;
    VPB (Pres Ind Sg P1) => x_ + nonExist ;
    VPB (Pres Ind Sg P2) => x_ + nonExist ;
    VPB (Pres Ind Sg P3) => x_ + "nevisca" ;
    VPB (Pres Ind Pl P1) => x_ + nonExist ;
    VPB (Pres Ind Pl P2) => x_ + nonExist ;
    VPB (Pres Ind Pl P3) => x_ + nonExist ;
    VPB (Pres Sub Sg P1) => x_ + nonExist ;
    VPB (Pres Sub Sg P2) => x_ + nonExist ;
    VPB (Pres Sub Sg P3) => x_ + "nevisque" ;
    VPB (Pres Sub Pl P1) => x_ + nonExist ;
    VPB (Pres Sub Pl P2) => x_ + nonExist ;
    VPB (Pres Sub Pl P3) => x_ + nonExist ;
    VPB (PretI Ind Sg P1) => x_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => x_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => x_ + "neviscava" ; --# notpresent
    VPB (PretI Ind Pl P1) => x_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => x_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => x_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P1) => x_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => x_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => x_ + "neviscasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => x_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => x_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => x_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P1) => x_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => x_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => x_ + "neviscara" ; --# notpresent
    VPB (MQPerf Pl P1) => x_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => x_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => x_ + nonExist ; --# notpresent
    VPB (PretP Sg P1) => x_ + nonExist ; --# notpresent
    VPB (PretP Sg P2) => x_ + nonExist ; --# notpresent
    VPB (PretP Sg P3) => x_ + "neviscou" ; --# notpresent
    VPB (PretP Pl P1) => x_ + nonExist ; --# notpresent
    VPB (PretP Pl P2) => x_ + nonExist ; --# notpresent
    VPB (PretP Pl P3) => x_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "neviscará" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "neviscar" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + nonExist ; --# notpresent
    VPB (Cond Sg P1) => x_ + nonExist ; --# notpresent
    VPB (Cond Sg P2) => x_ + nonExist ; --# notpresent
    VPB (Cond Sg P3) => x_ + "neviscaria" ; --# notpresent
    VPB (Cond Pl P1) => x_ + nonExist ; --# notpresent
    VPB (Cond Pl P2) => x_ + nonExist ; --# notpresent
    VPB (Cond Pl P3) => x_ + nonExist ; --# notpresent
    VPB (Imper Sg P2) => x_ + nonExist ;
    VPB (Imper Sg P3) => x_ + nonExist ;
    VPB (Imper Pl P1) => x_ + nonExist ;
    VPB (Imper Pl P2) => x_ + nonExist ;
    VPB (Imper Pl P3) => x_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper adequar_23 : Str -> Verbum = \adequar ->
  let adequ_ = Predef.tk 2 adequar in
 {s = table {
    VI Infn => adequ_ + "ar" ;
    VI Ger => adequ_ + "ando" ;
    VI Part => adequ_ + "ado" ;
    VPB (Pres Ind Sg P1) => adequ_ + nonExist ;
    VPB (Pres Ind Sg P2) => adequ_ + nonExist ;
    VPB (Pres Ind Sg P3) => adequ_ + nonExist ;
    VPB (Pres Ind Pl P1) => adequ_ + "amos" ;
    VPB (Pres Ind Pl P2) => adequ_ + "ais" ;
    VPB (Pres Ind Pl P3) => adequ_ + nonExist ;
    VPB (Pres Sub Sg P1) => adequ_ + nonExist ;
    VPB (Pres Sub Sg P2) => adequ_ + nonExist ;
    VPB (Pres Sub Sg P3) => adequ_ + nonExist ;
    VPB (Pres Sub Pl P1) => adequ_ + "emos" ;
    VPB (Pres Sub Pl P2) => adequ_ + "eis" ;
    VPB (Pres Sub Pl P3) => adequ_ + nonExist ;
    VPB (PretI Ind Sg P1) => adequ_ + "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => adequ_ + "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => adequ_ + "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => adequ_ + "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => adequ_ + "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => adequ_ + "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => adequ_ + "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => adequ_ + "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => adequ_ + "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => adequ_ + "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => adequ_ + "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => adequ_ + "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => adequ_ + "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => adequ_ + "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => adequ_ + "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => adequ_ + "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => adequ_ + "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => adequ_ + "aram" ; --# notpresent
    VPB (PretP Sg P1) => adequ_ + "ei" ; --# notpresent
    VPB (PretP Sg P2) => adequ_ + "aste" ; --# notpresent
    VPB (PretP Sg P3) => adequ_ + "ou" ; --# notpresent
    VPB (PretP Pl P1) => adequ_ + vars "amos"  "ámos" ; --# notpresent
    VPB (PretP Pl P2) => adequ_ + "astes" ; --# notpresent
    VPB (PretP Pl P3) => adequ_ + "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => adequ_ + "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => adequ_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => adequ_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => adequ_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => adequ_ + "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => adequ_ + "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => adequ_ + "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => adequ_ + "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => adequ_ + "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => adequ_ + "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => adequ_ + "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => adequ_ + "arem" ; --# notpresent
    VPB (Cond Sg P1) => adequ_ + "aria" ; --# notpresent
    VPB (Cond Sg P2) => adequ_ + "arias" ; --# notpresent
    VPB (Cond Sg P3) => adequ_ + "aria" ; --# notpresent
    VPB (Cond Pl P1) => adequ_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => adequ_ + "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => adequ_ + "ariam" ; --# notpresent
    VPB (Imper Sg P2) => adequ_ + nonExist ;
    VPB (Imper Sg P3) => adequ_ + nonExist ;
    VPB (Imper Pl P1) => adequ_ + "emos" ;
    VPB (Imper Pl P2) => adequ_ + "ai" ;
    VPB (Imper Pl P3) => adequ_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper relampaguear_24 : Str -> Verbum = \relampaguear ->
  let relampague_ = Predef.tk 2 relampaguear in
 {s = table {
    VI Infn => relampague_ + "ar" ;
    VI Ger => relampague_ + "ando" ;
    VI Part => relampague_ + "ado" ;
    VPB (Pres Ind Sg P1) => relampague_ + nonExist ;
    VPB (Pres Ind Sg P2) => relampague_ + nonExist ;
    VPB (Pres Ind Sg P3) => relampague_ + "ia" ;
    VPB (Pres Ind Pl P1) => relampague_ + nonExist ;
    VPB (Pres Ind Pl P2) => relampague_ + nonExist ;
    VPB (Pres Ind Pl P3) => relampague_ + "iam" ;
    VPB (Pres Sub Sg P1) => relampague_ + nonExist ;
    VPB (Pres Sub Sg P2) => relampague_ + nonExist ;
    VPB (Pres Sub Sg P3) => relampague_ + "ie" ;
    VPB (Pres Sub Pl P1) => relampague_ + nonExist ;
    VPB (Pres Sub Pl P2) => relampague_ + nonExist ;
    VPB (Pres Sub Pl P3) => relampague_ + "iem" ;
    VPB (PretI Ind Sg P1) => relampague_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => relampague_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => relampague_ + "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => relampague_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => relampague_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => relampague_ + "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => relampague_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => relampague_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => relampague_ + "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => relampague_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => relampague_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => relampague_ + "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => relampague_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => relampague_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => relampague_ + "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => relampague_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => relampague_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => relampague_ + "aram" ; --# notpresent
    VPB (PretP Sg P1) => relampague_ + nonExist ; --# notpresent
    VPB (PretP Sg P2) => relampague_ + nonExist ; --# notpresent
    VPB (PretP Sg P3) => relampague_ + "ou" ; --# notpresent
    VPB (PretP Pl P1) => relampague_ + nonExist ; --# notpresent
    VPB (PretP Pl P2) => relampague_ + nonExist ; --# notpresent
    VPB (PretP Pl P3) => relampague_ + "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => relampague_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => relampague_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => relampague_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => relampague_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => relampague_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => relampague_ + "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => relampague_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => relampague_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => relampague_ + "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => relampague_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => relampague_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => relampague_ + "arem" ; --# notpresent
    VPB (Cond Sg P1) => relampague_ + nonExist ; --# notpresent
    VPB (Cond Sg P2) => relampague_ + nonExist ; --# notpresent
    VPB (Cond Sg P3) => relampague_ + "aria" ; --# notpresent
    VPB (Cond Pl P1) => relampague_ + nonExist ; --# notpresent
    VPB (Cond Pl P2) => relampague_ + nonExist ; --# notpresent
    VPB (Cond Pl P3) => relampague_ + "ariam" ; --# notpresent
    VPB (Imper Sg P2) => relampague_ + nonExist ;
    VPB (Imper Sg P3) => relampague_ + nonExist ;
    VPB (Imper Pl P1) => relampague_ + nonExist ;
    VPB (Imper Pl P2) => relampague_ + nonExist ;
    VPB (Imper Pl P3) => relampague_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper aquecer_25 : Str -> Verbum = \aquecer ->
  let aque_ = Predef.tk 3 aquecer in
 {s = table {
    VI Infn => aque_ + "cer" ;
    VI Ger => aque_ + "cendo" ;
    VI Part => aque_ + "cido" ;
    VPB (Pres Ind Sg P1) => aque_ + "ço" ;
    VPB (Pres Ind Sg P2) => aque_ + "ces" ;
    VPB (Pres Ind Sg P3) => aque_ + "ce" ;
    VPB (Pres Ind Pl P1) => aque_ + "cemos" ;
    VPB (Pres Ind Pl P2) => aque_ + "ceis" ;
    VPB (Pres Ind Pl P3) => aque_ + "cem" ;
    VPB (Pres Sub Sg P1) => aque_ + "ça" ;
    VPB (Pres Sub Sg P2) => aque_ + "ças" ;
    VPB (Pres Sub Sg P3) => aque_ + "ça" ;
    VPB (Pres Sub Pl P1) => aque_ + "çamos" ;
    VPB (Pres Sub Pl P2) => aque_ + "çais" ;
    VPB (Pres Sub Pl P3) => aque_ + "çam" ;
    VPB (PretI Ind Sg P1) => aque_ + "cia" ; --# notpresent
    VPB (PretI Ind Sg P2) => aque_ + "cias" ; --# notpresent
    VPB (PretI Ind Sg P3) => aque_ + "cia" ; --# notpresent
    VPB (PretI Ind Pl P1) => aque_ + "ciamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => aque_ + "cíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => aque_ + "ciam" ; --# notpresent
    VPB (PretI Sub Sg P1) => aque_ + "cesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => aque_ + "cesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => aque_ + "cesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => aque_ + "cêssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => aque_ + "cêsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => aque_ + "cessem" ; --# notpresent
    VPB (MQPerf Sg P1) => aque_ + "cera" ; --# notpresent
    VPB (MQPerf Sg P2) => aque_ + "ceras" ; --# notpresent
    VPB (MQPerf Sg P3) => aque_ + "cera" ; --# notpresent
    VPB (MQPerf Pl P1) => aque_ + "cêramos" ; --# notpresent
    VPB (MQPerf Pl P2) => aque_ + "cêreis" ; --# notpresent
    VPB (MQPerf Pl P3) => aque_ + "ceram" ; --# notpresent
    VPB (PretP Sg P1) => aque_ + "ci" ; --# notpresent
    VPB (PretP Sg P2) => aque_ + "ceste" ; --# notpresent
    VPB (PretP Sg P3) => aque_ + "ceu" ; --# notpresent
    VPB (PretP Pl P1) => aque_ + "cemos" ; --# notpresent
    VPB (PretP Pl P2) => aque_ + "cestes" ; --# notpresent
    VPB (PretP Pl P3) => aque_ + "ceram" ; --# notpresent
    VPB (Fut Ind Sg P1) => aque_ + "cerei" ; --# notpresent
    VPB (Fut Ind Sg P2) => aque_ + "cerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => aque_ + "cerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => aque_ + "ceremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => aque_ + "cereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => aque_ + "cerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => aque_ + "cer" ; --# notpresent
    VPB (Fut Sub Sg P2) => aque_ + "ceres" ; --# notpresent
    VPB (Fut Sub Sg P3) => aque_ + "cer" ; --# notpresent
    VPB (Fut Sub Pl P1) => aque_ + "cermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => aque_ + "cerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => aque_ + "cerem" ; --# notpresent
    VPB (Cond Sg P1) => aque_ + "ceria" ; --# notpresent
    VPB (Cond Sg P2) => aque_ + "cerias" ; --# notpresent
    VPB (Cond Sg P3) => aque_ + "ceria" ; --# notpresent
    VPB (Cond Pl P1) => aque_ + "ceríamos" ; --# notpresent
    VPB (Cond Pl P2) => aque_ + "ceríeis" ; --# notpresent
    VPB (Cond Pl P3) => aque_ + "ceriam" ; --# notpresent
    VPB (Imper Sg P2) => aque_ + "ce" ;
    VPB (Imper Sg P3) => aque_ + "ça" ;
    VPB (Imper Pl P1) => aque_ + "çamos" ;
    VPB (Imper Pl P2) => aque_ + "cei" ;
    VPB (Imper Pl P3) => aque_ + "çam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper proteger_26 : Str -> Verbum = \proteger ->
  let prote_ = Predef.tk 3 proteger in
 {s = table {
    VI Infn => prote_ + "ger" ;
    VI Ger => prote_ + "gendo" ;
    VI Part => prote_ + "gido" ;
    VPB (Pres Ind Sg P1) => prote_ + "jo" ;
    VPB (Pres Ind Sg P2) => prote_ + "ges" ;
    VPB (Pres Ind Sg P3) => prote_ + "ge" ;
    VPB (Pres Ind Pl P1) => prote_ + "gemos" ;
    VPB (Pres Ind Pl P2) => prote_ + "geis" ;
    VPB (Pres Ind Pl P3) => prote_ + "gem" ;
    VPB (Pres Sub Sg P1) => prote_ + "ja" ;
    VPB (Pres Sub Sg P2) => prote_ + "jas" ;
    VPB (Pres Sub Sg P3) => prote_ + "ja" ;
    VPB (Pres Sub Pl P1) => prote_ + "jamos" ;
    VPB (Pres Sub Pl P2) => prote_ + "jais" ;
    VPB (Pres Sub Pl P3) => prote_ + "jam" ;
    VPB (PretI Ind Sg P1) => prote_ + "gia" ; --# notpresent
    VPB (PretI Ind Sg P2) => prote_ + "gias" ; --# notpresent
    VPB (PretI Ind Sg P3) => prote_ + "gia" ; --# notpresent
    VPB (PretI Ind Pl P1) => prote_ + "gíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => prote_ + "gíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => prote_ + "giam" ; --# notpresent
    VPB (PretI Sub Sg P1) => prote_ + "gesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => prote_ + "gesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => prote_ + "gesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => prote_ + "gêssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => prote_ + "gêsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => prote_ + "gessem" ; --# notpresent
    VPB (MQPerf Sg P1) => prote_ + "gera" ; --# notpresent
    VPB (MQPerf Sg P2) => prote_ + "geras" ; --# notpresent
    VPB (MQPerf Sg P3) => prote_ + "gera" ; --# notpresent
    VPB (MQPerf Pl P1) => prote_ + "gêramos" ; --# notpresent
    VPB (MQPerf Pl P2) => prote_ + "gêreis" ; --# notpresent
    VPB (MQPerf Pl P3) => prote_ + "geram" ; --# notpresent
    VPB (PretP Sg P1) => prote_ + "gi" ; --# notpresent
    VPB (PretP Sg P2) => prote_ + "geste" ; --# notpresent
    VPB (PretP Sg P3) => prote_ + "geu" ; --# notpresent
    VPB (PretP Pl P1) => prote_ + "gemos" ; --# notpresent
    VPB (PretP Pl P2) => prote_ + "gestes" ; --# notpresent
    VPB (PretP Pl P3) => prote_ + "geram" ; --# notpresent
    VPB (Fut Ind Sg P1) => prote_ + "gerei" ; --# notpresent
    VPB (Fut Ind Sg P2) => prote_ + "gerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => prote_ + "gerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => prote_ + "geremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => prote_ + "gereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => prote_ + "gerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => prote_ + "ger" ; --# notpresent
    VPB (Fut Sub Sg P2) => prote_ + "geres" ; --# notpresent
    VPB (Fut Sub Sg P3) => prote_ + "ger" ; --# notpresent
    VPB (Fut Sub Pl P1) => prote_ + "germos" ; --# notpresent
    VPB (Fut Sub Pl P2) => prote_ + "gerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => prote_ + "gerem" ; --# notpresent
    VPB (Cond Sg P1) => prote_ + "geria" ; --# notpresent
    VPB (Cond Sg P2) => prote_ + "gerias" ; --# notpresent
    VPB (Cond Sg P3) => prote_ + "geria" ; --# notpresent
    VPB (Cond Pl P1) => prote_ + "geríamos" ; --# notpresent
    VPB (Cond Pl P2) => prote_ + "geríeis" ; --# notpresent
    VPB (Cond Pl P3) => prote_ + "geriam" ; --# notpresent
    VPB (Imper Sg P2) => prote_ + "ge" ;
    VPB (Imper Sg P3) => prote_ + "ja" ;
    VPB (Imper Pl P1) => prote_ + "jamos" ;
    VPB (Imper Pl P2) => prote_ + "gei" ;
    VPB (Imper Pl P3) => prote_ + "jam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper erguer_27 : Str -> Verbum = \erguer ->
  let erg_ = Predef.tk 3 erguer in
 {s = table {
    VI Infn => erg_ + "uer" ;
    VI Ger => erg_ + "uendo" ;
    VI Part => erg_ + "uido" ;
    VPB (Pres Ind Sg P1) => erg_ + "o" ;
    VPB (Pres Ind Sg P2) => erg_ + "ues" ;
    VPB (Pres Ind Sg P3) => erg_ + "ue" ;
    VPB (Pres Ind Pl P1) => erg_ + "uemos" ;
    VPB (Pres Ind Pl P2) => erg_ + "ueis" ;
    VPB (Pres Ind Pl P3) => erg_ + "uem" ;
    VPB (Pres Sub Sg P1) => erg_ + "a" ;
    VPB (Pres Sub Sg P2) => erg_ + "as" ;
    VPB (Pres Sub Sg P3) => erg_ + "a" ;
    VPB (Pres Sub Pl P1) => erg_ + "amos" ;
    VPB (Pres Sub Pl P2) => erg_ + "ais" ;
    VPB (Pres Sub Pl P3) => erg_ + "am" ;
    VPB (PretI Ind Sg P1) => erg_ + "uia" ; --# notpresent
    VPB (PretI Ind Sg P2) => erg_ + "uias" ; --# notpresent
    VPB (PretI Ind Sg P3) => erg_ + "uia" ; --# notpresent
    VPB (PretI Ind Pl P1) => erg_ + "uíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => erg_ + "uíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => erg_ + "uiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => erg_ + "uesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => erg_ + "uesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => erg_ + "uesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => erg_ + "uêssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => erg_ + "uêsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => erg_ + "uessem" ; --# notpresent
    VPB (MQPerf Sg P1) => erg_ + "uera" ; --# notpresent
    VPB (MQPerf Sg P2) => erg_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => erg_ + "uera" ; --# notpresent
    VPB (MQPerf Pl P1) => erg_ + "uêramos" ; --# notpresent
    VPB (MQPerf Pl P2) => erg_ + "uêreis" ; --# notpresent
    VPB (MQPerf Pl P3) => erg_ + "ueram" ; --# notpresent
    VPB (PretP Sg P1) => erg_ + "ui" ; --# notpresent
    VPB (PretP Sg P2) => erg_ + "ueste" ; --# notpresent
    VPB (PretP Sg P3) => erg_ + "ueu" ; --# notpresent
    VPB (PretP Pl P1) => erg_ + "uemos" ; --# notpresent
    VPB (PretP Pl P2) => erg_ + "uestes" ; --# notpresent
    VPB (PretP Pl P3) => erg_ + "ueram" ; --# notpresent
    VPB (Fut Ind Sg P1) => erg_ + "uerei" ; --# notpresent
    VPB (Fut Ind Sg P2) => erg_ + "uerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => erg_ + "uerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => erg_ + "ueremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => erg_ + "uereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => erg_ + "uerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => erg_ + "uer" ; --# notpresent
    VPB (Fut Sub Sg P2) => erg_ + "ueres" ; --# notpresent
    VPB (Fut Sub Sg P3) => erg_ + "uer" ; --# notpresent
    VPB (Fut Sub Pl P1) => erg_ + "uermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => erg_ + "uerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => erg_ + "uerem" ; --# notpresent
    VPB (Cond Sg P1) => erg_ + "ueria" ; --# notpresent
    VPB (Cond Sg P2) => erg_ + "uerias" ; --# notpresent
    VPB (Cond Sg P3) => erg_ + "ueria" ; --# notpresent
    VPB (Cond Pl P1) => erg_ + "ueríamos" ; --# notpresent
    VPB (Cond Pl P2) => erg_ + "ueríeis" ; --# notpresent
    VPB (Cond Pl P3) => erg_ + "ueriam" ; --# notpresent
    VPB (Imper Sg P2) => erg_ + "ue" ;
    VPB (Imper Sg P3) => erg_ + "a" ;
    VPB (Imper Pl P1) => erg_ + "amos" ;
    VPB (Imper Pl P2) => erg_ + "uei" ;
    VPB (Imper Pl P3) => erg_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper moer_28 : Str -> Verbum = \moer ->
  let mo_ = Predef.tk 2 moer in
 {s = table {
    VI Infn => mo_ + "er" ;
    VI Ger => mo_ + "endo" ;
    VI Part => mo_ + "ído" ;
    VPB (Pres Ind Sg P1) => mo_ + "o" ;
    VPB (Pres Ind Sg P2) => mo_ + "is" ;
    VPB (Pres Ind Sg P3) => mo_ + "i" ;
    VPB (Pres Ind Pl P1) => mo_ + "emos" ;
    VPB (Pres Ind Pl P2) => mo_ + "eis" ;
    VPB (Pres Ind Pl P3) => mo_ + "em" ;
    VPB (Pres Sub Sg P1) => mo_ + "a" ;
    VPB (Pres Sub Sg P2) => mo_ + "as" ;
    VPB (Pres Sub Sg P3) => mo_ + "a" ;
    VPB (Pres Sub Pl P1) => mo_ + "amos" ;
    VPB (Pres Sub Pl P2) => mo_ + "ais" ;
    VPB (Pres Sub Pl P3) => mo_ + "am" ;
    VPB (PretI Ind Sg P1) => mo_ + "ía" ; --# notpresent
    VPB (PretI Ind Sg P2) => mo_ + "ías" ; --# notpresent
    VPB (PretI Ind Sg P3) => mo_ + "ía" ; --# notpresent
    VPB (PretI Ind Pl P1) => mo_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => mo_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => mo_ + "íam" ; --# notpresent
    VPB (PretI Sub Sg P1) => mo_ + "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => mo_ + "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => mo_ + "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => mo_ + "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => mo_ + "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => mo_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => mo_ + "era" ; --# notpresent
    VPB (MQPerf Sg P2) => mo_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => mo_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => mo_ + "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => mo_ + "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => mo_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => mo_ + "í" ; --# notpresent
    VPB (PretP Sg P2) => mo_ + "este" ; --# notpresent
    VPB (PretP Sg P3) => mo_ + "eu" ; --# notpresent
    VPB (PretP Pl P1) => mo_ + "emos" ; --# notpresent
    VPB (PretP Pl P2) => mo_ + "estes" ; --# notpresent
    VPB (PretP Pl P3) => mo_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => mo_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => mo_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => mo_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => mo_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => mo_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => mo_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => mo_ + "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => mo_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => mo_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => mo_ + "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => mo_ + "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => mo_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => mo_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => mo_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => mo_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => mo_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => mo_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => mo_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => mo_ + "i" ;
    VPB (Imper Sg P3) => mo_ + "a" ;
    VPB (Imper Pl P1) => mo_ + "amos" ;
    VPB (Imper Pl P2) => mo_ + "ei" ;
    VPB (Imper Pl P3) => mo_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper dizer_29 : Str -> Verbum = \dizer ->
  let di_ = Predef.tk 3 dizer in
 {s = table {
    VI Infn => di_ + "zer" ;
    VI Ger => di_ + "zendo" ;
    VI Part => di_ + "to" ;
    VPB (Pres Ind Sg P1) => di_ + "go" ;
    VPB (Pres Ind Sg P2) => di_ + "zes" ;
    VPB (Pres Ind Sg P3) => di_ + "z" ;
    VPB (Pres Ind Pl P1) => di_ + "zemos" ;
    VPB (Pres Ind Pl P2) => di_ + "zeis" ;
    VPB (Pres Ind Pl P3) => di_ + "zem" ;
    VPB (Pres Sub Sg P1) => di_ + "ga" ;
    VPB (Pres Sub Sg P2) => di_ + "gas" ;
    VPB (Pres Sub Sg P3) => di_ + "ga" ;
    VPB (Pres Sub Pl P1) => di_ + "gamos" ;
    VPB (Pres Sub Pl P2) => di_ + "gais" ;
    VPB (Pres Sub Pl P3) => di_ + "gam" ;
    VPB (PretI Ind Sg P1) => di_ + "zia" ; --# notpresent
    VPB (PretI Ind Sg P2) => di_ + "zias" ; --# notpresent
    VPB (PretI Ind Sg P3) => di_ + "zia" ; --# notpresent
    VPB (PretI Ind Pl P1) => di_ + "zíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => di_ + "zíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => di_ + "ziam" ; --# notpresent
    VPB (PretI Sub Sg P1) => di_ + "ssesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => di_ + "ssesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => di_ + "ssesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => di_ + "sséssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => di_ + "ssésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => di_ + "ssessem" ; --# notpresent
    VPB (MQPerf Sg P1) => di_ + "ssera" ; --# notpresent
    VPB (MQPerf Sg P2) => di_ + "sseras" ; --# notpresent
    VPB (MQPerf Sg P3) => di_ + "ssera" ; --# notpresent
    VPB (MQPerf Pl P1) => di_ + "sséramos" ; --# notpresent
    VPB (MQPerf Pl P2) => di_ + "sséreis" ; --# notpresent
    VPB (MQPerf Pl P3) => di_ + "sseram" ; --# notpresent
    VPB (PretP Sg P1) => di_ + "sse" ; --# notpresent
    VPB (PretP Sg P2) => di_ + "sseste" ; --# notpresent
    VPB (PretP Sg P3) => di_ + "sse" ; --# notpresent
    VPB (PretP Pl P1) => di_ + "ssemos" ; --# notpresent
    VPB (PretP Pl P2) => di_ + "ssestes" ; --# notpresent
    VPB (PretP Pl P3) => di_ + "sseram" ; --# notpresent
    VPB (Fut Ind Sg P1) => di_ + "rei" ; --# notpresent
    VPB (Fut Ind Sg P2) => di_ + "rás" ; --# notpresent
    VPB (Fut Ind Sg P3) => di_ + "rá" ; --# notpresent
    VPB (Fut Ind Pl P1) => di_ + "remos" ; --# notpresent
    VPB (Fut Ind Pl P2) => di_ + "reis" ; --# notpresent
    VPB (Fut Ind Pl P3) => di_ + "rão" ; --# notpresent
    VPB (Fut Sub Sg P1) => di_ + "sser" ; --# notpresent
    VPB (Fut Sub Sg P2) => di_ + "sseres" ; --# notpresent
    VPB (Fut Sub Sg P3) => di_ + "sser" ; --# notpresent
    VPB (Fut Sub Pl P1) => di_ + "ssermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => di_ + "sserdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => di_ + "sserem" ; --# notpresent
    VPB (Cond Sg P1) => di_ + "ria" ; --# notpresent
    VPB (Cond Sg P2) => di_ + "rias" ; --# notpresent
    VPB (Cond Sg P3) => di_ + "ria" ; --# notpresent
    VPB (Cond Pl P1) => di_ + "ríamos" ; --# notpresent
    VPB (Cond Pl P2) => di_ + "ríeis" ; --# notpresent
    VPB (Cond Pl P3) => di_ + "riam" ; --# notpresent
    VPB (Imper Sg P2) => di_ + vars "z"  "ze" ;
    VPB (Imper Sg P3) => di_ + "ga" ;
    VPB (Imper Pl P1) => di_ + "gamos" ;
    VPB (Imper Pl P2) => di_ + "zei" ;
    VPB (Imper Pl P3) => di_ + "gam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper trazer_30 : Str -> Verbum = \trazer ->
  let tr_ = Predef.tk 4 trazer in
 {s = table {
    VI Infn => tr_ + "azer" ;
    VI Ger => tr_ + "azendo" ;
    VI Part => tr_ + "azido" ;
    VPB (Pres Ind Sg P1) => tr_ + "ago" ;
    VPB (Pres Ind Sg P2) => tr_ + "azes" ;
    VPB (Pres Ind Sg P3) => tr_ + "az" ;
    VPB (Pres Ind Pl P1) => tr_ + "azemos" ;
    VPB (Pres Ind Pl P2) => tr_ + "azeis" ;
    VPB (Pres Ind Pl P3) => tr_ + "azem" ;
    VPB (Pres Sub Sg P1) => tr_ + "aga" ;
    VPB (Pres Sub Sg P2) => tr_ + "agas" ;
    VPB (Pres Sub Sg P3) => tr_ + "aga" ;
    VPB (Pres Sub Pl P1) => tr_ + "agamos" ;
    VPB (Pres Sub Pl P2) => tr_ + "agais" ;
    VPB (Pres Sub Pl P3) => tr_ + "agam" ;
    VPB (PretI Ind Sg P1) => tr_ + "azia" ; --# notpresent
    VPB (PretI Ind Sg P2) => tr_ + "azias" ; --# notpresent
    VPB (PretI Ind Sg P3) => tr_ + "azia" ; --# notpresent
    VPB (PretI Ind Pl P1) => tr_ + "azíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => tr_ + "azíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => tr_ + "aziam" ; --# notpresent
    VPB (PretI Sub Sg P1) => tr_ + "ouxesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => tr_ + "ouxesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => tr_ + "ouxesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => tr_ + "ouxéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => tr_ + "ouxésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => tr_ + "ouxessem" ; --# notpresent
    VPB (MQPerf Sg P1) => tr_ + "ouxera" ; --# notpresent
    VPB (MQPerf Sg P2) => tr_ + "ouxeras" ; --# notpresent
    VPB (MQPerf Sg P3) => tr_ + "ouxera" ; --# notpresent
    VPB (MQPerf Pl P1) => tr_ + "ouxéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => tr_ + "ouxéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => tr_ + "ouxeram" ; --# notpresent
    VPB (PretP Sg P1) => tr_ + "ouxe" ; --# notpresent
    VPB (PretP Sg P2) => tr_ + "ouxeste" ; --# notpresent
    VPB (PretP Sg P3) => tr_ + "ouxe" ; --# notpresent
    VPB (PretP Pl P1) => tr_ + "ouxemos" ; --# notpresent
    VPB (PretP Pl P2) => tr_ + "ouxestes" ; --# notpresent
    VPB (PretP Pl P3) => tr_ + "ouxeram" ; --# notpresent
    VPB (Fut Ind Sg P1) => tr_ + "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => tr_ + "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => tr_ + "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => tr_ + "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => tr_ + "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => tr_ + "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => tr_ + "ouxer" ; --# notpresent
    VPB (Fut Sub Sg P2) => tr_ + "ouxeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => tr_ + "ouxer" ; --# notpresent
    VPB (Fut Sub Pl P1) => tr_ + "ouxermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => tr_ + "ouxerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => tr_ + "ouxerem" ; --# notpresent
    VPB (Cond Sg P1) => tr_ + "aria" ; --# notpresent
    VPB (Cond Sg P2) => tr_ + "arias" ; --# notpresent
    VPB (Cond Sg P3) => tr_ + "aria" ; --# notpresent
    VPB (Cond Pl P1) => tr_ + "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => tr_ + "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => tr_ + "ariam" ; --# notpresent
    VPB (Imper Sg P2) => tr_ + vars "az"  "aze" ;
    VPB (Imper Sg P3) => tr_ + "aga" ;
    VPB (Imper Pl P1) => tr_ + "agamos" ;
    VPB (Imper Pl P2) => tr_ + "azei" ;
    VPB (Imper Pl P3) => tr_ + "agam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper fazer_31 : Str -> Verbum = \fazer ->
  let fa_ = Predef.tk 3 fazer in
 {s = table {
    VI Infn => fa_ + "zer" ;
    VI Ger => fa_ + "zendo" ;
    VI Part => fa_ + "ito" ;
    VPB (Pres Ind Sg P1) => fa_ + "ço" ;
    VPB (Pres Ind Sg P2) => fa_ + "zes" ;
    VPB (Pres Ind Sg P3) => fa_ + "z" ;
    VPB (Pres Ind Pl P1) => fa_ + "zemos" ;
    VPB (Pres Ind Pl P2) => fa_ + "zeis" ;
    VPB (Pres Ind Pl P3) => fa_ + "zem" ;
    VPB (Pres Sub Sg P1) => fa_ + "ça" ;
    VPB (Pres Sub Sg P2) => fa_ + "ças" ;
    VPB (Pres Sub Sg P3) => fa_ + "ça" ;
    VPB (Pres Sub Pl P1) => fa_ + "çamos" ;
    VPB (Pres Sub Pl P2) => fa_ + "çais" ;
    VPB (Pres Sub Pl P3) => fa_ + "çam" ;
    VPB (PretI Ind Sg P1) => fa_ + "zia" ; --# notpresent
    VPB (PretI Ind Sg P2) => fa_ + "zias" ; --# notpresent
    VPB (PretI Ind Sg P3) => fa_ + "zia" ; --# notpresent
    VPB (PretI Ind Pl P1) => fa_ + "zíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => fa_ + "zíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => fa_ + "ziam" ; --# notpresent
    VPB (PretI Sub Sg P1) => fa_ + "zesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => fa_ + "zesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => fa_ + "zesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => fa_ + "zéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => fa_ + "zésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => fa_ + "zessem" ; --# notpresent
    VPB (MQPerf Sg P1) => fa_ + "zera" ; --# notpresent
    VPB (MQPerf Sg P2) => fa_ + "zeras" ; --# notpresent
    VPB (MQPerf Sg P3) => fa_ + "zera" ; --# notpresent
    VPB (MQPerf Pl P1) => fa_ + "zéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => fa_ + "zéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => fa_ + "zeram" ; --# notpresent
    VPB (PretP Sg P1) => fa_ + "z" ; --# notpresent
    VPB (PretP Sg P2) => fa_ + "zeste" ; --# notpresent
    VPB (PretP Sg P3) => fa_ + "z" ; --# notpresent
    VPB (PretP Pl P1) => fa_ + "zemos" ; --# notpresent
    VPB (PretP Pl P2) => fa_ + "zestes" ; --# notpresent
    VPB (PretP Pl P3) => fa_ + "zeram" ; --# notpresent
    VPB (Fut Ind Sg P1) => fa_ + "rei" ; --# notpresent
    VPB (Fut Ind Sg P2) => fa_ + "rás" ; --# notpresent
    VPB (Fut Ind Sg P3) => fa_ + "rá" ; --# notpresent
    VPB (Fut Ind Pl P1) => fa_ + "remos" ; --# notpresent
    VPB (Fut Ind Pl P2) => fa_ + "reis" ; --# notpresent
    VPB (Fut Ind Pl P3) => fa_ + "rão" ; --# notpresent
    VPB (Fut Sub Sg P1) => fa_ + "zer" ; --# notpresent
    VPB (Fut Sub Sg P2) => fa_ + "zeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => fa_ + "zer" ; --# notpresent
    VPB (Fut Sub Pl P1) => fa_ + "zermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => fa_ + "zerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => fa_ + "zerem" ; --# notpresent
    VPB (Cond Sg P1) => fa_ + "ria" ; --# notpresent
    VPB (Cond Sg P2) => fa_ + "rias" ; --# notpresent
    VPB (Cond Sg P3) => fa_ + "ria" ; --# notpresent
    VPB (Cond Pl P1) => fa_ + "ríamos" ; --# notpresent
    VPB (Cond Pl P2) => fa_ + "ríeis" ; --# notpresent
    VPB (Cond Pl P3) => fa_ + "riam" ; --# notpresent
    VPB (Imper Sg P2) => fa_ + vars "z"  "ze" ;
    VPB (Imper Sg P3) => fa_ + "ça" ;
    VPB (Imper Pl P1) => fa_ + "çamos" ;
    VPB (Imper Pl P2) => fa_ + "zei" ;
    VPB (Imper Pl P3) => fa_ + "çam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper aprazer_32 : Str -> Verbum = \aprazer ->
  let apraz_ = Predef.tk 2 aprazer in
 {s = table {
    VI Infn => apraz_ + "er" ;
    VI Ger => apraz_ + "endo" ;
    VI Part => apraz_ + "ido" ;
    VPB (Pres Ind Sg P1) => apraz_ + "o" ;
    VPB (Pres Ind Sg P2) => apraz_ + "es" ;
    VPB (Pres Ind Sg P3) => apraz_ + "" ;
    VPB (Pres Ind Pl P1) => apraz_ + "emos" ;
    VPB (Pres Ind Pl P2) => apraz_ + "eis" ;
    VPB (Pres Ind Pl P3) => apraz_ + "em" ;
    VPB (Pres Sub Sg P1) => apraz_ + "a" ;
    VPB (Pres Sub Sg P2) => apraz_ + "as" ;
    VPB (Pres Sub Sg P3) => apraz_ + "a" ;
    VPB (Pres Sub Pl P1) => apraz_ + "armos" ;
    VPB (Pres Sub Pl P2) => apraz_ + "ais" ;
    VPB (Pres Sub Pl P3) => apraz_ + "am" ;
    VPB (PretI Ind Sg P1) => apraz_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => apraz_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => apraz_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => apraz_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => apraz_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => apraz_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => apraz_ + "vesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => apraz_ + "vesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => apraz_ + "vesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => apraz_ + "véssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => apraz_ + "vésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => apraz_ + "vessem" ; --# notpresent
    VPB (MQPerf Sg P1) => apraz_ + "vera" ; --# notpresent
    VPB (MQPerf Sg P2) => apraz_ + "veras" ; --# notpresent
    VPB (MQPerf Sg P3) => apraz_ + "vera" ; --# notpresent
    VPB (MQPerf Pl P1) => apraz_ + "véramos" ; --# notpresent
    VPB (MQPerf Pl P2) => apraz_ + "véreis" ; --# notpresent
    VPB (MQPerf Pl P3) => apraz_ + "veram" ; --# notpresent
    VPB (PretP Sg P1) => apraz_ + "ve" ; --# notpresent
    VPB (PretP Sg P2) => apraz_ + "veste" ; --# notpresent
    VPB (PretP Sg P3) => apraz_ + "ve" ; --# notpresent
    VPB (PretP Pl P1) => apraz_ + "vemos" ; --# notpresent
    VPB (PretP Pl P2) => apraz_ + "véreis" ; --# notpresent
    VPB (PretP Pl P3) => apraz_ + "veram" ; --# notpresent
    VPB (Fut Ind Sg P1) => apraz_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => apraz_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => apraz_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => apraz_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => apraz_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => apraz_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => apraz_ + "ver" ; --# notpresent
    VPB (Fut Sub Sg P2) => apraz_ + "veres" ; --# notpresent
    VPB (Fut Sub Sg P3) => apraz_ + "ver" ; --# notpresent
    VPB (Fut Sub Pl P1) => apraz_ + "vermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => apraz_ + "verdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => apraz_ + "verem" ; --# notpresent
    VPB (Cond Sg P1) => apraz_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => apraz_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => apraz_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => apraz_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => apraz_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => apraz_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => apraz_ + vars ""  "e" ;
    VPB (Imper Sg P3) => apraz_ + "a" ;
    VPB (Imper Pl P1) => apraz_ + "amos" ;
    VPB (Imper Pl P2) => apraz_ + "ei" ;
    VPB (Imper Pl P3) => apraz_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper jazer_33 : Str -> Verbum = \jazer ->
  let jaz_ = Predef.tk 2 jazer in
 {s = table {
    VI Infn => jaz_ + "er" ;
    VI Ger => jaz_ + "endo" ;
    VI Part => jaz_ + "ido" ;
    VPB (Pres Ind Sg P1) => jaz_ + "o" ;
    VPB (Pres Ind Sg P2) => jaz_ + "es" ;
    VPB (Pres Ind Sg P3) => jaz_ + "" ;
    VPB (Pres Ind Pl P1) => jaz_ + "emos" ;
    VPB (Pres Ind Pl P2) => jaz_ + "eis" ;
    VPB (Pres Ind Pl P3) => jaz_ + "em" ;
    VPB (Pres Sub Sg P1) => jaz_ + "a" ;
    VPB (Pres Sub Sg P2) => jaz_ + "as" ;
    VPB (Pres Sub Sg P3) => jaz_ + "a" ;
    VPB (Pres Sub Pl P1) => jaz_ + "amos" ;
    VPB (Pres Sub Pl P2) => jaz_ + "ais" ;
    VPB (Pres Sub Pl P3) => jaz_ + "am" ;
    VPB (PretI Ind Sg P1) => jaz_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => jaz_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => jaz_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => jaz_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => jaz_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => jaz_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => jaz_ + "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => jaz_ + "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => jaz_ + "esses" ; --# notpresent
    VPB (PretI Sub Pl P1) => jaz_ + "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => jaz_ + "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => jaz_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => jaz_ + "era" ; --# notpresent
    VPB (MQPerf Sg P2) => jaz_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => jaz_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => jaz_ + "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => jaz_ + "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => jaz_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => jaz_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => jaz_ + "este" ; --# notpresent
    VPB (PretP Sg P3) => jaz_ + "eu" ; --# notpresent
    VPB (PretP Pl P1) => jaz_ + "emos" ; --# notpresent
    VPB (PretP Pl P2) => jaz_ + "estes" ; --# notpresent
    VPB (PretP Pl P3) => jaz_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => jaz_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => jaz_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => jaz_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => jaz_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => jaz_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => jaz_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => jaz_ + "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => jaz_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => jaz_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => jaz_ + "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => jaz_ + "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => jaz_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => jaz_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => jaz_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => jaz_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => jaz_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => jaz_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => jaz_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => jaz_ + vars ""  "e" ;
    VPB (Imper Sg P3) => jaz_ + "a" ;
    VPB (Imper Pl P1) => jaz_ + "amos" ;
    VPB (Imper Pl P2) => jaz_ + "ei" ;
    VPB (Imper Pl P3) => jaz_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper caber_34 : Str -> Verbum = \caber ->
  let ca_ = Predef.tk 3 caber in
 {s = table {
    VI Infn => ca_ + "ber" ;
    VI Ger => ca_ + "bendo" ;
    VI Part => ca_ + "bido" ;
    VPB (Pres Ind Sg P1) => ca_ + "ibo" ;
    VPB (Pres Ind Sg P2) => ca_ + "bes" ;
    VPB (Pres Ind Sg P3) => ca_ + "be" ;
    VPB (Pres Ind Pl P1) => ca_ + "bemos" ;
    VPB (Pres Ind Pl P2) => ca_ + "beis" ;
    VPB (Pres Ind Pl P3) => ca_ + "bem" ;
    VPB (Pres Sub Sg P1) => ca_ + "iba" ;
    VPB (Pres Sub Sg P2) => ca_ + "ibas" ;
    VPB (Pres Sub Sg P3) => ca_ + "iba" ;
    VPB (Pres Sub Pl P1) => ca_ + "ibamos" ;
    VPB (Pres Sub Pl P2) => ca_ + "ibais" ;
    VPB (Pres Sub Pl P3) => ca_ + "ibam" ;
    VPB (PretI Ind Sg P1) => ca_ + "bia" ; --# notpresent
    VPB (PretI Ind Sg P2) => ca_ + "bias" ; --# notpresent
    VPB (PretI Ind Sg P3) => ca_ + "bia" ; --# notpresent
    VPB (PretI Ind Pl P1) => ca_ + "bíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => ca_ + "bíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => ca_ + "biam" ; --# notpresent
    VPB (PretI Sub Sg P1) => ca_ + "ubesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => ca_ + "ubesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => ca_ + "ubesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => ca_ + "ubéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => ca_ + "ubésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => ca_ + "ubessem" ; --# notpresent
    VPB (MQPerf Sg P1) => ca_ + "ubera" ; --# notpresent
    VPB (MQPerf Sg P2) => ca_ + "uberas" ; --# notpresent
    VPB (MQPerf Sg P3) => ca_ + "ubera" ; --# notpresent
    VPB (MQPerf Pl P1) => ca_ + "ubéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => ca_ + "ubéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => ca_ + "uberam" ; --# notpresent
    VPB (PretP Sg P1) => ca_ + "ube" ; --# notpresent
    VPB (PretP Sg P2) => ca_ + "ubeste" ; --# notpresent
    VPB (PretP Sg P3) => ca_ + "ube" ; --# notpresent
    VPB (PretP Pl P1) => ca_ + "ubemos" ; --# notpresent
    VPB (PretP Pl P2) => ca_ + "ubestes" ; --# notpresent
    VPB (PretP Pl P3) => ca_ + "uberam" ; --# notpresent
    VPB (Fut Ind Sg P1) => ca_ + "berei" ; --# notpresent
    VPB (Fut Ind Sg P2) => ca_ + "berás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ca_ + "berá" ; --# notpresent
    VPB (Fut Ind Pl P1) => ca_ + "beremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ca_ + "bereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ca_ + "berão" ; --# notpresent
    VPB (Fut Sub Sg P1) => ca_ + "uber" ; --# notpresent
    VPB (Fut Sub Sg P2) => ca_ + "uberes" ; --# notpresent
    VPB (Fut Sub Sg P3) => ca_ + "uber" ; --# notpresent
    VPB (Fut Sub Pl P1) => ca_ + "ubermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ca_ + "uberdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => ca_ + "uberem" ; --# notpresent
    VPB (Cond Sg P1) => ca_ + "beria" ; --# notpresent
    VPB (Cond Sg P2) => ca_ + "berias" ; --# notpresent
    VPB (Cond Sg P3) => ca_ + "beria" ; --# notpresent
    VPB (Cond Pl P1) => ca_ + "beríamos" ; --# notpresent
    VPB (Cond Pl P2) => ca_ + "beríeis" ; --# notpresent
    VPB (Cond Pl P3) => ca_ + "beriam" ; --# notpresent
    VPB (Imper Sg P2) => ca_ + nonExist ;
    VPB (Imper Sg P3) => ca_ + nonExist ;
    VPB (Imper Pl P1) => ca_ + nonExist ;
    VPB (Imper Pl P2) => ca_ + nonExist ;
    VPB (Imper Pl P3) => ca_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper saber_35 : Str -> Verbum = \saber ->
  let s_ = Predef.tk 4 saber in
 {s = table {
    VI Infn => s_ + "aber" ;
    VI Ger => s_ + "abendo" ;
    VI Part => s_ + "abido" ;
    VPB (Pres Ind Sg P1) => s_ + "ei" ;
    VPB (Pres Ind Sg P2) => s_ + "abes" ;
    VPB (Pres Ind Sg P3) => s_ + "abe" ;
    VPB (Pres Ind Pl P1) => s_ + "abemos" ;
    VPB (Pres Ind Pl P2) => s_ + "abeis" ;
    VPB (Pres Ind Pl P3) => s_ + "abem" ;
    VPB (Pres Sub Sg P1) => s_ + "aiba" ;
    VPB (Pres Sub Sg P2) => s_ + "aibas" ;
    VPB (Pres Sub Sg P3) => s_ + "aiba" ;
    VPB (Pres Sub Pl P1) => s_ + "aibamos" ;
    VPB (Pres Sub Pl P2) => s_ + "aibais" ;
    VPB (Pres Sub Pl P3) => s_ + "aibam" ;
    VPB (PretI Ind Sg P1) => s_ + "abia" ; --# notpresent
    VPB (PretI Ind Sg P2) => s_ + "abias" ; --# notpresent
    VPB (PretI Ind Sg P3) => s_ + "abia" ; --# notpresent
    VPB (PretI Ind Pl P1) => s_ + "abíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => s_ + "abíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => s_ + "abiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => s_ + "oubesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => s_ + "oubesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => s_ + "oubesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => s_ + "oubéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => s_ + "oubésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => s_ + "oubessem" ; --# notpresent
    VPB (MQPerf Sg P1) => s_ + "oubera" ; --# notpresent
    VPB (MQPerf Sg P2) => s_ + "ouberas" ; --# notpresent
    VPB (MQPerf Sg P3) => s_ + "oubera" ; --# notpresent
    VPB (MQPerf Pl P1) => s_ + "oubéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => s_ + "oubéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => s_ + "ouberam" ; --# notpresent
    VPB (PretP Sg P1) => s_ + "oube" ; --# notpresent
    VPB (PretP Sg P2) => s_ + "oubeste" ; --# notpresent
    VPB (PretP Sg P3) => s_ + "oube" ; --# notpresent
    VPB (PretP Pl P1) => s_ + "oubemos" ; --# notpresent
    VPB (PretP Pl P2) => s_ + "oubestes" ; --# notpresent
    VPB (PretP Pl P3) => s_ + "ouberam" ; --# notpresent
    VPB (Fut Ind Sg P1) => s_ + "aberei" ; --# notpresent
    VPB (Fut Ind Sg P2) => s_ + "aberás" ; --# notpresent
    VPB (Fut Ind Sg P3) => s_ + "aberá" ; --# notpresent
    VPB (Fut Ind Pl P1) => s_ + "aberemos" ; --# notpresent
    VPB (Fut Ind Pl P2) => s_ + "abereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => s_ + "aberão" ; --# notpresent
    VPB (Fut Sub Sg P1) => s_ + "ouber" ; --# notpresent
    VPB (Fut Sub Sg P2) => s_ + "ouberes" ; --# notpresent
    VPB (Fut Sub Sg P3) => s_ + "ouber" ; --# notpresent
    VPB (Fut Sub Pl P1) => s_ + "oubermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => s_ + "ouberdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => s_ + "ouberem" ; --# notpresent
    VPB (Cond Sg P1) => s_ + "aberia" ; --# notpresent
    VPB (Cond Sg P2) => s_ + "aberias" ; --# notpresent
    VPB (Cond Sg P3) => s_ + "aberia" ; --# notpresent
    VPB (Cond Pl P1) => s_ + "aberiamos" ; --# notpresent
    VPB (Cond Pl P2) => s_ + "aberieis" ; --# notpresent
    VPB (Cond Pl P3) => s_ + "aberiam" ; --# notpresent
    VPB (Imper Sg P2) => s_ + "abe" ;
    VPB (Imper Sg P3) => s_ + "aiba" ;
    VPB (Imper Pl P1) => s_ + "aibamos" ;
    VPB (Imper Pl P2) => s_ + "abei" ;
    VPB (Imper Pl P3) => s_ + "aibam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper poder_36 : Str -> Verbum = \poder ->
  let po_ = Predef.tk 3 poder in
 {s = table {
    VI Infn => po_ + "der" ;
    VI Ger => po_ + "dendo" ;
    VI Part => po_ + "dido" ;
    VPB (Pres Ind Sg P1) => po_ + "sso" ;
    VPB (Pres Ind Sg P2) => po_ + "des" ;
    VPB (Pres Ind Sg P3) => po_ + "de" ;
    VPB (Pres Ind Pl P1) => po_ + "demos" ;
    VPB (Pres Ind Pl P2) => po_ + "deis" ;
    VPB (Pres Ind Pl P3) => po_ + "dem" ;
    VPB (Pres Sub Sg P1) => po_ + "ssa" ;
    VPB (Pres Sub Sg P2) => po_ + "ssas" ;
    VPB (Pres Sub Sg P3) => po_ + "ssa" ;
    VPB (Pres Sub Pl P1) => po_ + "ssamos" ;
    VPB (Pres Sub Pl P2) => po_ + "ssais" ;
    VPB (Pres Sub Pl P3) => po_ + "ssam" ;
    VPB (PretI Ind Sg P1) => po_ + "dia" ; --# notpresent
    VPB (PretI Ind Sg P2) => po_ + "dias" ; --# notpresent
    VPB (PretI Ind Sg P3) => po_ + "dia" ; --# notpresent
    VPB (PretI Ind Pl P1) => po_ + "diamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => po_ + "dieis" ; --# notpresent
    VPB (PretI Ind Pl P3) => po_ + "diam" ; --# notpresent
    VPB (PretI Sub Sg P1) => po_ + "desse" ; --# notpresent
    VPB (PretI Sub Sg P2) => po_ + "desses" ; --# notpresent
    VPB (PretI Sub Sg P3) => po_ + "desse" ; --# notpresent
    VPB (PretI Sub Pl P1) => po_ + "déssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => po_ + "désseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => po_ + "dessem" ; --# notpresent
    VPB (MQPerf Sg P1) => po_ + "dera" ; --# notpresent
    VPB (MQPerf Sg P2) => po_ + "deras" ; --# notpresent
    VPB (MQPerf Sg P3) => po_ + "dera" ; --# notpresent
    VPB (MQPerf Pl P1) => po_ + "déramos" ; --# notpresent
    VPB (MQPerf Pl P2) => po_ + "déreis" ; --# notpresent
    VPB (MQPerf Pl P3) => po_ + "deram" ; --# notpresent
    VPB (PretP Sg P1) => po_ + "de" ; --# notpresent
    VPB (PretP Sg P2) => po_ + "deste" ; --# notpresent
    VPB (PretP Sg P3) => po_ + "de" ; --# notpresent
    VPB (PretP Pl P1) => po_ + "demos" ; --# notpresent
    VPB (PretP Pl P2) => po_ + "destes" ; --# notpresent
    VPB (PretP Pl P3) => po_ + "deram" ; --# notpresent
    VPB (Fut Ind Sg P1) => po_ + "derei" ; --# notpresent
    VPB (Fut Ind Sg P2) => po_ + "derás" ; --# notpresent
    VPB (Fut Ind Sg P3) => po_ + "derá" ; --# notpresent
    VPB (Fut Ind Pl P1) => po_ + "deremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => po_ + "dereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => po_ + "derão" ; --# notpresent
    VPB (Fut Sub Sg P1) => po_ + "der" ; --# notpresent
    VPB (Fut Sub Sg P2) => po_ + "deres" ; --# notpresent
    VPB (Fut Sub Sg P3) => po_ + "der" ; --# notpresent
    VPB (Fut Sub Pl P1) => po_ + "dermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => po_ + "derdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => po_ + "derem" ; --# notpresent
    VPB (Cond Sg P1) => po_ + "deria" ; --# notpresent
    VPB (Cond Sg P2) => po_ + "derias" ; --# notpresent
    VPB (Cond Sg P3) => po_ + "deria" ; --# notpresent
    VPB (Cond Pl P1) => po_ + "deríamos" ; --# notpresent
    VPB (Cond Pl P2) => po_ + "deríeis" ; --# notpresent
    VPB (Cond Pl P3) => po_ + "deriam" ; --# notpresent
    VPB (Imper Sg P2) => po_ + nonExist ;
    VPB (Imper Sg P3) => po_ + nonExist ;
    VPB (Imper Pl P1) => po_ + nonExist ;
    VPB (Imper Pl P2) => po_ + nonExist ;
    VPB (Imper Pl P3) => po_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper crer_37 : Str -> Verbum = \crer ->
  let cr_ = Predef.tk 2 crer in
 {s = table {
    VI Infn => cr_ + "er" ;
    VI Ger => cr_ + "endo" ;
    VI Part => cr_ + "ido" ;
    VPB (Pres Ind Sg P1) => cr_ + "eio" ;
    VPB (Pres Ind Sg P2) => cr_ + "ês" ;
    VPB (Pres Ind Sg P3) => cr_ + "ê" ;
    VPB (Pres Ind Pl P1) => cr_ + "emos" ;
    VPB (Pres Ind Pl P2) => cr_ + "edes" ;
    VPB (Pres Ind Pl P3) => cr_ + vars "eem"  "êem" ;
    VPB (Pres Sub Sg P1) => cr_ + "eia" ;
    VPB (Pres Sub Sg P2) => cr_ + "eais" ;
    VPB (Pres Sub Sg P3) => cr_ + "eia" ;
    VPB (Pres Sub Pl P1) => cr_ + "eiamos" ;
    VPB (Pres Sub Pl P2) => cr_ + "eiais" ;
    VPB (Pres Sub Pl P3) => cr_ + "eiam" ;
    VPB (PretI Ind Sg P1) => cr_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => cr_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => cr_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => cr_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => cr_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => cr_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => cr_ + "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => cr_ + "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => cr_ + "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => cr_ + "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => cr_ + "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => cr_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => cr_ + "era" ; --# notpresent
    VPB (MQPerf Sg P2) => cr_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => cr_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => cr_ + "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => cr_ + "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => cr_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => cr_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => cr_ + "este" ; --# notpresent
    VPB (PretP Sg P3) => cr_ + "eu" ; --# notpresent
    VPB (PretP Pl P1) => cr_ + "emos" ; --# notpresent
    VPB (PretP Pl P2) => cr_ + "estes" ; --# notpresent
    VPB (PretP Pl P3) => cr_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => cr_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => cr_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => cr_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => cr_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => cr_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => cr_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => cr_ + "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => cr_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => cr_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => cr_ + "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => cr_ + "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => cr_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => cr_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => cr_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => cr_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => cr_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => cr_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => cr_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => cr_ + "ê" ;
    VPB (Imper Sg P3) => cr_ + "eia" ;
    VPB (Imper Pl P1) => cr_ + "eiamos" ;
    VPB (Imper Pl P2) => cr_ + "ede" ;
    VPB (Imper Pl P3) => cr_ + "eiam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper querer_38 : Str -> Verbum = \querer ->
  let quer_ = Predef.tk 2 querer in
 {s = table {
    VI Infn => quer_ + "er" ;
    VI Ger => quer_ + "endo" ;
    VI Part => quer_ + "ido" ;
    VPB (Pres Ind Sg P1) => quer_ + "o" ;
    VPB (Pres Ind Sg P2) => quer_ + "es" ;
    VPB (Pres Ind Sg P3) => quer_ + "" ;
    VPB (Pres Ind Pl P1) => quer_ + "emos" ;
    VPB (Pres Ind Pl P2) => quer_ + "eis" ;
    VPB (Pres Ind Pl P3) => quer_ + "em" ;
    VPB (Pres Sub Sg P1) => quer_ + "ra" ;
    VPB (Pres Sub Sg P2) => quer_ + "ras" ;
    VPB (Pres Sub Sg P3) => quer_ + "ra" ;
    VPB (Pres Sub Pl P1) => quer_ + "ramos" ;
    VPB (Pres Sub Pl P2) => quer_ + "rais" ;
    VPB (Pres Sub Pl P3) => quer_ + "ram" ;
    VPB (PretI Ind Sg P1) => quer_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => quer_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => quer_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => quer_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => quer_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => quer_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => quer_ + "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => quer_ + "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => quer_ + "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => quer_ + "éssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => quer_ + "ésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => quer_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => quer_ + "era" ; --# notpresent
    VPB (MQPerf Sg P2) => quer_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => quer_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => quer_ + "éramos" ; --# notpresent
    VPB (MQPerf Pl P2) => quer_ + "éreis" ; --# notpresent
    VPB (MQPerf Pl P3) => quer_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => quer_ + "" ; --# notpresent
    VPB (PretP Sg P2) => quer_ + "este" ; --# notpresent
    VPB (PretP Sg P3) => quer_ + "" ; --# notpresent
    VPB (PretP Pl P1) => quer_ + "emos" ; --# notpresent
    VPB (PretP Pl P2) => quer_ + "estes" ; --# notpresent
    VPB (PretP Pl P3) => quer_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => quer_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => quer_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => quer_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => quer_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => quer_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => quer_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => quer_ + "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => quer_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => quer_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => quer_ + "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => quer_ + "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => quer_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => quer_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => quer_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => quer_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => quer_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => quer_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => quer_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => quer_ + "" ;
    VPB (Imper Sg P3) => quer_ + "ra" ;
    VPB (Imper Pl P1) => quer_ + "ramos" ;
    VPB (Imper Pl P2) => quer_ + "ei" ;
    VPB (Imper Pl P3) => quer_ + "ram" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper requerer_39 : Str -> Verbum = \requerer ->
  let reque_ = Predef.tk 3 requerer in
 {s = table {
    VI Infn => reque_ + "rer" ;
    VI Ger => reque_ + "rendo" ;
    VI Part => reque_ + "rido" ;
    VPB (Pres Ind Sg P1) => reque_ + "iro" ;
    VPB (Pres Ind Sg P2) => reque_ + "res" ;
    VPB (Pres Ind Sg P3) => reque_ + "r" ;
    VPB (Pres Ind Pl P1) => reque_ + "remos" ;
    VPB (Pres Ind Pl P2) => reque_ + "reis" ;
    VPB (Pres Ind Pl P3) => reque_ + "rem" ;
    VPB (Pres Sub Sg P1) => reque_ + "ira" ;
    VPB (Pres Sub Sg P2) => reque_ + "iras" ;
    VPB (Pres Sub Sg P3) => reque_ + "ira" ;
    VPB (Pres Sub Pl P1) => reque_ + "iramos" ;
    VPB (Pres Sub Pl P2) => reque_ + "irais" ;
    VPB (Pres Sub Pl P3) => reque_ + "iram" ;
    VPB (PretI Ind Sg P1) => reque_ + "ria" ; --# notpresent
    VPB (PretI Ind Sg P2) => reque_ + "rias" ; --# notpresent
    VPB (PretI Ind Sg P3) => reque_ + "ria" ; --# notpresent
    VPB (PretI Ind Pl P1) => reque_ + "ríamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => reque_ + "ríeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => reque_ + "riam" ; --# notpresent
    VPB (PretI Sub Sg P1) => reque_ + "resse" ; --# notpresent
    VPB (PretI Sub Sg P2) => reque_ + "resses" ; --# notpresent
    VPB (PretI Sub Sg P3) => reque_ + "resse" ; --# notpresent
    VPB (PretI Sub Pl P1) => reque_ + "rêssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => reque_ + "rêsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => reque_ + "ressem" ; --# notpresent
    VPB (MQPerf Sg P1) => reque_ + "rera" ; --# notpresent
    VPB (MQPerf Sg P2) => reque_ + "reras" ; --# notpresent
    VPB (MQPerf Sg P3) => reque_ + "rera" ; --# notpresent
    VPB (MQPerf Pl P1) => reque_ + "rêramos" ; --# notpresent
    VPB (MQPerf Pl P2) => reque_ + "rêreis" ; --# notpresent
    VPB (MQPerf Pl P3) => reque_ + "reram" ; --# notpresent
    VPB (PretP Sg P1) => reque_ + "ri" ; --# notpresent
    VPB (PretP Sg P2) => reque_ + "reste" ; --# notpresent
    VPB (PretP Sg P3) => reque_ + "reu" ; --# notpresent
    VPB (PretP Pl P1) => reque_ + "remos" ; --# notpresent
    VPB (PretP Pl P2) => reque_ + "restes" ; --# notpresent
    VPB (PretP Pl P3) => reque_ + "reram" ; --# notpresent
    VPB (Fut Ind Sg P1) => reque_ + "rerei" ; --# notpresent
    VPB (Fut Ind Sg P2) => reque_ + "rerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => reque_ + "rerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => reque_ + "reremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => reque_ + "rereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => reque_ + "rerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => reque_ + "rer" ; --# notpresent
    VPB (Fut Sub Sg P2) => reque_ + "reres" ; --# notpresent
    VPB (Fut Sub Sg P3) => reque_ + "rer" ; --# notpresent
    VPB (Fut Sub Pl P1) => reque_ + "rermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => reque_ + "rerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => reque_ + "rerem" ; --# notpresent
    VPB (Cond Sg P1) => reque_ + "reria" ; --# notpresent
    VPB (Cond Sg P2) => reque_ + "rerias" ; --# notpresent
    VPB (Cond Sg P3) => reque_ + "reria" ; --# notpresent
    VPB (Cond Pl P1) => reque_ + "reríamos" ; --# notpresent
    VPB (Cond Pl P2) => reque_ + "reríeis" ; --# notpresent
    VPB (Cond Pl P3) => reque_ + "reriam" ; --# notpresent
    VPB (Imper Sg P2) => reque_ + "r" ;
    VPB (Imper Sg P3) => reque_ + "ira" ;
    VPB (Imper Pl P1) => reque_ + "iramos" ;
    VPB (Imper Pl P2) => reque_ + "rei" ;
    VPB (Imper Pl P3) => reque_ + "iram" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ver_40 : Str -> Verbum = \ver ->
  let v_ = Predef.tk 2 ver in
 {s = table {
    VI Infn => v_ + "er" ;
    VI Ger => v_ + "endo" ;
    VI Part => v_ + "isto" ;
    VPB (Pres Ind Sg P1) => v_ + "ejo" ;
    VPB (Pres Ind Sg P2) => v_ + "ês" ;
    VPB (Pres Ind Sg P3) => v_ + "ê" ;
    VPB (Pres Ind Pl P1) => v_ + "emos" ;
    VPB (Pres Ind Pl P2) => v_ + "edes" ;
    VPB (Pres Ind Pl P3) => v_ + vars "eem"  "êem" ;
    VPB (Pres Sub Sg P1) => v_ + "eja" ;
    VPB (Pres Sub Sg P2) => v_ + "ejas" ;
    VPB (Pres Sub Sg P3) => v_ + "eja" ;
    VPB (Pres Sub Pl P1) => v_ + "ejamos" ;
    VPB (Pres Sub Pl P2) => v_ + "ejais" ;
    VPB (Pres Sub Pl P3) => v_ + "ejam" ;
    VPB (PretI Ind Sg P1) => v_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => v_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => v_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => v_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => v_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => v_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => v_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => v_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => v_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => v_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => v_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => v_ + "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => v_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => v_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => v_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => v_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => v_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => v_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => v_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => v_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => v_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => v_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => v_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => v_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => v_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => v_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => v_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => v_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => v_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => v_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => v_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => v_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => v_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => v_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => v_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => v_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => v_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => v_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => v_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => v_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => v_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => v_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => v_ + "ê" ;
    VPB (Imper Sg P3) => v_ + "eja" ;
    VPB (Imper Pl P1) => v_ + "ejamos" ;
    VPB (Imper Pl P2) => v_ + "ede" ;
    VPB (Imper Pl P3) => v_ + "ejam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper prover_41 : Str -> Verbum = \prover ->
  let prov_ = Predef.tk 2 prover in
 {s = table {
    VI Infn => prov_ + "er" ;
    VI Ger => prov_ + "endo" ;
    VI Part => prov_ + "ido" ;
    VPB (Pres Ind Sg P1) => prov_ + "ejo" ;
    VPB (Pres Ind Sg P2) => prov_ + "ês" ;
    VPB (Pres Ind Sg P3) => prov_ + "ê" ;
    VPB (Pres Ind Pl P1) => prov_ + "emos" ;
    VPB (Pres Ind Pl P2) => prov_ + "edes" ;
    VPB (Pres Ind Pl P3) => prov_ + vars "eem"  "êem" ;
    VPB (Pres Sub Sg P1) => prov_ + "eja" ;
    VPB (Pres Sub Sg P2) => prov_ + "ejas" ;
    VPB (Pres Sub Sg P3) => prov_ + "eja" ;
    VPB (Pres Sub Pl P1) => prov_ + "ejamos" ;
    VPB (Pres Sub Pl P2) => prov_ + "ejais" ;
    VPB (Pres Sub Pl P3) => prov_ + "ejam" ;
    VPB (PretI Ind Sg P1) => prov_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => prov_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => prov_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => prov_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => prov_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => prov_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => prov_ + "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => prov_ + "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => prov_ + "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => prov_ + "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => prov_ + "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => prov_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => prov_ + "era" ; --# notpresent
    VPB (MQPerf Sg P2) => prov_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => prov_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => prov_ + "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => prov_ + "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => prov_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => prov_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => prov_ + "este" ; --# notpresent
    VPB (PretP Sg P3) => prov_ + "eu" ; --# notpresent
    VPB (PretP Pl P1) => prov_ + "emos" ; --# notpresent
    VPB (PretP Pl P2) => prov_ + "estes" ; --# notpresent
    VPB (PretP Pl P3) => prov_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => prov_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => prov_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => prov_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => prov_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => prov_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => prov_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => prov_ + "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => prov_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => prov_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => prov_ + "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => prov_ + "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => prov_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => prov_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => prov_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => prov_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => prov_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => prov_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => prov_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => prov_ + "ê" ;
    VPB (Imper Sg P3) => prov_ + "eja" ;
    VPB (Imper Pl P1) => prov_ + "ejamos" ;
    VPB (Imper Pl P2) => prov_ + "ede" ;
    VPB (Imper Pl P3) => prov_ + "ejam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ler_42 : Str -> Verbum = \ler ->
  let l_ = Predef.tk 2 ler in
 {s = table {
    VI Infn => l_ + "er" ;
    VI Ger => l_ + "endo" ;
    VI Part => l_ + "ido" ;
    VPB (Pres Ind Sg P1) => l_ + "eio" ;
    VPB (Pres Ind Sg P2) => l_ + "ês" ;
    VPB (Pres Ind Sg P3) => l_ + "ê" ;
    VPB (Pres Ind Pl P1) => l_ + "emos" ;
    VPB (Pres Ind Pl P2) => l_ + "edes" ;
    VPB (Pres Ind Pl P3) => l_ + vars "eem"  "êem" ;
    VPB (Pres Sub Sg P1) => l_ + "eia" ;
    VPB (Pres Sub Sg P2) => l_ + "eias" ;
    VPB (Pres Sub Sg P3) => l_ + "eia" ;
    VPB (Pres Sub Pl P1) => l_ + "eiamos" ;
    VPB (Pres Sub Pl P2) => l_ + "eiais" ;
    VPB (Pres Sub Pl P3) => l_ + "eiam" ;
    VPB (PretI Ind Sg P1) => l_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => l_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => l_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => l_ + "iamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => l_ + "ieis" ; --# notpresent
    VPB (PretI Ind Pl P3) => l_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => l_ + "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => l_ + "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => l_ + "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => l_ + "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => l_ + "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => l_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => l_ + "era" ; --# notpresent
    VPB (MQPerf Sg P2) => l_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => l_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => l_ + "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => l_ + "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => l_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => l_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => l_ + "este" ; --# notpresent
    VPB (PretP Sg P3) => l_ + "eu" ; --# notpresent
    VPB (PretP Pl P1) => l_ + "emos" ; --# notpresent
    VPB (PretP Pl P2) => l_ + "estes" ; --# notpresent
    VPB (PretP Pl P3) => l_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => l_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => l_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => l_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => l_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => l_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => l_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => l_ + "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => l_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => l_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => l_ + "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => l_ + "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => l_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => l_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => l_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => l_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => l_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => l_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => l_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => l_ + "ê" ;
    VPB (Imper Sg P3) => l_ + "eia" ;
    VPB (Imper Pl P1) => l_ + "eiamos" ;
    VPB (Imper Pl P2) => l_ + "ede" ;
    VPB (Imper Pl P3) => l_ + "eiam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper valer_43 : Str -> Verbum = \valer ->
  let val_ = Predef.tk 2 valer in
 {s = table {
    VI Infn => val_ + "er" ;
    VI Ger => val_ + "endo" ;
    VI Part => val_ + "ido" ;
    VPB (Pres Ind Sg P1) => val_ + "ho" ;
    VPB (Pres Ind Sg P2) => val_ + "es" ;
    VPB (Pres Ind Sg P3) => val_ + "e" ;
    VPB (Pres Ind Pl P1) => val_ + "emos" ;
    VPB (Pres Ind Pl P2) => val_ + "eis" ;
    VPB (Pres Ind Pl P3) => val_ + "em" ;
    VPB (Pres Sub Sg P1) => val_ + "ha" ;
    VPB (Pres Sub Sg P2) => val_ + "has" ;
    VPB (Pres Sub Sg P3) => val_ + "ha" ;
    VPB (Pres Sub Pl P1) => val_ + "hamos" ;
    VPB (Pres Sub Pl P2) => val_ + "hais" ;
    VPB (Pres Sub Pl P3) => val_ + "ham" ;
    VPB (PretI Ind Sg P1) => val_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => val_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => val_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => val_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => val_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => val_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => val_ + "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => val_ + "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => val_ + "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => val_ + "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => val_ + "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => val_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => val_ + "era" ; --# notpresent
    VPB (MQPerf Sg P2) => val_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => val_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => val_ + "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => val_ + "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => val_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => val_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => val_ + "este" ; --# notpresent
    VPB (PretP Sg P3) => val_ + "eu" ; --# notpresent
    VPB (PretP Pl P1) => val_ + "emos" ; --# notpresent
    VPB (PretP Pl P2) => val_ + "estes" ; --# notpresent
    VPB (PretP Pl P3) => val_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => val_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => val_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => val_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => val_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => val_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => val_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => val_ + "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => val_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => val_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => val_ + "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => val_ + "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => val_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => val_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => val_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => val_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => val_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => val_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => val_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => val_ + "e" ;
    VPB (Imper Sg P3) => val_ + "ha" ;
    VPB (Imper Pl P1) => val_ + "hamos" ;
    VPB (Imper Pl P2) => val_ + "ei" ;
    VPB (Imper Pl P3) => val_ + "ham" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper perder_44 : Str -> Verbum = \perder ->
  let perd_ = Predef.tk 2 perder in
 {s = table {
    VI Infn => perd_ + "er" ;
    VI Ger => perd_ + "endo" ;
    VI Part => perd_ + "ido" ;
    VPB (Pres Ind Sg P1) => perd_ + "o" ;
    VPB (Pres Ind Sg P2) => perd_ + "es" ;
    VPB (Pres Ind Sg P3) => perd_ + "e" ;
    VPB (Pres Ind Pl P1) => perd_ + "emos" ;
    VPB (Pres Ind Pl P2) => perd_ + "eis" ;
    VPB (Pres Ind Pl P3) => perd_ + "em" ;
    VPB (Pres Sub Sg P1) => perd_ + "a" ;
    VPB (Pres Sub Sg P2) => perd_ + "as" ;
    VPB (Pres Sub Sg P3) => perd_ + "a" ;
    VPB (Pres Sub Pl P1) => perd_ + "amos" ;
    VPB (Pres Sub Pl P2) => perd_ + "ais" ;
    VPB (Pres Sub Pl P3) => perd_ + "am" ;
    VPB (PretI Ind Sg P1) => perd_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => perd_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => perd_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => perd_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => perd_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => perd_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => perd_ + "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => perd_ + "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => perd_ + "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => perd_ + "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => perd_ + "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => perd_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => perd_ + "era" ; --# notpresent
    VPB (MQPerf Sg P2) => perd_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => perd_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => perd_ + "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => perd_ + "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => perd_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => perd_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => perd_ + "este" ; --# notpresent
    VPB (PretP Sg P3) => perd_ + "eu" ; --# notpresent
    VPB (PretP Pl P1) => perd_ + "emos" ; --# notpresent
    VPB (PretP Pl P2) => perd_ + "estes" ; --# notpresent
    VPB (PretP Pl P3) => perd_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => perd_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => perd_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => perd_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => perd_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => perd_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => perd_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => perd_ + "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => perd_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => perd_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => perd_ + "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => perd_ + "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => perd_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => perd_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => perd_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => perd_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => perd_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => perd_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => perd_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => perd_ + "e" ;
    VPB (Imper Sg P3) => perd_ + "a" ;
    VPB (Imper Pl P1) => perd_ + "amos" ;
    VPB (Imper Pl P2) => perd_ + "ei" ;
    VPB (Imper Pl P3) => perd_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper pôr_45 : Str -> Verbum = \pôr ->
  let x_ = Predef.tk 3 pôr in
 {s = table {
    VI Infn => x_ + "pôr" ;
    VI Ger => x_ + "pondo" ;
    VI Part => x_ + "posto" ;
    VPB (Pres Ind Sg P1) => x_ + "ponho" ;
    VPB (Pres Ind Sg P2) => x_ + "pões" ;
    VPB (Pres Ind Sg P3) => x_ + "põe" ;
    VPB (Pres Ind Pl P1) => x_ + "pomos" ;
    VPB (Pres Ind Pl P2) => x_ + "pondes" ;
    VPB (Pres Ind Pl P3) => x_ + "põem" ;
    VPB (Pres Sub Sg P1) => x_ + "ponha" ;
    VPB (Pres Sub Sg P2) => x_ + "ponhas" ;
    VPB (Pres Sub Sg P3) => x_ + "ponha" ;
    VPB (Pres Sub Pl P1) => x_ + "ponhamos" ;
    VPB (Pres Sub Pl P2) => x_ + "ponhais" ;
    VPB (Pres Sub Pl P3) => x_ + "ponham" ;
    VPB (PretI Ind Sg P1) => x_ + "punha" ; --# notpresent
    VPB (PretI Ind Sg P2) => x_ + "punhas" ; --# notpresent
    VPB (PretI Ind Sg P3) => x_ + "punha" ; --# notpresent
    VPB (PretI Ind Pl P1) => x_ + "púnhamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => x_ + "púnheis" ; --# notpresent
    VPB (PretI Ind Pl P3) => x_ + "punham" ; --# notpresent
    VPB (PretI Sub Sg P1) => x_ + "pusesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => x_ + "pusesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => x_ + "pusesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => x_ + "puséssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => x_ + "pusésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => x_ + "pusessem" ; --# notpresent
    VPB (MQPerf Sg P1) => x_ + "pusera" ; --# notpresent
    VPB (MQPerf Sg P2) => x_ + "puseras" ; --# notpresent
    VPB (MQPerf Sg P3) => x_ + "pusera" ; --# notpresent
    VPB (MQPerf Pl P1) => x_ + "puséramos" ; --# notpresent
    VPB (MQPerf Pl P2) => x_ + "puséreis" ; --# notpresent
    VPB (MQPerf Pl P3) => x_ + "puseram" ; --# notpresent
    VPB (PretP Sg P1) => x_ + "pus" ; --# notpresent
    VPB (PretP Sg P2) => x_ + "puseste" ; --# notpresent
    VPB (PretP Sg P3) => x_ + "pôs" ; --# notpresent
    VPB (PretP Pl P1) => x_ + "pusemos" ; --# notpresent
    VPB (PretP Pl P2) => x_ + "pusestes" ; --# notpresent
    VPB (PretP Pl P3) => x_ + "puseram" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "porei" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "porás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "porá" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "poremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "poreis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "porão" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "puser" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "puseres" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "puser" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "pusermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "puserdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "puserem" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "poria" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "porias" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "poria" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "poríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "poríeis" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "poriam" ; --# notpresent
    VPB (Imper Sg P2) => x_ + "põe" ;
    VPB (Imper Sg P3) => x_ + "ponha" ;
    VPB (Imper Pl P1) => x_ + "ponhamos" ;
    VPB (Imper Pl P2) => x_ + "ponde" ;
    VPB (Imper Pl P3) => x_ + "ponham" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper acontecer_46 : Str -> Verbum = \acontecer ->
  let aconte_ = Predef.tk 3 acontecer in
 {s = table {
    VI Infn => aconte_ + "cer" ;
    VI Ger => aconte_ + "cendo" ;
    VI Part => aconte_ + "cido" ;
    VPB (Pres Ind Sg P1) => aconte_ + nonExist ;
    VPB (Pres Ind Sg P2) => aconte_ + nonExist ;
    VPB (Pres Ind Sg P3) => aconte_ + "ce" ;
    VPB (Pres Ind Pl P1) => aconte_ + nonExist ;
    VPB (Pres Ind Pl P2) => aconte_ + nonExist ;
    VPB (Pres Ind Pl P3) => aconte_ + "cem" ;
    VPB (Pres Sub Sg P1) => aconte_ + nonExist ;
    VPB (Pres Sub Sg P2) => aconte_ + nonExist ;
    VPB (Pres Sub Sg P3) => aconte_ + "ça" ;
    VPB (Pres Sub Pl P1) => aconte_ + nonExist ;
    VPB (Pres Sub Pl P2) => aconte_ + nonExist ;
    VPB (Pres Sub Pl P3) => aconte_ + "çam" ;
    VPB (PretI Ind Sg P1) => aconte_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => aconte_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => aconte_ + "cia" ; --# notpresent
    VPB (PretI Ind Pl P1) => aconte_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => aconte_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => aconte_ + "ciam" ; --# notpresent
    VPB (PretI Sub Sg P1) => aconte_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => aconte_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => aconte_ + "cesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => aconte_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => aconte_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => aconte_ + "cessem" ; --# notpresent
    VPB (MQPerf Sg P1) => aconte_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => aconte_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => aconte_ + "cera" ; --# notpresent
    VPB (MQPerf Pl P1) => aconte_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => aconte_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => aconte_ + "ceram" ; --# notpresent
    VPB (PretP Sg P1) => aconte_ + nonExist ; --# notpresent
    VPB (PretP Sg P2) => aconte_ + nonExist ; --# notpresent
    VPB (PretP Sg P3) => aconte_ + "ceu" ; --# notpresent
    VPB (PretP Pl P1) => aconte_ + nonExist ; --# notpresent
    VPB (PretP Pl P2) => aconte_ + nonExist ; --# notpresent
    VPB (PretP Pl P3) => aconte_ + "ceram" ; --# notpresent
    VPB (Fut Ind Sg P1) => aconte_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => aconte_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => aconte_ + "cerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => aconte_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => aconte_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => aconte_ + "cerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => aconte_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => aconte_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => aconte_ + "cer" ; --# notpresent
    VPB (Fut Sub Pl P1) => aconte_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => aconte_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => aconte_ + "cerem" ; --# notpresent
    VPB (Cond Sg P1) => aconte_ + nonExist ; --# notpresent
    VPB (Cond Sg P2) => aconte_ + nonExist ; --# notpresent
    VPB (Cond Sg P3) => aconte_ + "ceria" ; --# notpresent
    VPB (Cond Pl P1) => aconte_ + nonExist ; --# notpresent
    VPB (Cond Pl P2) => aconte_ + nonExist ; --# notpresent
    VPB (Cond Pl P3) => aconte_ + "ceriam" ; --# notpresent
    VPB (Imper Sg P2) => aconte_ + nonExist ;
    VPB (Imper Sg P3) => aconte_ + nonExist ;
    VPB (Imper Pl P1) => aconte_ + nonExist ;
    VPB (Imper Pl P2) => aconte_ + nonExist ;
    VPB (Imper Pl P3) => aconte_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper chover_47 : Str -> Verbum = \chover ->
  let chov_ = Predef.tk 2 chover in
 {s = table {
    VI Infn => chov_ + "er" ;
    VI Ger => chov_ + "endo" ;
    VI Part => chov_ + "ido" ;
    VPB (Pres Ind Sg P1) => chov_ + nonExist ;
    VPB (Pres Ind Sg P2) => chov_ + nonExist ;
    VPB (Pres Ind Sg P3) => chov_ + "e" ;
    VPB (Pres Ind Pl P1) => chov_ + nonExist ;
    VPB (Pres Ind Pl P2) => chov_ + nonExist ;
    VPB (Pres Ind Pl P3) => chov_ + "em" ;
    VPB (Pres Sub Sg P1) => chov_ + nonExist ;
    VPB (Pres Sub Sg P2) => chov_ + nonExist ;
    VPB (Pres Sub Sg P3) => chov_ + "a" ;
    VPB (Pres Sub Pl P1) => chov_ + nonExist ;
    VPB (Pres Sub Pl P2) => chov_ + nonExist ;
    VPB (Pres Sub Pl P3) => chov_ + "am" ;
    VPB (PretI Ind Sg P1) => chov_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => chov_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => chov_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => chov_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => chov_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => chov_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => chov_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => chov_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => chov_ + "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => chov_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => chov_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => chov_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => chov_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => chov_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => chov_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => chov_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => chov_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => chov_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => chov_ + nonExist ; --# notpresent
    VPB (PretP Sg P2) => chov_ + nonExist ; --# notpresent
    VPB (PretP Sg P3) => chov_ + "eu" ; --# notpresent
    VPB (PretP Pl P1) => chov_ + nonExist ; --# notpresent
    VPB (PretP Pl P2) => chov_ + nonExist ; --# notpresent
    VPB (PretP Pl P3) => chov_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => chov_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => chov_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => chov_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => chov_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => chov_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => chov_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => chov_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => chov_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => chov_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => chov_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => chov_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => chov_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => chov_ + nonExist ; --# notpresent
    VPB (Cond Sg P2) => chov_ + nonExist ; --# notpresent
    VPB (Cond Sg P3) => chov_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => chov_ + nonExist ; --# notpresent
    VPB (Cond Pl P2) => chov_ + nonExist ; --# notpresent
    VPB (Cond Pl P3) => chov_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => chov_ + nonExist ;
    VPB (Imper Sg P3) => chov_ + nonExist ;
    VPB (Imper Pl P1) => chov_ + nonExist ;
    VPB (Imper Pl P2) => chov_ + nonExist ;
    VPB (Imper Pl P3) => chov_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper doer_48 : Str -> Verbum = \doer ->
  let d_ = Predef.tk 3 doer in
 {s = table {
    VI Infn => d_ + "oer" ;
    VI Ger => d_ + "oendo" ;
    VI Part => d_ + "oído" ;
    VPB (Pres Ind Sg P1) => d_ + nonExist ;
    VPB (Pres Ind Sg P2) => d_ + nonExist ;
    VPB (Pres Ind Sg P3) => d_ + "ói" ;
    VPB (Pres Ind Pl P1) => d_ + nonExist ;
    VPB (Pres Ind Pl P2) => d_ + nonExist ;
    VPB (Pres Ind Pl P3) => d_ + "oem" ;
    VPB (Pres Sub Sg P1) => d_ + nonExist ;
    VPB (Pres Sub Sg P2) => d_ + nonExist ;
    VPB (Pres Sub Sg P3) => d_ + "oa" ;
    VPB (Pres Sub Pl P1) => d_ + nonExist ;
    VPB (Pres Sub Pl P2) => d_ + nonExist ;
    VPB (Pres Sub Pl P3) => d_ + "oam" ;
    VPB (PretI Ind Sg P1) => d_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => d_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => d_ + "oía" ; --# notpresent
    VPB (PretI Ind Pl P1) => d_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => d_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => d_ + "oíam" ; --# notpresent
    VPB (PretI Sub Sg P1) => d_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => d_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => d_ + "oesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => d_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => d_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => d_ + "oessem" ; --# notpresent
    VPB (MQPerf Sg P1) => d_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => d_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => d_ + "oera" ; --# notpresent
    VPB (MQPerf Pl P1) => d_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => d_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => d_ + "oeram" ; --# notpresent
    VPB (PretP Sg P1) => d_ + nonExist ; --# notpresent
    VPB (PretP Sg P2) => d_ + nonExist ; --# notpresent
    VPB (PretP Sg P3) => d_ + "oeu" ; --# notpresent
    VPB (PretP Pl P1) => d_ + nonExist ; --# notpresent
    VPB (PretP Pl P2) => d_ + nonExist ; --# notpresent
    VPB (PretP Pl P3) => d_ + "oeram" ; --# notpresent
    VPB (Fut Ind Sg P1) => d_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => d_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => d_ + "oerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => d_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => d_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => d_ + "oerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => d_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => d_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => d_ + "oer" ; --# notpresent
    VPB (Fut Sub Pl P1) => d_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => d_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => d_ + "oerem" ; --# notpresent
    VPB (Cond Sg P1) => d_ + nonExist ; --# notpresent
    VPB (Cond Sg P2) => d_ + nonExist ; --# notpresent
    VPB (Cond Sg P3) => d_ + "oeria" ; --# notpresent
    VPB (Cond Pl P1) => d_ + nonExist ; --# notpresent
    VPB (Cond Pl P2) => d_ + nonExist ; --# notpresent
    VPB (Cond Pl P3) => d_ + "oeriam" ; --# notpresent
    VPB (Imper Sg P2) => d_ + nonExist ;
    VPB (Imper Sg P3) => d_ + nonExist ;
    VPB (Imper Pl P1) => d_ + nonExist ;
    VPB (Imper Pl P2) => d_ + nonExist ;
    VPB (Imper Pl P3) => d_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper prazer_49 : Str -> Verbum = \prazer ->
  let praz_ = Predef.tk 2 prazer in
 {s = table {
    VI Infn => praz_ + "er" ;
    VI Ger => praz_ + "endo" ;
    VI Part => praz_ + "ido" ;
    VPB (Pres Ind Sg P1) => praz_ + nonExist ;
    VPB (Pres Ind Sg P2) => praz_ + nonExist ;
    VPB (Pres Ind Sg P3) => praz_ + "" ;
    VPB (Pres Ind Pl P1) => praz_ + nonExist ;
    VPB (Pres Ind Pl P2) => praz_ + nonExist ;
    VPB (Pres Ind Pl P3) => praz_ + "em" ;
    VPB (Pres Sub Sg P1) => praz_ + nonExist ;
    VPB (Pres Sub Sg P2) => praz_ + nonExist ;
    VPB (Pres Sub Sg P3) => praz_ + "a" ;
    VPB (Pres Sub Pl P1) => praz_ + nonExist ;
    VPB (Pres Sub Pl P2) => praz_ + nonExist ;
    VPB (Pres Sub Pl P3) => praz_ + "am" ;
    VPB (PretI Ind Sg P1) => praz_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => praz_ + nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => praz_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => praz_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => praz_ + nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => praz_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => praz_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => praz_ + nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => praz_ + "vesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => praz_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => praz_ + nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => praz_ + "vessem" ; --# notpresent
    VPB (MQPerf Sg P1) => praz_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => praz_ + nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => praz_ + "vera" ; --# notpresent
    VPB (MQPerf Pl P1) => praz_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => praz_ + nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => praz_ + "veram" ; --# notpresent
    VPB (PretP Sg P1) => praz_ + nonExist ; --# notpresent
    VPB (PretP Sg P2) => praz_ + nonExist ; --# notpresent
    VPB (PretP Sg P3) => praz_ + "ve" ; --# notpresent
    VPB (PretP Pl P1) => praz_ + nonExist ; --# notpresent
    VPB (PretP Pl P2) => praz_ + nonExist ; --# notpresent
    VPB (PretP Pl P3) => praz_ + "veram" ; --# notpresent
    VPB (Fut Ind Sg P1) => praz_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => praz_ + nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => praz_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => praz_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => praz_ + nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => praz_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => praz_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => praz_ + nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => praz_ + "ver" ; --# notpresent
    VPB (Fut Sub Pl P1) => praz_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => praz_ + nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => praz_ + "verem" ; --# notpresent
    VPB (Cond Sg P1) => praz_ + nonExist ; --# notpresent
    VPB (Cond Sg P2) => praz_ + nonExist ; --# notpresent
    VPB (Cond Sg P3) => praz_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => praz_ + nonExist ; --# notpresent
    VPB (Cond Pl P2) => praz_ + nonExist ; --# notpresent
    VPB (Cond Pl P3) => praz_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => praz_ + nonExist ;
    VPB (Imper Sg P3) => praz_ + nonExist ;
    VPB (Imper Pl P1) => praz_ + nonExist ;
    VPB (Imper Pl P2) => praz_ + nonExist ;
    VPB (Imper Pl P3) => praz_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper precaver_50 : Str -> Verbum = \precaver ->
  let precav_ = Predef.tk 2 precaver in
 {s = table {
    VI Infn => precav_ + "er" ;
    VI Ger => precav_ + "endo" ;
    VI Part => precav_ + "ido" ;
    VPB (Pres Ind Sg P1) => precav_ + nonExist ;
    VPB (Pres Ind Sg P2) => precav_ + nonExist ;
    VPB (Pres Ind Sg P3) => precav_ + nonExist ;
    VPB (Pres Ind Pl P1) => precav_ + "emos" ;
    VPB (Pres Ind Pl P2) => precav_ + "eis" ;
    VPB (Pres Ind Pl P3) => precav_ + nonExist ;
    VPB (Pres Sub Sg P1) => precav_ + nonExist ;
    VPB (Pres Sub Sg P2) => precav_ + nonExist ;
    VPB (Pres Sub Sg P3) => precav_ + nonExist ;
    VPB (Pres Sub Pl P1) => precav_ + nonExist ;
    VPB (Pres Sub Pl P2) => precav_ + nonExist ;
    VPB (Pres Sub Pl P3) => precav_ + nonExist ;
    VPB (PretI Ind Sg P1) => precav_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => precav_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => precav_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => precav_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => precav_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => precav_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => precav_ + "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => precav_ + "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => precav_ + "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => precav_ + "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => precav_ + "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => precav_ + "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => precav_ + "era" ; --# notpresent
    VPB (MQPerf Sg P2) => precav_ + "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => precav_ + "era" ; --# notpresent
    VPB (MQPerf Pl P1) => precav_ + "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => precav_ + "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => precav_ + "eram" ; --# notpresent
    VPB (PretP Sg P1) => precav_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => precav_ + "este" ; --# notpresent
    VPB (PretP Sg P3) => precav_ + "eu" ; --# notpresent
    VPB (PretP Pl P1) => precav_ + "emos" ; --# notpresent
    VPB (PretP Pl P2) => precav_ + "estes" ; --# notpresent
    VPB (PretP Pl P3) => precav_ + "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => precav_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => precav_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => precav_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => precav_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => precav_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => precav_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => precav_ + "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => precav_ + "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => precav_ + "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => precav_ + "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => precav_ + "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => precav_ + "erem" ; --# notpresent
    VPB (Cond Sg P1) => precav_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => precav_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => precav_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => precav_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => precav_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => precav_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => precav_ + nonExist ;
    VPB (Imper Sg P3) => precav_ + nonExist ;
    VPB (Imper Pl P1) => precav_ + nonExist ;
    VPB (Imper Pl P2) => precav_ + "ei" ;
    VPB (Imper Pl P3) => precav_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper reaver_51 : Str -> Verbum = \reaver ->
  let reav_ = Predef.tk 2 reaver in
 {s = table {
    VI Infn => reav_ + "er" ;
    VI Ger => reav_ + "endo" ;
    VI Part => reav_ + "ido" ;
    VPB (Pres Ind Sg P1) => reav_ + nonExist ;
    VPB (Pres Ind Sg P2) => reav_ + nonExist ;
    VPB (Pres Ind Sg P3) => reav_ + nonExist ;
    VPB (Pres Ind Pl P1) => reav_ + "emos" ;
    VPB (Pres Ind Pl P2) => reav_ + "eis" ;
    VPB (Pres Ind Pl P3) => reav_ + nonExist ;
    VPB (Pres Sub Sg P1) => reav_ + nonExist ;
    VPB (Pres Sub Sg P2) => reav_ + nonExist ;
    VPB (Pres Sub Sg P3) => reav_ + nonExist ;
    VPB (Pres Sub Pl P1) => reav_ + nonExist ;
    VPB (Pres Sub Pl P2) => reav_ + nonExist ;
    VPB (Pres Sub Pl P3) => reav_ + nonExist ;
    VPB (PretI Ind Sg P1) => reav_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => reav_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => reav_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => reav_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => reav_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => reav_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => reav_ + "vesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => reav_ + "vesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => reav_ + "vesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => reav_ + "véssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => reav_ + "vésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => reav_ + "vessem" ; --# notpresent
    VPB (MQPerf Sg P1) => reav_ + "vera" ; --# notpresent
    VPB (MQPerf Sg P2) => reav_ + "veras" ; --# notpresent
    VPB (MQPerf Sg P3) => reav_ + "vera" ; --# notpresent
    VPB (MQPerf Pl P1) => reav_ + "véramos" ; --# notpresent
    VPB (MQPerf Pl P2) => reav_ + "véreis" ; --# notpresent
    VPB (MQPerf Pl P3) => reav_ + "veram" ; --# notpresent
    VPB (PretP Sg P1) => reav_ + "ve" ; --# notpresent
    VPB (PretP Sg P2) => reav_ + "veste" ; --# notpresent
    VPB (PretP Sg P3) => reav_ + "ve" ; --# notpresent
    VPB (PretP Pl P1) => reav_ + "vemos" ; --# notpresent
    VPB (PretP Pl P2) => reav_ + "vestes" ; --# notpresent
    VPB (PretP Pl P3) => reav_ + "veram" ; --# notpresent
    VPB (Fut Ind Sg P1) => reav_ + "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => reav_ + "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => reav_ + "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => reav_ + "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => reav_ + "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => reav_ + "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => reav_ + "ver" ; --# notpresent
    VPB (Fut Sub Sg P2) => reav_ + "veres" ; --# notpresent
    VPB (Fut Sub Sg P3) => reav_ + "ver" ; --# notpresent
    VPB (Fut Sub Pl P1) => reav_ + "vermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => reav_ + "verdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => reav_ + "verem" ; --# notpresent
    VPB (Cond Sg P1) => reav_ + "eria" ; --# notpresent
    VPB (Cond Sg P2) => reav_ + "erias" ; --# notpresent
    VPB (Cond Sg P3) => reav_ + "eria" ; --# notpresent
    VPB (Cond Pl P1) => reav_ + "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => reav_ + "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => reav_ + "eriam" ; --# notpresent
    VPB (Imper Sg P2) => reav_ + nonExist ;
    VPB (Imper Sg P3) => reav_ + nonExist ;
    VPB (Imper Pl P1) => reav_ + nonExist ;
    VPB (Imper Pl P2) => reav_ + "ei" ;
    VPB (Imper Pl P3) => reav_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper redigir_52 : Str -> Verbum = \redigir ->
  let redig_ = Predef.tk 2 redigir in
 {s = table {
    VI Infn => redig_ + "ir" ;
    VI Ger => redig_ + "indo" ;
    VI Part => redig_ + "ido" ;
    VPB (Pres Ind Sg P1) => redig_ + "o" ;
    VPB (Pres Ind Sg P2) => redig_ + "es" ;
    VPB (Pres Ind Sg P3) => redig_ + "e" ;
    VPB (Pres Ind Pl P1) => redig_ + "imos" ;
    VPB (Pres Ind Pl P2) => redig_ + "is" ;
    VPB (Pres Ind Pl P3) => redig_ + "em" ;
    VPB (Pres Sub Sg P1) => redig_ + "a" ;
    VPB (Pres Sub Sg P2) => redig_ + "as" ;
    VPB (Pres Sub Sg P3) => redig_ + "a" ;
    VPB (Pres Sub Pl P1) => redig_ + "amos" ;
    VPB (Pres Sub Pl P2) => redig_ + "ais" ;
    VPB (Pres Sub Pl P3) => redig_ + "am" ;
    VPB (PretI Ind Sg P1) => redig_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => redig_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => redig_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => redig_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => redig_ + "ieis" ; --# notpresent
    VPB (PretI Ind Pl P3) => redig_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => redig_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => redig_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => redig_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => redig_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => redig_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => redig_ + "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => redig_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => redig_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => redig_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => redig_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => redig_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => redig_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => redig_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => redig_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => redig_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => redig_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => redig_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => redig_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => redig_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => redig_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => redig_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => redig_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => redig_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => redig_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => redig_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => redig_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => redig_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => redig_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => redig_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => redig_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => redig_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => redig_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => redig_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => redig_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => redig_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => redig_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => redig_ + "e" ;
    VPB (Imper Sg P3) => redig_ + "a" ;
    VPB (Imper Pl P1) => redig_ + "amos" ;
    VPB (Imper Pl P2) => redig_ + "i" ;
    VPB (Imper Pl P3) => redig_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper extinguir_53 : Str -> Verbum = \extinguir ->
  let extingu_ = Predef.tk 2 extinguir in
 {s = table {
    VI Infn => extingu_ + "ir" ;
    VI Ger => extingu_ + "indo" ;
    VI Part => extingu_ + vars ""  "ido" ;
    VPB (Pres Ind Sg P1) => extingu_ + "" ;
    VPB (Pres Ind Sg P2) => extingu_ + "es" ;
    VPB (Pres Ind Sg P3) => extingu_ + "e" ;
    VPB (Pres Ind Pl P1) => extingu_ + "imos" ;
    VPB (Pres Ind Pl P2) => extingu_ + "is" ;
    VPB (Pres Ind Pl P3) => extingu_ + "em" ;
    VPB (Pres Sub Sg P1) => extingu_ + "" ;
    VPB (Pres Sub Sg P2) => extingu_ + "s" ;
    VPB (Pres Sub Sg P3) => extingu_ + "" ;
    VPB (Pres Sub Pl P1) => extingu_ + "mos" ;
    VPB (Pres Sub Pl P2) => extingu_ + "is" ;
    VPB (Pres Sub Pl P3) => extingu_ + "m" ;
    VPB (PretI Ind Sg P1) => extingu_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => extingu_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => extingu_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => extingu_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => extingu_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => extingu_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => extingu_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => extingu_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => extingu_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => extingu_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => extingu_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => extingu_ + "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => extingu_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => extingu_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => extingu_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => extingu_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => extingu_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => extingu_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => extingu_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => extingu_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => extingu_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => extingu_ + "ímos" ; --# notpresent
    VPB (PretP Pl P2) => extingu_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => extingu_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => extingu_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => extingu_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => extingu_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => extingu_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => extingu_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => extingu_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => extingu_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => extingu_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => extingu_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => extingu_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => extingu_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => extingu_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => extingu_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => extingu_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => extingu_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => extingu_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => extingu_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => extingu_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => extingu_ + "e" ;
    VPB (Imper Sg P3) => extingu_ + "" ;
    VPB (Imper Pl P1) => extingu_ + "mos" ;
    VPB (Imper Pl P2) => extingu_ + "i" ;
    VPB (Imper Pl P3) => extingu_ + "m" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper servir_54 : Str -> Verbum = \servir ->
  let serv_ = Predef.tk 2 servir in
 {s = table {
    VI Infn => serv_ + "ir" ;
    VI Ger => serv_ + "indo" ;
    VI Part => serv_ + "ido" ;
    VPB (Pres Ind Sg P1) => serv_ + "o" ;
    VPB (Pres Ind Sg P2) => serv_ + "es" ;
    VPB (Pres Ind Sg P3) => serv_ + "e" ;
    VPB (Pres Ind Pl P1) => serv_ + "imos" ;
    VPB (Pres Ind Pl P2) => serv_ + "is" ;
    VPB (Pres Ind Pl P3) => serv_ + "em" ;
    VPB (Pres Sub Sg P1) => serv_ + "a" ;
    VPB (Pres Sub Sg P2) => serv_ + "as" ;
    VPB (Pres Sub Sg P3) => serv_ + "a" ;
    VPB (Pres Sub Pl P1) => serv_ + "amos" ;
    VPB (Pres Sub Pl P2) => serv_ + "ais" ;
    VPB (Pres Sub Pl P3) => serv_ + "am" ;
    VPB (PretI Ind Sg P1) => serv_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => serv_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => serv_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => serv_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => serv_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => serv_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => serv_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => serv_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => serv_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => serv_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => serv_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => serv_ + "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => serv_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => serv_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => serv_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => serv_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => serv_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => serv_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => serv_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => serv_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => serv_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => serv_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => serv_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => serv_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => serv_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => serv_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => serv_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => serv_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => serv_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => serv_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => serv_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => serv_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => serv_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => serv_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => serv_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => serv_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => serv_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => serv_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => serv_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => serv_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => serv_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => serv_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => serv_ + "e" ;
    VPB (Imper Sg P3) => serv_ + "a" ;
    VPB (Imper Pl P1) => serv_ + "amos" ;
    VPB (Imper Pl P2) => serv_ + "i" ;
    VPB (Imper Pl P3) => serv_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper seguir_55 : Str -> Verbum = \seguir ->
  let segu_ = Predef.tk 2 seguir in
 {s = table {
    VI Infn => segu_ + "ir" ;
    VI Ger => segu_ + "indo" ;
    VI Part => segu_ + "ido" ;
    VPB (Pres Ind Sg P1) => segu_ + "" ;
    VPB (Pres Ind Sg P2) => segu_ + "es" ;
    VPB (Pres Ind Sg P3) => segu_ + "e" ;
    VPB (Pres Ind Pl P1) => segu_ + "imos" ;
    VPB (Pres Ind Pl P2) => segu_ + "is" ;
    VPB (Pres Ind Pl P3) => segu_ + "em" ;
    VPB (Pres Sub Sg P1) => segu_ + "" ;
    VPB (Pres Sub Sg P2) => segu_ + "s" ;
    VPB (Pres Sub Sg P3) => segu_ + "" ;
    VPB (Pres Sub Pl P1) => segu_ + "mos" ;
    VPB (Pres Sub Pl P2) => segu_ + "is" ;
    VPB (Pres Sub Pl P3) => segu_ + "m" ;
    VPB (PretI Ind Sg P1) => segu_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => segu_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => segu_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => segu_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => segu_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => segu_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => segu_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => segu_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => segu_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => segu_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => segu_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => segu_ + "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => segu_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => segu_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => segu_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => segu_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => segu_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => segu_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => segu_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => segu_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => segu_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => segu_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => segu_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => segu_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => segu_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => segu_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => segu_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => segu_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => segu_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => segu_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => segu_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => segu_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => segu_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => segu_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => segu_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => segu_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => segu_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => segu_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => segu_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => segu_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => segu_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => segu_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => segu_ + "e" ;
    VPB (Imper Sg P3) => segu_ + "" ;
    VPB (Imper Pl P1) => segu_ + "mos" ;
    VPB (Imper Pl P2) => segu_ + "i" ;
    VPB (Imper Pl P3) => segu_ + "m" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper sentir_56 : Str -> Verbum = \sentir ->
  let sent_ = Predef.tk 2 sentir in
 {s = table {
    VI Infn => sent_ + "ir" ;
    VI Ger => sent_ + "indo" ;
    VI Part => sent_ + "ido" ;
    VPB (Pres Ind Sg P1) => sent_ + "o" ;
    VPB (Pres Ind Sg P2) => sent_ + "es" ;
    VPB (Pres Ind Sg P3) => sent_ + "e" ;
    VPB (Pres Ind Pl P1) => sent_ + "imos" ;
    VPB (Pres Ind Pl P2) => sent_ + "is" ;
    VPB (Pres Ind Pl P3) => sent_ + "em" ;
    VPB (Pres Sub Sg P1) => sent_ + "a" ;
    VPB (Pres Sub Sg P2) => sent_ + "as" ;
    VPB (Pres Sub Sg P3) => sent_ + "a" ;
    VPB (Pres Sub Pl P1) => sent_ + "amos" ;
    VPB (Pres Sub Pl P2) => sent_ + "ais" ;
    VPB (Pres Sub Pl P3) => sent_ + "am" ;
    VPB (PretI Ind Sg P1) => sent_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => sent_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => sent_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => sent_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => sent_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => sent_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => sent_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => sent_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => sent_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => sent_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => sent_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => sent_ + "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => sent_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => sent_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => sent_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => sent_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => sent_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => sent_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => sent_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => sent_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => sent_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => sent_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => sent_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => sent_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => sent_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => sent_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => sent_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => sent_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => sent_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => sent_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => sent_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => sent_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => sent_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => sent_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => sent_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => sent_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => sent_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => sent_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => sent_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => sent_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => sent_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => sent_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => sent_ + "e" ;
    VPB (Imper Sg P3) => sent_ + "a" ;
    VPB (Imper Pl P1) => sent_ + "amos" ;
    VPB (Imper Pl P2) => sent_ + "i" ;
    VPB (Imper Pl P3) => sent_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper preferir_57 : Str -> Verbum = \preferir ->
  let prefer_ = Predef.tk 2 preferir in
 {s = table {
    VI Infn => prefer_ + "ir" ;
    VI Ger => prefer_ + "indo" ;
    VI Part => prefer_ + "ido" ;
    VPB (Pres Ind Sg P1) => prefer_ + "o" ;
    VPB (Pres Ind Sg P2) => prefer_ + "es" ;
    VPB (Pres Ind Sg P3) => prefer_ + "e" ;
    VPB (Pres Ind Pl P1) => prefer_ + "imos" ;
    VPB (Pres Ind Pl P2) => prefer_ + "is" ;
    VPB (Pres Ind Pl P3) => prefer_ + "em" ;
    VPB (Pres Sub Sg P1) => prefer_ + "a" ;
    VPB (Pres Sub Sg P2) => prefer_ + "as" ;
    VPB (Pres Sub Sg P3) => prefer_ + "a" ;
    VPB (Pres Sub Pl P1) => prefer_ + "amos" ;
    VPB (Pres Sub Pl P2) => prefer_ + "ais" ;
    VPB (Pres Sub Pl P3) => prefer_ + "am" ;
    VPB (PretI Ind Sg P1) => prefer_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => prefer_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => prefer_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => prefer_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => prefer_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => prefer_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => prefer_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => prefer_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => prefer_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => prefer_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => prefer_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => prefer_ + "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => prefer_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => prefer_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => prefer_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => prefer_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => prefer_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => prefer_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => prefer_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => prefer_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => prefer_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => prefer_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => prefer_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => prefer_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => prefer_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => prefer_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => prefer_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => prefer_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => prefer_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => prefer_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => prefer_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => prefer_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => prefer_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => prefer_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => prefer_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => prefer_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => prefer_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => prefer_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => prefer_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => prefer_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => prefer_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => prefer_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => prefer_ + "e" ;
    VPB (Imper Sg P3) => prefer_ + "a" ;
    VPB (Imper Pl P1) => prefer_ + "amos" ;
    VPB (Imper Pl P2) => prefer_ + "i" ;
    VPB (Imper Pl P3) => prefer_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper agredir_58 : Str -> Verbum = \agredir ->
  let agr_ = Predef.tk 4 agredir in
 {s = table {
    VI Infn => agr_ + "edir" ;
    VI Ger => agr_ + "edindo" ;
    VI Part => agr_ + "edido" ;
    VPB (Pres Ind Sg P1) => agr_ + "ido" ;
    VPB (Pres Ind Sg P2) => agr_ + "ides" ;
    VPB (Pres Ind Sg P3) => agr_ + "ide" ;
    VPB (Pres Ind Pl P1) => agr_ + "edimos" ;
    VPB (Pres Ind Pl P2) => agr_ + "edis" ;
    VPB (Pres Ind Pl P3) => agr_ + "idem" ;
    VPB (Pres Sub Sg P1) => agr_ + "ida" ;
    VPB (Pres Sub Sg P2) => agr_ + "idas" ;
    VPB (Pres Sub Sg P3) => agr_ + "ida" ;
    VPB (Pres Sub Pl P1) => agr_ + "idamos" ;
    VPB (Pres Sub Pl P2) => agr_ + "idais" ;
    VPB (Pres Sub Pl P3) => agr_ + "idam" ;
    VPB (PretI Ind Sg P1) => agr_ + "edia" ; --# notpresent
    VPB (PretI Ind Sg P2) => agr_ + "edias" ; --# notpresent
    VPB (PretI Ind Sg P3) => agr_ + "edia" ; --# notpresent
    VPB (PretI Ind Pl P1) => agr_ + "edíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => agr_ + "edíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => agr_ + "ediam" ; --# notpresent
    VPB (PretI Sub Sg P1) => agr_ + "edisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => agr_ + "edisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => agr_ + "edisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => agr_ + "edíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => agr_ + "edísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => agr_ + "edissem" ; --# notpresent
    VPB (MQPerf Sg P1) => agr_ + "edira" ; --# notpresent
    VPB (MQPerf Sg P2) => agr_ + "ediras" ; --# notpresent
    VPB (MQPerf Sg P3) => agr_ + "edira" ; --# notpresent
    VPB (MQPerf Pl P1) => agr_ + "edíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => agr_ + "edíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => agr_ + "ediram" ; --# notpresent
    VPB (PretP Sg P1) => agr_ + "edi" ; --# notpresent
    VPB (PretP Sg P2) => agr_ + "ediste" ; --# notpresent
    VPB (PretP Sg P3) => agr_ + "ediu" ; --# notpresent
    VPB (PretP Pl P1) => agr_ + "edimos" ; --# notpresent
    VPB (PretP Pl P2) => agr_ + "edistes" ; --# notpresent
    VPB (PretP Pl P3) => agr_ + "ediram" ; --# notpresent
    VPB (Fut Ind Sg P1) => agr_ + "edirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => agr_ + "edirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => agr_ + "edirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => agr_ + "ediremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => agr_ + "edireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => agr_ + "edirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => agr_ + "edir" ; --# notpresent
    VPB (Fut Sub Sg P2) => agr_ + "edires" ; --# notpresent
    VPB (Fut Sub Sg P3) => agr_ + "edir" ; --# notpresent
    VPB (Fut Sub Pl P1) => agr_ + "edirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => agr_ + "edirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => agr_ + "edirem" ; --# notpresent
    VPB (Cond Sg P1) => agr_ + "ediria" ; --# notpresent
    VPB (Cond Sg P2) => agr_ + "edirias" ; --# notpresent
    VPB (Cond Sg P3) => agr_ + "ediria" ; --# notpresent
    VPB (Cond Pl P1) => agr_ + "ediríamos" ; --# notpresent
    VPB (Cond Pl P2) => agr_ + "ediríeis" ; --# notpresent
    VPB (Cond Pl P3) => agr_ + "ediriam" ; --# notpresent
    VPB (Imper Sg P2) => agr_ + "ide" ;
    VPB (Imper Sg P3) => agr_ + "ida" ;
    VPB (Imper Pl P1) => agr_ + "idamos" ;
    VPB (Imper Pl P2) => agr_ + "edi" ;
    VPB (Imper Pl P3) => agr_ + "idam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper dormir_59 : Str -> Verbum = \dormir ->
  let d_ = Predef.tk 5 dormir in
 {s = table {
    VI Infn => d_ + "ormir" ;
    VI Ger => d_ + "ormindo" ;
    VI Part => d_ + "ormido" ;
    VPB (Pres Ind Sg P1) => d_ + "urmo" ;
    VPB (Pres Ind Sg P2) => d_ + "ormes" ;
    VPB (Pres Ind Sg P3) => d_ + "orme" ;
    VPB (Pres Ind Pl P1) => d_ + "ormimos" ;
    VPB (Pres Ind Pl P2) => d_ + "ormis" ;
    VPB (Pres Ind Pl P3) => d_ + "ormem" ;
    VPB (Pres Sub Sg P1) => d_ + "urma" ;
    VPB (Pres Sub Sg P2) => d_ + "urmas" ;
    VPB (Pres Sub Sg P3) => d_ + "urma" ;
    VPB (Pres Sub Pl P1) => d_ + "urmamos" ;
    VPB (Pres Sub Pl P2) => d_ + "urmais" ;
    VPB (Pres Sub Pl P3) => d_ + "urmam" ;
    VPB (PretI Ind Sg P1) => d_ + "ormia" ; --# notpresent
    VPB (PretI Ind Sg P2) => d_ + "ormias" ; --# notpresent
    VPB (PretI Ind Sg P3) => d_ + "ormia" ; --# notpresent
    VPB (PretI Ind Pl P1) => d_ + "ormíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => d_ + "ormíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => d_ + "ormiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => d_ + "ormisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => d_ + "ormisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => d_ + "ormisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => d_ + "ormíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => d_ + "ormísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => d_ + "ormissem" ; --# notpresent
    VPB (MQPerf Sg P1) => d_ + "ormira" ; --# notpresent
    VPB (MQPerf Sg P2) => d_ + "ormiras" ; --# notpresent
    VPB (MQPerf Sg P3) => d_ + "ormira" ; --# notpresent
    VPB (MQPerf Pl P1) => d_ + "ormíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => d_ + "ormíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => d_ + "ormiram" ; --# notpresent
    VPB (PretP Sg P1) => d_ + "ormi" ; --# notpresent
    VPB (PretP Sg P2) => d_ + "ormiste" ; --# notpresent
    VPB (PretP Sg P3) => d_ + "ormiu" ; --# notpresent
    VPB (PretP Pl P1) => d_ + "ormimos" ; --# notpresent
    VPB (PretP Pl P2) => d_ + "ormistes" ; --# notpresent
    VPB (PretP Pl P3) => d_ + "ormiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => d_ + "ormirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => d_ + "ormirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => d_ + "ormirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => d_ + "ormiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => d_ + "ormireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => d_ + "ormirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => d_ + "ormir" ; --# notpresent
    VPB (Fut Sub Sg P2) => d_ + "ormires" ; --# notpresent
    VPB (Fut Sub Sg P3) => d_ + "ormir" ; --# notpresent
    VPB (Fut Sub Pl P1) => d_ + "ormirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => d_ + "ormirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => d_ + "ormirem" ; --# notpresent
    VPB (Cond Sg P1) => d_ + "ormiria" ; --# notpresent
    VPB (Cond Sg P2) => d_ + "ormirias" ; --# notpresent
    VPB (Cond Sg P3) => d_ + "ormiria" ; --# notpresent
    VPB (Cond Pl P1) => d_ + "ormiríamos" ; --# notpresent
    VPB (Cond Pl P2) => d_ + "ormiríeis" ; --# notpresent
    VPB (Cond Pl P3) => d_ + "ormiriam" ; --# notpresent
    VPB (Imper Sg P2) => d_ + "orme" ;
    VPB (Imper Sg P3) => d_ + "urma" ;
    VPB (Imper Pl P1) => d_ + "urmamos" ;
    VPB (Imper Pl P2) => d_ + "ormi" ;
    VPB (Imper Pl P3) => d_ + "urmam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper polir_60 : Str -> Verbum = \polir ->
  let p_ = Predef.tk 4 polir in
 {s = table {
    VI Infn => p_ + "olir" ;
    VI Ger => p_ + "olindo" ;
    VI Part => p_ + "olido" ;
    VPB (Pres Ind Sg P1) => p_ + "ulo" ;
    VPB (Pres Ind Sg P2) => p_ + "ules" ;
    VPB (Pres Ind Sg P3) => p_ + "ule" ;
    VPB (Pres Ind Pl P1) => p_ + "olimos" ;
    VPB (Pres Ind Pl P2) => p_ + "olis" ;
    VPB (Pres Ind Pl P3) => p_ + "ulem" ;
    VPB (Pres Sub Sg P1) => p_ + "ula" ;
    VPB (Pres Sub Sg P2) => p_ + "ulas" ;
    VPB (Pres Sub Sg P3) => p_ + "ula" ;
    VPB (Pres Sub Pl P1) => p_ + "ulamos" ;
    VPB (Pres Sub Pl P2) => p_ + "ulais" ;
    VPB (Pres Sub Pl P3) => p_ + "ulam" ;
    VPB (PretI Ind Sg P1) => p_ + "olia" ; --# notpresent
    VPB (PretI Ind Sg P2) => p_ + "olias" ; --# notpresent
    VPB (PretI Ind Sg P3) => p_ + "olia" ; --# notpresent
    VPB (PretI Ind Pl P1) => p_ + "olíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => p_ + "olíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => p_ + "oliam" ; --# notpresent
    VPB (PretI Sub Sg P1) => p_ + "olisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => p_ + "olisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => p_ + "olisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => p_ + "olíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => p_ + "olísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => p_ + "olissem" ; --# notpresent
    VPB (MQPerf Sg P1) => p_ + "olira" ; --# notpresent
    VPB (MQPerf Sg P2) => p_ + "oliras" ; --# notpresent
    VPB (MQPerf Sg P3) => p_ + "olira" ; --# notpresent
    VPB (MQPerf Pl P1) => p_ + "olíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => p_ + "olíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => p_ + "oliram" ; --# notpresent
    VPB (PretP Sg P1) => p_ + "oli" ; --# notpresent
    VPB (PretP Sg P2) => p_ + "oliste" ; --# notpresent
    VPB (PretP Sg P3) => p_ + "oliu" ; --# notpresent
    VPB (PretP Pl P1) => p_ + "olimos" ; --# notpresent
    VPB (PretP Pl P2) => p_ + "olistes" ; --# notpresent
    VPB (PretP Pl P3) => p_ + "oliram" ; --# notpresent
    VPB (Fut Ind Sg P1) => p_ + "olirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => p_ + "olirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => p_ + "olirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => p_ + "oliremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => p_ + "olireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => p_ + "olirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => p_ + "olir" ; --# notpresent
    VPB (Fut Sub Sg P2) => p_ + "olires" ; --# notpresent
    VPB (Fut Sub Sg P3) => p_ + "olir" ; --# notpresent
    VPB (Fut Sub Pl P1) => p_ + "olirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => p_ + "olirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => p_ + "olirem" ; --# notpresent
    VPB (Cond Sg P1) => p_ + "oliria" ; --# notpresent
    VPB (Cond Sg P2) => p_ + "olirias" ; --# notpresent
    VPB (Cond Sg P3) => p_ + "oliria" ; --# notpresent
    VPB (Cond Pl P1) => p_ + "oliríamos" ; --# notpresent
    VPB (Cond Pl P2) => p_ + "oliríeis" ; --# notpresent
    VPB (Cond Pl P3) => p_ + "oliriam" ; --# notpresent
    VPB (Imper Sg P2) => p_ + "ule" ;
    VPB (Imper Sg P3) => p_ + "ula" ;
    VPB (Imper Pl P1) => p_ + "ulamos" ;
    VPB (Imper Pl P2) => p_ + "oli" ;
    VPB (Imper Pl P3) => p_ + "ulam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper acudir_61 : Str -> Verbum = \acudir ->
  let ac_ = Predef.tk 4 acudir in
 {s = table {
    VI Infn => ac_ + "udir" ;
    VI Ger => ac_ + "udindo" ;
    VI Part => ac_ + "udido" ;
    VPB (Pres Ind Sg P1) => ac_ + "udo" ;
    VPB (Pres Ind Sg P2) => ac_ + "odes" ;
    VPB (Pres Ind Sg P3) => ac_ + "ode" ;
    VPB (Pres Ind Pl P1) => ac_ + "udimos" ;
    VPB (Pres Ind Pl P2) => ac_ + "udis" ;
    VPB (Pres Ind Pl P3) => ac_ + "odem" ;
    VPB (Pres Sub Sg P1) => ac_ + "uda" ;
    VPB (Pres Sub Sg P2) => ac_ + "udas" ;
    VPB (Pres Sub Sg P3) => ac_ + "uda" ;
    VPB (Pres Sub Pl P1) => ac_ + "udamos" ;
    VPB (Pres Sub Pl P2) => ac_ + "udais" ;
    VPB (Pres Sub Pl P3) => ac_ + "udam" ;
    VPB (PretI Ind Sg P1) => ac_ + "udia" ; --# notpresent
    VPB (PretI Ind Sg P2) => ac_ + "udias" ; --# notpresent
    VPB (PretI Ind Sg P3) => ac_ + "udia" ; --# notpresent
    VPB (PretI Ind Pl P1) => ac_ + "udíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => ac_ + "udíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => ac_ + "udiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => ac_ + "udisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => ac_ + "udisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => ac_ + "udisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => ac_ + "udíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => ac_ + "udísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => ac_ + "udissem" ; --# notpresent
    VPB (MQPerf Sg P1) => ac_ + "udira" ; --# notpresent
    VPB (MQPerf Sg P2) => ac_ + "udiras" ; --# notpresent
    VPB (MQPerf Sg P3) => ac_ + "udira" ; --# notpresent
    VPB (MQPerf Pl P1) => ac_ + "udíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => ac_ + "udíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => ac_ + "udiram" ; --# notpresent
    VPB (PretP Sg P1) => ac_ + "udi" ; --# notpresent
    VPB (PretP Sg P2) => ac_ + "udiste" ; --# notpresent
    VPB (PretP Sg P3) => ac_ + "udiu" ; --# notpresent
    VPB (PretP Pl P1) => ac_ + "udimos" ; --# notpresent
    VPB (PretP Pl P2) => ac_ + "udistes" ; --# notpresent
    VPB (PretP Pl P3) => ac_ + "udiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => ac_ + "udirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => ac_ + "udirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ac_ + "udirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => ac_ + "udiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ac_ + "udireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ac_ + "udirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => ac_ + "udir" ; --# notpresent
    VPB (Fut Sub Sg P2) => ac_ + "udires" ; --# notpresent
    VPB (Fut Sub Sg P3) => ac_ + "udir" ; --# notpresent
    VPB (Fut Sub Pl P1) => ac_ + "udirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ac_ + "udirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => ac_ + "udirem" ; --# notpresent
    VPB (Cond Sg P1) => ac_ + "udiria" ; --# notpresent
    VPB (Cond Sg P2) => ac_ + "udirias" ; --# notpresent
    VPB (Cond Sg P3) => ac_ + "udiria" ; --# notpresent
    VPB (Cond Pl P1) => ac_ + "udiríamos" ; --# notpresent
    VPB (Cond Pl P2) => ac_ + "udiríeis" ; --# notpresent
    VPB (Cond Pl P3) => ac_ + "udiriam" ; --# notpresent
    VPB (Imper Sg P2) => ac_ + "ode" ;
    VPB (Imper Sg P3) => ac_ + "uda" ;
    VPB (Imper Pl P1) => ac_ + "udamos" ;
    VPB (Imper Pl P2) => ac_ + "udi" ;
    VPB (Imper Pl P3) => ac_ + "udam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper fugir_62 : Str -> Verbum = \fugir ->
  let f_ = Predef.tk 4 fugir in
 {s = table {
    VI Infn => f_ + "ugir" ;
    VI Ger => f_ + "ugindo" ;
    VI Part => f_ + "ugido" ;
    VPB (Pres Ind Sg P1) => f_ + "ujo" ;
    VPB (Pres Ind Sg P2) => f_ + "oges" ;
    VPB (Pres Ind Sg P3) => f_ + "oge" ;
    VPB (Pres Ind Pl P1) => f_ + "ugimos" ;
    VPB (Pres Ind Pl P2) => f_ + "ugis" ;
    VPB (Pres Ind Pl P3) => f_ + "ogem" ;
    VPB (Pres Sub Sg P1) => f_ + "uja" ;
    VPB (Pres Sub Sg P2) => f_ + "ujas" ;
    VPB (Pres Sub Sg P3) => f_ + "uja" ;
    VPB (Pres Sub Pl P1) => f_ + "ujamos" ;
    VPB (Pres Sub Pl P2) => f_ + "ujais" ;
    VPB (Pres Sub Pl P3) => f_ + "ujam" ;
    VPB (PretI Ind Sg P1) => f_ + "ugia" ; --# notpresent
    VPB (PretI Ind Sg P2) => f_ + "ugias" ; --# notpresent
    VPB (PretI Ind Sg P3) => f_ + "ugia" ; --# notpresent
    VPB (PretI Ind Pl P1) => f_ + "ugíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => f_ + "ugíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => f_ + "ugiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => f_ + "ugisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => f_ + "ugisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => f_ + "ugisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => f_ + "ugíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => f_ + "ugísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => f_ + "ugissem" ; --# notpresent
    VPB (MQPerf Sg P1) => f_ + "ugira" ; --# notpresent
    VPB (MQPerf Sg P2) => f_ + "ugiras" ; --# notpresent
    VPB (MQPerf Sg P3) => f_ + "ugira" ; --# notpresent
    VPB (MQPerf Pl P1) => f_ + "ugíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => f_ + "ugíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => f_ + "ugiram" ; --# notpresent
    VPB (PretP Sg P1) => f_ + "ugi" ; --# notpresent
    VPB (PretP Sg P2) => f_ + "ugiste" ; --# notpresent
    VPB (PretP Sg P3) => f_ + "ugiu" ; --# notpresent
    VPB (PretP Pl P1) => f_ + "ugimos" ; --# notpresent
    VPB (PretP Pl P2) => f_ + "ugistes" ; --# notpresent
    VPB (PretP Pl P3) => f_ + "ugiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => f_ + "ugirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => f_ + "ugirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => f_ + "ugirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => f_ + "ugiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => f_ + "ugereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => f_ + "ugirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => f_ + "ugir" ; --# notpresent
    VPB (Fut Sub Sg P2) => f_ + "ugires" ; --# notpresent
    VPB (Fut Sub Sg P3) => f_ + "ugir" ; --# notpresent
    VPB (Fut Sub Pl P1) => f_ + "ugirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => f_ + "ugirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => f_ + "ugirem" ; --# notpresent
    VPB (Cond Sg P1) => f_ + "ugiria" ; --# notpresent
    VPB (Cond Sg P2) => f_ + "ugirias" ; --# notpresent
    VPB (Cond Sg P3) => f_ + "ugiria" ; --# notpresent
    VPB (Cond Pl P1) => f_ + "ugiríamos" ; --# notpresent
    VPB (Cond Pl P2) => f_ + "ugiríeis" ; --# notpresent
    VPB (Cond Pl P3) => f_ + "ugiriam" ; --# notpresent
    VPB (Imper Sg P2) => f_ + "oge" ;
    VPB (Imper Sg P3) => f_ + "uja" ;
    VPB (Imper Pl P1) => f_ + "ujamos" ;
    VPB (Imper Pl P2) => f_ + "ugi" ;
    VPB (Imper Pl P3) => f_ + "ujam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper frigir_63 : Str -> Verbum = \frigir ->
  let fr_ = Predef.tk 4 frigir in
 {s = table {
    VI Infn => fr_ + "igir" ;
    VI Ger => fr_ + "igindo" ;
    VI Part => fr_ + "igido" ;
    VPB (Pres Ind Sg P1) => fr_ + "ijo" ;
    VPB (Pres Ind Sg P2) => fr_ + "eges" ;
    VPB (Pres Ind Sg P3) => fr_ + "ege" ;
    VPB (Pres Ind Pl P1) => fr_ + "igimos" ;
    VPB (Pres Ind Pl P2) => fr_ + "igis" ;
    VPB (Pres Ind Pl P3) => fr_ + "egem" ;
    VPB (Pres Sub Sg P1) => fr_ + "ija" ;
    VPB (Pres Sub Sg P2) => fr_ + "ijas" ;
    VPB (Pres Sub Sg P3) => fr_ + "ija" ;
    VPB (Pres Sub Pl P1) => fr_ + "ijamos" ;
    VPB (Pres Sub Pl P2) => fr_ + "ijais" ;
    VPB (Pres Sub Pl P3) => fr_ + "ijam" ;
    VPB (PretI Ind Sg P1) => fr_ + "igia" ; --# notpresent
    VPB (PretI Ind Sg P2) => fr_ + "igias" ; --# notpresent
    VPB (PretI Ind Sg P3) => fr_ + "igia" ; --# notpresent
    VPB (PretI Ind Pl P1) => fr_ + "igíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => fr_ + "igíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => fr_ + "igiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => fr_ + "igisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => fr_ + "igisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => fr_ + "igisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => fr_ + "igíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => fr_ + "igísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => fr_ + "igissem" ; --# notpresent
    VPB (MQPerf Sg P1) => fr_ + "igira" ; --# notpresent
    VPB (MQPerf Sg P2) => fr_ + "igiras" ; --# notpresent
    VPB (MQPerf Sg P3) => fr_ + "igira" ; --# notpresent
    VPB (MQPerf Pl P1) => fr_ + "igíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => fr_ + "igíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => fr_ + "igiram" ; --# notpresent
    VPB (PretP Sg P1) => fr_ + "igi" ; --# notpresent
    VPB (PretP Sg P2) => fr_ + "igiste" ; --# notpresent
    VPB (PretP Sg P3) => fr_ + "igiu" ; --# notpresent
    VPB (PretP Pl P1) => fr_ + "igimos" ; --# notpresent
    VPB (PretP Pl P2) => fr_ + "igistes" ; --# notpresent
    VPB (PretP Pl P3) => fr_ + "igiam" ; --# notpresent
    VPB (Fut Ind Sg P1) => fr_ + "igirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => fr_ + "igirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => fr_ + "igirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => fr_ + "igiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => fr_ + "igireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => fr_ + "igirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => fr_ + "igir" ; --# notpresent
    VPB (Fut Sub Sg P2) => fr_ + "igires" ; --# notpresent
    VPB (Fut Sub Sg P3) => fr_ + "igir" ; --# notpresent
    VPB (Fut Sub Pl P1) => fr_ + "igirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => fr_ + "igirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => fr_ + "igirem" ; --# notpresent
    VPB (Cond Sg P1) => fr_ + "igiria" ; --# notpresent
    VPB (Cond Sg P2) => fr_ + "igirias" ; --# notpresent
    VPB (Cond Sg P3) => fr_ + "igiria" ; --# notpresent
    VPB (Cond Pl P1) => fr_ + "igiríamos" ; --# notpresent
    VPB (Cond Pl P2) => fr_ + "igiríeis" ; --# notpresent
    VPB (Cond Pl P3) => fr_ + "igiriam" ; --# notpresent
    VPB (Imper Sg P2) => fr_ + "ege" ;
    VPB (Imper Sg P3) => fr_ + "ija" ;
    VPB (Imper Pl P1) => fr_ + "ijamos" ;
    VPB (Imper Pl P2) => fr_ + "igi" ;
    VPB (Imper Pl P3) => fr_ + "ijam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper divergir_64 : Str -> Verbum = \divergir ->
  let div_ = Predef.tk 5 divergir in
 {s = table {
    VI Infn => div_ + "ergir" ;
    VI Ger => div_ + "ergindo" ;
    VI Part => div_ + "ergido" ;
    VPB (Pres Ind Sg P1) => div_ + "irjo" ;
    VPB (Pres Ind Sg P2) => div_ + "erges" ;
    VPB (Pres Ind Sg P3) => div_ + "erge" ;
    VPB (Pres Ind Pl P1) => div_ + "ergimos" ;
    VPB (Pres Ind Pl P2) => div_ + "ergis" ;
    VPB (Pres Ind Pl P3) => div_ + "ergem" ;
    VPB (Pres Sub Sg P1) => div_ + "irja" ;
    VPB (Pres Sub Sg P2) => div_ + "irjas" ;
    VPB (Pres Sub Sg P3) => div_ + "irja" ;
    VPB (Pres Sub Pl P1) => div_ + "irjamos" ;
    VPB (Pres Sub Pl P2) => div_ + "irjais" ;
    VPB (Pres Sub Pl P3) => div_ + "irjam" ;
    VPB (PretI Ind Sg P1) => div_ + "ergia" ; --# notpresent
    VPB (PretI Ind Sg P2) => div_ + "ergias" ; --# notpresent
    VPB (PretI Ind Sg P3) => div_ + "ergia" ; --# notpresent
    VPB (PretI Ind Pl P1) => div_ + "ergíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => div_ + "ergíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => div_ + "ergiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => div_ + "ergisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => div_ + "ergisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => div_ + "ergisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => div_ + "ergíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => div_ + "ergísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => div_ + "ergissem" ; --# notpresent
    VPB (MQPerf Sg P1) => div_ + "ergira" ; --# notpresent
    VPB (MQPerf Sg P2) => div_ + "ergiras" ; --# notpresent
    VPB (MQPerf Sg P3) => div_ + "ergira" ; --# notpresent
    VPB (MQPerf Pl P1) => div_ + "ergíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => div_ + "ergíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => div_ + "ergiram" ; --# notpresent
    VPB (PretP Sg P1) => div_ + "ergi" ; --# notpresent
    VPB (PretP Sg P2) => div_ + "ergiste" ; --# notpresent
    VPB (PretP Sg P3) => div_ + "ergiu" ; --# notpresent
    VPB (PretP Pl P1) => div_ + "ergimos" ; --# notpresent
    VPB (PretP Pl P2) => div_ + "ergistes" ; --# notpresent
    VPB (PretP Pl P3) => div_ + "ergiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => div_ + "ergirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => div_ + "ergirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => div_ + "ergirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => div_ + "ergiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => div_ + "ergireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => div_ + "ergirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => div_ + "ergir" ; --# notpresent
    VPB (Fut Sub Sg P2) => div_ + "ergires" ; --# notpresent
    VPB (Fut Sub Sg P3) => div_ + "ergir" ; --# notpresent
    VPB (Fut Sub Pl P1) => div_ + "ergirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => div_ + "ergirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => div_ + "ergirem" ; --# notpresent
    VPB (Cond Sg P1) => div_ + "ergiria" ; --# notpresent
    VPB (Cond Sg P2) => div_ + "ergirias" ; --# notpresent
    VPB (Cond Sg P3) => div_ + "ergiria" ; --# notpresent
    VPB (Cond Pl P1) => div_ + "ergiríamos" ; --# notpresent
    VPB (Cond Pl P2) => div_ + "ergiríeis" ; --# notpresent
    VPB (Cond Pl P3) => div_ + "ergiriam" ; --# notpresent
    VPB (Imper Sg P2) => div_ + "erge" ;
    VPB (Imper Sg P3) => div_ + "irja" ;
    VPB (Imper Pl P1) => div_ + "irjamos" ;
    VPB (Imper Pl P2) => div_ + "ergi" ;
    VPB (Imper Pl P3) => div_ + "irjam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper refletir_65 : Str -> Verbum = \refletir ->
  let refle_ = Predef.tk 3 refletir in
 {s = table {
    VI Infn => refle_ + vars "tir"  "ctir" ;
    VI Ger => refle_ + vars "tindo"  "ctindo" ;
    VI Part => refle_ + vars "tido"  "ctido" ;
    VPB (Pres Ind Sg P1) => refle_ + "to" ;
    VPB (Pres Ind Sg P2) => refle_ + vars "tes"  "ctes" ;
    VPB (Pres Ind Sg P3) => refle_ + vars "te"  "cte" ;
    VPB (Pres Ind Pl P1) => refle_ + vars "timos"  "ctimos" ;
    VPB (Pres Ind Pl P2) => refle_ + vars "tis"  "ctis" ;
    VPB (Pres Ind Pl P3) => refle_ + vars "tem"  "ctem" ;
    VPB (Pres Sub Sg P1) => refle_ + "ta" ;
    VPB (Pres Sub Sg P2) => refle_ + "tas" ;
    VPB (Pres Sub Sg P3) => refle_ + "ta" ;
    VPB (Pres Sub Pl P1) => refle_ + "tamos" ;
    VPB (Pres Sub Pl P2) => refle_ + "tais" ;
    VPB (Pres Sub Pl P3) => refle_ + "tam" ;
    VPB (PretI Ind Sg P1) => refle_ + vars "tia"  "ctia" ; --# notpresent
    VPB (PretI Ind Sg P2) => refle_ + vars "tias"  "ctias" ; --# notpresent
    VPB (PretI Ind Sg P3) => refle_ + vars "tia"  "ctia" ; --# notpresent
    VPB (PretI Ind Pl P1) => refle_ + vars "tíamos"  "ctíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => refle_ + vars "tíeis"  "ctíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => refle_ + vars "tiam"  "ctiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => refle_ + vars "tisse"  "ctisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => refle_ + vars "tisses"  "ctisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => refle_ + vars "tisse"  "ctisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => refle_ + vars "tíssemos"  "ctíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => refle_ + vars "tísseis"  "ctísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => refle_ + vars "tissem"  "ctissem" ; --# notpresent
    VPB (MQPerf Sg P1) => refle_ + vars "tira"  "ctira" ; --# notpresent
    VPB (MQPerf Sg P2) => refle_ + vars "tiras"  "ctiras" ; --# notpresent
    VPB (MQPerf Sg P3) => refle_ + vars "tira"  "ctira" ; --# notpresent
    VPB (MQPerf Pl P1) => refle_ + vars "tíramos"  "ctíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => refle_ + vars "tíreis"  "ctíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => refle_ + vars "tiram"  "ctiram" ; --# notpresent
    VPB (PretP Sg P1) => refle_ + vars "ti"  "cti" ; --# notpresent
    VPB (PretP Sg P2) => refle_ + vars "tiste"  "ctiste" ; --# notpresent
    VPB (PretP Sg P3) => refle_ + vars "tiu"  "ctiu" ; --# notpresent
    VPB (PretP Pl P1) => refle_ + vars "timos"  "ctimos" ; --# notpresent
    VPB (PretP Pl P2) => refle_ + vars "tistes"  "ctistes" ; --# notpresent
    VPB (PretP Pl P3) => refle_ + vars "tiram"  "ctiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => refle_ + vars "tirei"  "ctirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => refle_ + vars "tirás"  "ctirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => refle_ + vars "tirá"  "ctirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => refle_ + vars "tiremos"  "ctiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => refle_ + vars "tireis"  "ctireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => refle_ + vars "tirão"  "ctirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => refle_ + vars "tir"  "ctir" ; --# notpresent
    VPB (Fut Sub Sg P2) => refle_ + vars "tires"  "ctires" ; --# notpresent
    VPB (Fut Sub Sg P3) => refle_ + vars "tir"  "ctir" ; --# notpresent
    VPB (Fut Sub Pl P1) => refle_ + vars "tirmos"  "ctirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => refle_ + vars "tirdes"  "ctirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => refle_ + vars "tirem"  "ctirem" ; --# notpresent
    VPB (Cond Sg P1) => refle_ + vars "tiria"  "ctiria" ; --# notpresent
    VPB (Cond Sg P2) => refle_ + vars "tirias"  "ctirias" ; --# notpresent
    VPB (Cond Sg P3) => refle_ + vars "tiria"  "ctiria" ; --# notpresent
    VPB (Cond Pl P1) => refle_ + vars "tiríamos"  "ctiríamos" ; --# notpresent
    VPB (Cond Pl P2) => refle_ + vars "tiríeis"  "ctiríeis" ; --# notpresent
    VPB (Cond Pl P3) => refle_ + vars "tiriam"  "ctiriam" ; --# notpresent
    VPB (Imper Sg P2) => refle_ + vars "te"  "cte" ;
    VPB (Imper Sg P3) => refle_ + "ta" ;
    VPB (Imper Pl P1) => refle_ + "tamos" ;
    VPB (Imper Pl P2) => refle_ + vars "ti"  "cti" ;
    VPB (Imper Pl P3) => refle_ + "tram" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ir_66 : Str -> Verbum = \ir ->
  let x_ = Predef.tk 2 ir in
 {s = table {
    VI Infn => x_ + "ir" ;
    VI Ger => x_ + "indo" ;
    VI Part => x_ + "ido" ;
    VPB (Pres Ind Sg P1) => x_ + "vou" ;
    VPB (Pres Ind Sg P2) => x_ + "vais" ;
    VPB (Pres Ind Sg P3) => x_ + "vai" ;
    VPB (Pres Ind Pl P1) => x_ + vars "vamos"  "imos" ;
    VPB (Pres Ind Pl P2) => x_ + vars "ides"  "vades" ;
    VPB (Pres Ind Pl P3) => x_ + "vão" ;
    VPB (Pres Sub Sg P1) => x_ + "vá" ;
    VPB (Pres Sub Sg P2) => x_ + "vás" ;
    VPB (Pres Sub Sg P3) => x_ + "vá" ;
    VPB (Pres Sub Pl P1) => x_ + "vamos" ;
    VPB (Pres Sub Pl P2) => x_ + "vades" ;
    VPB (Pres Sub Pl P3) => x_ + "vão" ;
    VPB (PretI Ind Sg P1) => x_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => x_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => x_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => x_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => x_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => x_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => x_ + "fosse" ; --# notpresent
    VPB (PretI Sub Sg P2) => x_ + "fosses" ; --# notpresent
    VPB (PretI Sub Sg P3) => x_ + "fosse" ; --# notpresent
    VPB (PretI Sub Pl P1) => x_ + "fôssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => x_ + "fôsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => x_ + "fossem" ; --# notpresent
    VPB (MQPerf Sg P1) => x_ + "foram" ; --# notpresent
    VPB (MQPerf Sg P2) => x_ + "foras" ; --# notpresent
    VPB (MQPerf Sg P3) => x_ + "fora" ; --# notpresent
    VPB (MQPerf Pl P1) => x_ + "fôramos" ; --# notpresent
    VPB (MQPerf Pl P2) => x_ + "fôreis" ; --# notpresent
    VPB (MQPerf Pl P3) => x_ + "foram" ; --# notpresent
    VPB (PretP Sg P1) => x_ + "fui" ; --# notpresent
    VPB (PretP Sg P2) => x_ + "foste" ; --# notpresent
    VPB (PretP Sg P3) => x_ + "foi" ; --# notpresent
    VPB (PretP Pl P1) => x_ + "fomos" ; --# notpresent
    VPB (PretP Pl P2) => x_ + "fostes" ; --# notpresent
    VPB (PretP Pl P3) => x_ + "foram" ; --# notpresent
    VPB (Fut Ind Sg P1) => x_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => x_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => x_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => x_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => x_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => x_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => x_ + "for" ; --# notpresent
    VPB (Fut Sub Sg P2) => x_ + "fores" ; --# notpresent
    VPB (Fut Sub Sg P3) => x_ + "for" ; --# notpresent
    VPB (Fut Sub Pl P1) => x_ + "formos" ; --# notpresent
    VPB (Fut Sub Pl P2) => x_ + "fordes" ; --# notpresent
    VPB (Fut Sub Pl P3) => x_ + "forem" ; --# notpresent
    VPB (Cond Sg P1) => x_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => x_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => x_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => x_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => x_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => x_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => x_ + "vai" ;
    VPB (Imper Sg P3) => x_ + "vá" ;
    VPB (Imper Pl P1) => x_ + "vamos" ;
    VPB (Imper Pl P2) => x_ + "ide" ;
    VPB (Imper Pl P3) => x_ + "vão" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper vir_67 : Str -> Verbum = \vir ->
  let v_ = Predef.tk 2 vir in
 {s = table {
    VI Infn => v_ + "ir" ;
    VI Ger => v_ + "indo" ;
    VI Part => v_ + "indo" ;
    VPB (Pres Ind Sg P1) => v_ + "enho" ;
    VPB (Pres Ind Sg P2) => v_ + "ens" ;
    VPB (Pres Ind Sg P3) => v_ + "em" ;
    VPB (Pres Ind Pl P1) => v_ + "imos" ;
    VPB (Pres Ind Pl P2) => v_ + "indes" ;
    VPB (Pres Ind Pl P3) => v_ + "êm" ;
    VPB (Pres Sub Sg P1) => v_ + "enha" ;
    VPB (Pres Sub Sg P2) => v_ + "enhas" ;
    VPB (Pres Sub Sg P3) => v_ + "enha" ;
    VPB (Pres Sub Pl P1) => v_ + "enhamos" ;
    VPB (Pres Sub Pl P2) => v_ + "enhais" ;
    VPB (Pres Sub Pl P3) => v_ + "enham" ;
    VPB (PretI Ind Sg P1) => v_ + "inha" ; --# notpresent
    VPB (PretI Ind Sg P2) => v_ + "inhas" ; --# notpresent
    VPB (PretI Ind Sg P3) => v_ + "inha" ; --# notpresent
    VPB (PretI Ind Pl P1) => v_ + "ínhamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => v_ + "ínheis" ; --# notpresent
    VPB (PretI Ind Pl P3) => v_ + "inham" ; --# notpresent
    VPB (PretI Sub Sg P1) => v_ + "iesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => v_ + "iesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => v_ + "iesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => v_ + "iéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => v_ + "iésseos" ; --# notpresent
    VPB (PretI Sub Pl P3) => v_ + "iessem" ; --# notpresent
    VPB (MQPerf Sg P1) => v_ + "iera" ; --# notpresent
    VPB (MQPerf Sg P2) => v_ + "ieras" ; --# notpresent
    VPB (MQPerf Sg P3) => v_ + "iera" ; --# notpresent
    VPB (MQPerf Pl P1) => v_ + "iéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => v_ + "iéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => v_ + "ieram" ; --# notpresent
    VPB (PretP Sg P1) => v_ + "im" ; --# notpresent
    VPB (PretP Sg P2) => v_ + "ieste" ; --# notpresent
    VPB (PretP Sg P3) => v_ + "eio" ; --# notpresent
    VPB (PretP Pl P1) => v_ + "iemos" ; --# notpresent
    VPB (PretP Pl P2) => v_ + "iestes" ; --# notpresent
    VPB (PretP Pl P3) => v_ + "ieram" ; --# notpresent
    VPB (Fut Ind Sg P1) => v_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => v_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => v_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => v_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => v_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => v_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => v_ + "ier" ; --# notpresent
    VPB (Fut Sub Sg P2) => v_ + "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => v_ + "ier" ; --# notpresent
    VPB (Fut Sub Pl P1) => v_ + "iermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => v_ + "ierdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => v_ + "ierem" ; --# notpresent
    VPB (Cond Sg P1) => v_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => v_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => v_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => v_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => v_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => v_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => v_ + "em" ;
    VPB (Imper Sg P3) => v_ + "enha" ;
    VPB (Imper Pl P1) => v_ + "enhamos" ;
    VPB (Imper Pl P2) => v_ + "inde" ;
    VPB (Imper Pl P3) => v_ + "enham" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper sair_68 : Str -> Verbum = \sair ->
  let sa_ = Predef.tk 2 sair in
 {s = table {
    VI Infn => sa_ + "ir" ;
    VI Ger => sa_ + "indo" ;
    VI Part => sa_ + "ído" ;
    VPB (Pres Ind Sg P1) => sa_ + "io" ;
    VPB (Pres Ind Sg P2) => sa_ + "is" ;
    VPB (Pres Ind Sg P3) => sa_ + "i" ;
    VPB (Pres Ind Pl P1) => sa_ + "ímos" ;
    VPB (Pres Ind Pl P2) => sa_ + "ís" ;
    VPB (Pres Ind Pl P3) => sa_ + "em" ;
    VPB (Pres Sub Sg P1) => sa_ + "ia" ;
    VPB (Pres Sub Sg P2) => sa_ + "ias" ;
    VPB (Pres Sub Sg P3) => sa_ + "ia" ;
    VPB (Pres Sub Pl P1) => sa_ + "iamos" ;
    VPB (Pres Sub Pl P2) => sa_ + "iais" ;
    VPB (Pres Sub Pl P3) => sa_ + "iam" ;
    VPB (PretI Ind Sg P1) => sa_ + "ía" ; --# notpresent
    VPB (PretI Ind Sg P2) => sa_ + "ías" ; --# notpresent
    VPB (PretI Ind Sg P3) => sa_ + "ía" ; --# notpresent
    VPB (PretI Ind Pl P1) => sa_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => sa_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => sa_ + "íam" ; --# notpresent
    VPB (PretI Sub Sg P1) => sa_ + "ísse" ; --# notpresent
    VPB (PretI Sub Sg P2) => sa_ + "ísses" ; --# notpresent
    VPB (PretI Sub Sg P3) => sa_ + "ísse" ; --# notpresent
    VPB (PretI Sub Pl P1) => sa_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => sa_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => sa_ + "íssem" ; --# notpresent
    VPB (MQPerf Sg P1) => sa_ + "íra" ; --# notpresent
    VPB (MQPerf Sg P2) => sa_ + "íras" ; --# notpresent
    VPB (MQPerf Sg P3) => sa_ + "íra" ; --# notpresent
    VPB (MQPerf Pl P1) => sa_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => sa_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => sa_ + "íram" ; --# notpresent
    VPB (PretP Sg P1) => sa_ + "í" ; --# notpresent
    VPB (PretP Sg P2) => sa_ + "íste" ; --# notpresent
    VPB (PretP Sg P3) => sa_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => sa_ + "ímos" ; --# notpresent
    VPB (PretP Pl P2) => sa_ + "ístes" ; --# notpresent
    VPB (PretP Pl P3) => sa_ + "íram" ; --# notpresent
    VPB (Fut Ind Sg P1) => sa_ + "irirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => sa_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => sa_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => sa_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => sa_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => sa_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => sa_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => sa_ + "íres" ; --# notpresent
    VPB (Fut Sub Sg P3) => sa_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => sa_ + "írmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => sa_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => sa_ + nonExist ; --# notpresent
    VPB (Cond Sg P1) => sa_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => sa_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => sa_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => sa_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => sa_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => sa_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => sa_ + "i" ;
    VPB (Imper Sg P3) => sa_ + "ia" ;
    VPB (Imper Pl P1) => sa_ + "iamos" ;
    VPB (Imper Pl P2) => sa_ + "i" ;
    VPB (Imper Pl P3) => sa_ + "iam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper rir_69 : Str -> Verbum = \rir ->
  let ri_ = Predef.tk 1 rir in
 {s = table {
    VI Infn => ri_ + "r" ;
    VI Ger => ri_ + "ndo" ;
    VI Part => ri_ + "do" ;
    VPB (Pres Ind Sg P1) => ri_ + "o" ;
    VPB (Pres Ind Sg P2) => ri_ + "s" ;
    VPB (Pres Ind Sg P3) => ri_ + "" ;
    VPB (Pres Ind Pl P1) => ri_ + "mos" ;
    VPB (Pres Ind Pl P2) => ri_ + "des" ;
    VPB (Pres Ind Pl P3) => ri_ + "em" ;
    VPB (Pres Sub Sg P1) => ri_ + "a" ;
    VPB (Pres Sub Sg P2) => ri_ + "as" ;
    VPB (Pres Sub Sg P3) => ri_ + "a" ;
    VPB (Pres Sub Pl P1) => ri_ + "amos" ;
    VPB (Pres Sub Pl P2) => ri_ + "ais" ;
    VPB (Pres Sub Pl P3) => ri_ + "am" ;
    VPB (PretI Ind Sg P1) => ri_ + "a" ; --# notpresent
    VPB (PretI Ind Sg P2) => ri_ + "as" ; --# notpresent
    VPB (PretI Ind Sg P3) => ri_ + "a" ; --# notpresent
    VPB (PretI Ind Pl P1) => ri_ + "amos" ; --# notpresent
    VPB (PretI Ind Pl P2) => ri_ + "eis" ; --# notpresent
    VPB (PretI Ind Pl P3) => ri_ + "am" ; --# notpresent
    VPB (PretI Sub Sg P1) => ri_ + "sse" ; --# notpresent
    VPB (PretI Sub Sg P2) => ri_ + "sses" ; --# notpresent
    VPB (PretI Sub Sg P3) => ri_ + "sse" ; --# notpresent
    VPB (PretI Sub Pl P1) => ri_ + "ssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => ri_ + "sseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => ri_ + "ssem" ; --# notpresent
    VPB (MQPerf Sg P1) => ri_ + "ra" ; --# notpresent
    VPB (MQPerf Sg P2) => ri_ + "ras" ; --# notpresent
    VPB (MQPerf Sg P3) => ri_ + "ra" ; --# notpresent
    VPB (MQPerf Pl P1) => ri_ + "ramos" ; --# notpresent
    VPB (MQPerf Pl P2) => ri_ + "reis" ; --# notpresent
    VPB (MQPerf Pl P3) => ri_ + "ram" ; --# notpresent
    VPB (PretP Sg P1) => ri_ + "" ; --# notpresent
    VPB (PretP Sg P2) => ri_ + "ste" ; --# notpresent
    VPB (PretP Sg P3) => ri_ + "u" ; --# notpresent
    VPB (PretP Pl P1) => ri_ + "mos" ; --# notpresent
    VPB (PretP Pl P2) => ri_ + "stes" ; --# notpresent
    VPB (PretP Pl P3) => ri_ + "ram" ; --# notpresent
    VPB (Fut Ind Sg P1) => ri_ + "rei" ; --# notpresent
    VPB (Fut Ind Sg P2) => ri_ + "rás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ri_ + "rá" ; --# notpresent
    VPB (Fut Ind Pl P1) => ri_ + "remos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ri_ + "reis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ri_ + "rão" ; --# notpresent
    VPB (Fut Sub Sg P1) => ri_ + "r" ; --# notpresent
    VPB (Fut Sub Sg P2) => ri_ + "res" ; --# notpresent
    VPB (Fut Sub Sg P3) => ri_ + "r" ; --# notpresent
    VPB (Fut Sub Pl P1) => ri_ + "rmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ri_ + "rdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => ri_ + "rem" ; --# notpresent
    VPB (Cond Sg P1) => ri_ + "ria" ; --# notpresent
    VPB (Cond Sg P2) => ri_ + "rias" ; --# notpresent
    VPB (Cond Sg P3) => ri_ + "ria" ; --# notpresent
    VPB (Cond Pl P1) => ri_ + "ríamos" ; --# notpresent
    VPB (Cond Pl P2) => ri_ + "ríeis" ; --# notpresent
    VPB (Cond Pl P3) => ri_ + "riam" ; --# notpresent
    VPB (Imper Sg P2) => ri_ + "" ;
    VPB (Imper Sg P3) => ri_ + "a" ;
    VPB (Imper Pl P1) => ri_ + "amos" ;
    VPB (Imper Pl P2) => ri_ + "de" ;
    VPB (Imper Pl P3) => ri_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper pedir_70 : Str -> Verbum = \pedir ->
  let pe_ = Predef.tk 3 pedir in
 {s = table {
    VI Infn => pe_ + "dir" ;
    VI Ger => pe_ + "dindo" ;
    VI Part => pe_ + "dido" ;
    VPB (Pres Ind Sg P1) => pe_ + "ço" ;
    VPB (Pres Ind Sg P2) => pe_ + "des" ;
    VPB (Pres Ind Sg P3) => pe_ + "de" ;
    VPB (Pres Ind Pl P1) => pe_ + "dimos" ;
    VPB (Pres Ind Pl P2) => pe_ + "dis" ;
    VPB (Pres Ind Pl P3) => pe_ + "dem" ;
    VPB (Pres Sub Sg P1) => pe_ + "ça" ;
    VPB (Pres Sub Sg P2) => pe_ + "ças" ;
    VPB (Pres Sub Sg P3) => pe_ + "ça" ;
    VPB (Pres Sub Pl P1) => pe_ + "çamos" ;
    VPB (Pres Sub Pl P2) => pe_ + "çais" ;
    VPB (Pres Sub Pl P3) => pe_ + "çam" ;
    VPB (PretI Ind Sg P1) => pe_ + "dia" ; --# notpresent
    VPB (PretI Ind Sg P2) => pe_ + "dias" ; --# notpresent
    VPB (PretI Ind Sg P3) => pe_ + "dia" ; --# notpresent
    VPB (PretI Ind Pl P1) => pe_ + "díamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => pe_ + "díeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => pe_ + "diam" ; --# notpresent
    VPB (PretI Sub Sg P1) => pe_ + "disse" ; --# notpresent
    VPB (PretI Sub Sg P2) => pe_ + "disses" ; --# notpresent
    VPB (PretI Sub Sg P3) => pe_ + "disse" ; --# notpresent
    VPB (PretI Sub Pl P1) => pe_ + "díssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => pe_ + "dísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => pe_ + "dissem" ; --# notpresent
    VPB (MQPerf Sg P1) => pe_ + "dira" ; --# notpresent
    VPB (MQPerf Sg P2) => pe_ + "diras" ; --# notpresent
    VPB (MQPerf Sg P3) => pe_ + "dira" ; --# notpresent
    VPB (MQPerf Pl P1) => pe_ + "díramos" ; --# notpresent
    VPB (MQPerf Pl P2) => pe_ + "díreis" ; --# notpresent
    VPB (MQPerf Pl P3) => pe_ + "diram" ; --# notpresent
    VPB (PretP Sg P1) => pe_ + "di" ; --# notpresent
    VPB (PretP Sg P2) => pe_ + "diste" ; --# notpresent
    VPB (PretP Sg P3) => pe_ + "diu" ; --# notpresent
    VPB (PretP Pl P1) => pe_ + "dimos" ; --# notpresent
    VPB (PretP Pl P2) => pe_ + "distes" ; --# notpresent
    VPB (PretP Pl P3) => pe_ + "diram" ; --# notpresent
    VPB (Fut Ind Sg P1) => pe_ + "direi" ; --# notpresent
    VPB (Fut Ind Sg P2) => pe_ + "dirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => pe_ + "dirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => pe_ + "diremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => pe_ + "direis" ; --# notpresent
    VPB (Fut Ind Pl P3) => pe_ + "dirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => pe_ + "dir" ; --# notpresent
    VPB (Fut Sub Sg P2) => pe_ + "dires" ; --# notpresent
    VPB (Fut Sub Sg P3) => pe_ + "dir" ; --# notpresent
    VPB (Fut Sub Pl P1) => pe_ + "dirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => pe_ + "dirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => pe_ + "direm" ; --# notpresent
    VPB (Cond Sg P1) => pe_ + "diria" ; --# notpresent
    VPB (Cond Sg P2) => pe_ + "dirias" ; --# notpresent
    VPB (Cond Sg P3) => pe_ + "diria" ; --# notpresent
    VPB (Cond Pl P1) => pe_ + "diríamos" ; --# notpresent
    VPB (Cond Pl P2) => pe_ + "diríeis" ; --# notpresent
    VPB (Cond Pl P3) => pe_ + "diriam" ; --# notpresent
    VPB (Imper Sg P2) => pe_ + "de" ;
    VPB (Imper Sg P3) => pe_ + "ça" ;
    VPB (Imper Pl P1) => pe_ + "çamos" ;
    VPB (Imper Pl P2) => pe_ + "di" ;
    VPB (Imper Pl P3) => pe_ + "çam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ouvir_71 : Str -> Verbum = \ouvir ->
  let ou_ = Predef.tk 3 ouvir in
 {s = table {
    VI Infn => ou_ + "vir" ;
    VI Ger => ou_ + "vindo" ;
    VI Part => ou_ + "vido" ;
    VPB (Pres Ind Sg P1) => ou_ + "ço" ;
    VPB (Pres Ind Sg P2) => ou_ + "ves" ;
    VPB (Pres Ind Sg P3) => ou_ + "ve" ;
    VPB (Pres Ind Pl P1) => ou_ + "vimos" ;
    VPB (Pres Ind Pl P2) => ou_ + "vis" ;
    VPB (Pres Ind Pl P3) => ou_ + "vem" ;
    VPB (Pres Sub Sg P1) => ou_ + "ça" ;
    VPB (Pres Sub Sg P2) => ou_ + "ças" ;
    VPB (Pres Sub Sg P3) => ou_ + "ça" ;
    VPB (Pres Sub Pl P1) => ou_ + "çamos" ;
    VPB (Pres Sub Pl P2) => ou_ + "çais" ;
    VPB (Pres Sub Pl P3) => ou_ + "çam" ;
    VPB (PretI Ind Sg P1) => ou_ + "via" ; --# notpresent
    VPB (PretI Ind Sg P2) => ou_ + "vias" ; --# notpresent
    VPB (PretI Ind Sg P3) => ou_ + "via" ; --# notpresent
    VPB (PretI Ind Pl P1) => ou_ + "víamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => ou_ + "víeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => ou_ + "viam" ; --# notpresent
    VPB (PretI Sub Sg P1) => ou_ + "visse" ; --# notpresent
    VPB (PretI Sub Sg P2) => ou_ + "visses" ; --# notpresent
    VPB (PretI Sub Sg P3) => ou_ + "visse" ; --# notpresent
    VPB (PretI Sub Pl P1) => ou_ + "víssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => ou_ + "vísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => ou_ + "vissem" ; --# notpresent
    VPB (MQPerf Sg P1) => ou_ + "vira" ; --# notpresent
    VPB (MQPerf Sg P2) => ou_ + "viras" ; --# notpresent
    VPB (MQPerf Sg P3) => ou_ + "vira" ; --# notpresent
    VPB (MQPerf Pl P1) => ou_ + "viríamos" ; --# notpresent
    VPB (MQPerf Pl P2) => ou_ + "viríeis" ; --# notpresent
    VPB (MQPerf Pl P3) => ou_ + "viram" ; --# notpresent
    VPB (PretP Sg P1) => ou_ + "vi" ; --# notpresent
    VPB (PretP Sg P2) => ou_ + "viste" ; --# notpresent
    VPB (PretP Sg P3) => ou_ + "viu" ; --# notpresent
    VPB (PretP Pl P1) => ou_ + "vimos" ; --# notpresent
    VPB (PretP Pl P2) => ou_ + "vistes" ; --# notpresent
    VPB (PretP Pl P3) => ou_ + "viram" ; --# notpresent
    VPB (Fut Ind Sg P1) => ou_ + "virei" ; --# notpresent
    VPB (Fut Ind Sg P2) => ou_ + "virás" ; --# notpresent
    VPB (Fut Ind Sg P3) => ou_ + "virá" ; --# notpresent
    VPB (Fut Ind Pl P1) => ou_ + "viremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => ou_ + "vireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => ou_ + "virão" ; --# notpresent
    VPB (Fut Sub Sg P1) => ou_ + "vir" ; --# notpresent
    VPB (Fut Sub Sg P2) => ou_ + "vires" ; --# notpresent
    VPB (Fut Sub Sg P3) => ou_ + "vir" ; --# notpresent
    VPB (Fut Sub Pl P1) => ou_ + "virmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => ou_ + "virdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => ou_ + "virem" ; --# notpresent
    VPB (Cond Sg P1) => ou_ + "viria" ; --# notpresent
    VPB (Cond Sg P2) => ou_ + "virias" ; --# notpresent
    VPB (Cond Sg P3) => ou_ + "viria" ; --# notpresent
    VPB (Cond Pl P1) => ou_ + "viríamos" ; --# notpresent
    VPB (Cond Pl P2) => ou_ + "viríeis" ; --# notpresent
    VPB (Cond Pl P3) => ou_ + "viriam" ; --# notpresent
    VPB (Imper Sg P2) => ou_ + "ve" ;
    VPB (Imper Sg P3) => ou_ + "ça" ;
    VPB (Imper Pl P1) => ou_ + "çamos" ;
    VPB (Imper Pl P2) => ou_ + "vi" ;
    VPB (Imper Pl P3) => ou_ + "çam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper traduzir_72 : Str -> Verbum = \traduzir ->
  let traduz_ = Predef.tk 2 traduzir in
 {s = table {
    VI Infn => traduz_ + "ir" ;
    VI Ger => traduz_ + "indo" ;
    VI Part => traduz_ + "ido" ;
    VPB (Pres Ind Sg P1) => traduz_ + "o" ;
    VPB (Pres Ind Sg P2) => traduz_ + "es" ;
    VPB (Pres Ind Sg P3) => traduz_ + "" ;
    VPB (Pres Ind Pl P1) => traduz_ + "imos" ;
    VPB (Pres Ind Pl P2) => traduz_ + "is" ;
    VPB (Pres Ind Pl P3) => traduz_ + "em" ;
    VPB (Pres Sub Sg P1) => traduz_ + "a" ;
    VPB (Pres Sub Sg P2) => traduz_ + "as" ;
    VPB (Pres Sub Sg P3) => traduz_ + "a" ;
    VPB (Pres Sub Pl P1) => traduz_ + "amos" ;
    VPB (Pres Sub Pl P2) => traduz_ + "ais" ;
    VPB (Pres Sub Pl P3) => traduz_ + "am" ;
    VPB (PretI Ind Sg P1) => traduz_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => traduz_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => traduz_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => traduz_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => traduz_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => traduz_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => traduz_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => traduz_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => traduz_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => traduz_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => traduz_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => traduz_ + "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => traduz_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => traduz_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => traduz_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => traduz_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => traduz_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => traduz_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => traduz_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => traduz_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => traduz_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => traduz_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => traduz_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => traduz_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => traduz_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => traduz_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => traduz_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => traduz_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => traduz_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => traduz_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => traduz_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => traduz_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => traduz_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => traduz_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => traduz_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => traduz_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => traduz_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => traduz_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => traduz_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => traduz_ + "íriamos" ; --# notpresent
    VPB (Cond Pl P2) => traduz_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => traduz_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => traduz_ + vars ""  "e" ;
    VPB (Imper Sg P3) => traduz_ + "a" ;
    VPB (Imper Pl P1) => traduz_ + "amos" ;
    VPB (Imper Pl P2) => traduz_ + "i" ;
    VPB (Imper Pl P3) => traduz_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper distribuir_73 : Str -> Verbum = \distribuir ->
  let distrib_ = Predef.tk 3 distribuir in
 {s = table {
    VI Infn => distrib_ + "uir" ;
    VI Ger => distrib_ + "uindo" ;
    VI Part => distrib_ + "uído" ;
    VPB (Pres Ind Sg P1) => distrib_ + "uo" ;
    VPB (Pres Ind Sg P2) => distrib_ + "uis" ;
    VPB (Pres Ind Sg P3) => distrib_ + "ui" ;
    VPB (Pres Ind Pl P1) => distrib_ + "uímos" ;
    VPB (Pres Ind Pl P2) => distrib_ + "uís" ;
    VPB (Pres Ind Pl P3) => distrib_ + "uem" ;
    VPB (Pres Sub Sg P1) => distrib_ + "ua" ;
    VPB (Pres Sub Sg P2) => distrib_ + "uas" ;
    VPB (Pres Sub Sg P3) => distrib_ + "ua" ;
    VPB (Pres Sub Pl P1) => distrib_ + "uamos" ;
    VPB (Pres Sub Pl P2) => distrib_ + "uais" ;
    VPB (Pres Sub Pl P3) => distrib_ + "uam" ;
    VPB (PretI Ind Sg P1) => distrib_ + "uía" ; --# notpresent
    VPB (PretI Ind Sg P2) => distrib_ + "uías" ; --# notpresent
    VPB (PretI Ind Sg P3) => distrib_ + "uía" ; --# notpresent
    VPB (PretI Ind Pl P1) => distrib_ + "uíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => distrib_ + "uíais" ; --# notpresent
    VPB (PretI Ind Pl P3) => distrib_ + "uíam" ; --# notpresent
    VPB (PretI Sub Sg P1) => distrib_ + "uísse" ; --# notpresent
    VPB (PretI Sub Sg P2) => distrib_ + "uísses" ; --# notpresent
    VPB (PretI Sub Sg P3) => distrib_ + "uísse" ; --# notpresent
    VPB (PretI Sub Pl P1) => distrib_ + "uíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => distrib_ + "uísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => distrib_ + "uíssem" ; --# notpresent
    VPB (MQPerf Sg P1) => distrib_ + "uíra" ; --# notpresent
    VPB (MQPerf Sg P2) => distrib_ + "uíras" ; --# notpresent
    VPB (MQPerf Sg P3) => distrib_ + "uíra" ; --# notpresent
    VPB (MQPerf Pl P1) => distrib_ + "uíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => distrib_ + "uíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => distrib_ + "uíram" ; --# notpresent
    VPB (PretP Sg P1) => distrib_ + "uí" ; --# notpresent
    VPB (PretP Sg P2) => distrib_ + "uíste" ; --# notpresent
    VPB (PretP Sg P3) => distrib_ + "uiu" ; --# notpresent
    VPB (PretP Pl P1) => distrib_ + "uímos" ; --# notpresent
    VPB (PretP Pl P2) => distrib_ + "uistes" ; --# notpresent
    VPB (PretP Pl P3) => distrib_ + "uiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => distrib_ + "uirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => distrib_ + "uirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => distrib_ + "uirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => distrib_ + "uiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => distrib_ + "uireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => distrib_ + "uirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => distrib_ + "uir" ; --# notpresent
    VPB (Fut Sub Sg P2) => distrib_ + "uíres" ; --# notpresent
    VPB (Fut Sub Sg P3) => distrib_ + "uir" ; --# notpresent
    VPB (Fut Sub Pl P1) => distrib_ + "uirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => distrib_ + "uirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => distrib_ + "uirem" ; --# notpresent
    VPB (Cond Sg P1) => distrib_ + "uiria" ; --# notpresent
    VPB (Cond Sg P2) => distrib_ + "uirias" ; --# notpresent
    VPB (Cond Sg P3) => distrib_ + "uiria" ; --# notpresent
    VPB (Cond Pl P1) => distrib_ + "uiríamos" ; --# notpresent
    VPB (Cond Pl P2) => distrib_ + "uirieis" ; --# notpresent
    VPB (Cond Pl P3) => distrib_ + "uiriam" ; --# notpresent
    VPB (Imper Sg P2) => distrib_ + "ui" ;
    VPB (Imper Sg P3) => distrib_ + "ua" ;
    VPB (Imper Pl P1) => distrib_ + "uamos" ;
    VPB (Imper Pl P2) => distrib_ + "uí" ;
    VPB (Imper Pl P3) => distrib_ + "uam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper destruir_74 : Str -> Verbum = \destruir ->
  let destru_ = Predef.tk 2 destruir in
 {s = table {
    VI Infn => destru_ + "ir" ;
    VI Ger => destru_ + "indo" ;
    VI Part => destru_ + "ído" ;
    VPB (Pres Ind Sg P1) => destru_ + "o" ;
    VPB (Pres Ind Sg P2) => destru_ + vars "is"  "is" ;
    VPB (Pres Ind Sg P3) => destru_ + vars "i"  "i" ;
    VPB (Pres Ind Pl P1) => destru_ + "ímos" ;
    VPB (Pres Ind Pl P2) => destru_ + "ís" ;
    VPB (Pres Ind Pl P3) => destru_ + vars "em"  "em" ;
    VPB (Pres Sub Sg P1) => destru_ + "a" ;
    VPB (Pres Sub Sg P2) => destru_ + "as" ;
    VPB (Pres Sub Sg P3) => destru_ + "a" ;
    VPB (Pres Sub Pl P1) => destru_ + "amos" ;
    VPB (Pres Sub Pl P2) => destru_ + "ais" ;
    VPB (Pres Sub Pl P3) => destru_ + "am" ;
    VPB (PretI Ind Sg P1) => destru_ + "ía" ; --# notpresent
    VPB (PretI Ind Sg P2) => destru_ + "ías" ; --# notpresent
    VPB (PretI Ind Sg P3) => destru_ + "ía" ; --# notpresent
    VPB (PretI Ind Pl P1) => destru_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => destru_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => destru_ + "íam" ; --# notpresent
    VPB (PretI Sub Sg P1) => destru_ + "ísse" ; --# notpresent
    VPB (PretI Sub Sg P2) => destru_ + "ísses" ; --# notpresent
    VPB (PretI Sub Sg P3) => destru_ + "ísse" ; --# notpresent
    VPB (PretI Sub Pl P1) => destru_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => destru_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => destru_ + "íssem" ; --# notpresent
    VPB (MQPerf Sg P1) => destru_ + "íra" ; --# notpresent
    VPB (MQPerf Sg P2) => destru_ + "íras" ; --# notpresent
    VPB (MQPerf Sg P3) => destru_ + "íra" ; --# notpresent
    VPB (MQPerf Pl P1) => destru_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => destru_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => destru_ + "íram" ; --# notpresent
    VPB (PretP Sg P1) => destru_ + "í" ; --# notpresent
    VPB (PretP Sg P2) => destru_ + "íste" ; --# notpresent
    VPB (PretP Sg P3) => destru_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => destru_ + "ímos" ; --# notpresent
    VPB (PretP Pl P2) => destru_ + "ístes" ; --# notpresent
    VPB (PretP Pl P3) => destru_ + "íram" ; --# notpresent
    VPB (Fut Ind Sg P1) => destru_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => destru_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => destru_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => destru_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => destru_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => destru_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => destru_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => destru_ + "íres" ; --# notpresent
    VPB (Fut Sub Sg P3) => destru_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => destru_ + "írmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => destru_ + "írdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => destru_ + "írem" ; --# notpresent
    VPB (Cond Sg P1) => destru_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => destru_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => destru_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => destru_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => destru_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => destru_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => destru_ + vars "i"  "i" ;
    VPB (Imper Sg P3) => destru_ + "a" ;
    VPB (Imper Pl P1) => destru_ + "amos" ;
    VPB (Imper Pl P2) => destru_ + "i" ;
    VPB (Imper Pl P3) => destru_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper arguir_75 : Str -> Verbum = \arguir ->
  let argu_ = Predef.tk 2 arguir in
 {s = table {
    VI Infn => argu_ + "ir" ;
    VI Ger => argu_ + "indo" ;
    VI Part => argu_ + "ido" ;
    VPB (Pres Ind Sg P1) => argu_ + "o" ;
    VPB (Pres Ind Sg P2) => argu_ + "is" ;
    VPB (Pres Ind Sg P3) => argu_ + "i" ;
    VPB (Pres Ind Pl P1) => argu_ + "imos" ;
    VPB (Pres Ind Pl P2) => argu_ + "is" ;
    VPB (Pres Ind Pl P3) => argu_ + "em" ;
    VPB (Pres Sub Sg P1) => argu_ + "a" ;
    VPB (Pres Sub Sg P2) => argu_ + "as" ;
    VPB (Pres Sub Sg P3) => argu_ + "a" ;
    VPB (Pres Sub Pl P1) => argu_ + "amos" ;
    VPB (Pres Sub Pl P2) => argu_ + "ais" ;
    VPB (Pres Sub Pl P3) => argu_ + "am" ;
    VPB (PretI Ind Sg P1) => argu_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => argu_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => argu_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => argu_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => argu_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => argu_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => argu_ + "ísse" ; --# notpresent
    VPB (PretI Sub Sg P2) => argu_ + "ísses" ; --# notpresent
    VPB (PretI Sub Sg P3) => argu_ + "ísse" ; --# notpresent
    VPB (PretI Sub Pl P1) => argu_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => argu_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => argu_ + "íssem" ; --# notpresent
    VPB (MQPerf Sg P1) => argu_ + "íra" ; --# notpresent
    VPB (MQPerf Sg P2) => argu_ + "íras" ; --# notpresent
    VPB (MQPerf Sg P3) => argu_ + "íra" ; --# notpresent
    VPB (MQPerf Pl P1) => argu_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => argu_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => argu_ + "íram" ; --# notpresent
    VPB (PretP Sg P1) => argu_ + "í" ; --# notpresent
    VPB (PretP Sg P2) => argu_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => argu_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => argu_ + "ímos" ; --# notpresent
    VPB (PretP Pl P2) => argu_ + "ístes" ; --# notpresent
    VPB (PretP Pl P3) => argu_ + "íram" ; --# notpresent
    VPB (Fut Ind Sg P1) => argu_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => argu_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => argu_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => argu_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => argu_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => argu_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => argu_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => argu_ + "íres" ; --# notpresent
    VPB (Fut Sub Sg P3) => argu_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => argu_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => argu_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => argu_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => argu_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => argu_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => argu_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => argu_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => argu_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => argu_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => argu_ + "i" ;
    VPB (Imper Sg P3) => argu_ + "a" ;
    VPB (Imper Pl P1) => argu_ + "amos" ;
    VPB (Imper Pl P2) => argu_ + "i" ;
    VPB (Imper Pl P3) => argu_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper reunir_76 : Str -> Verbum = \reunir ->
  let reun_ = Predef.tk 2 reunir in
 {s = table {
    VI Infn => reun_ + "ir" ;
    VI Ger => reun_ + "indo" ;
    VI Part => reun_ + "ido" ;
    VPB (Pres Ind Sg P1) => reun_ + "o" ;
    VPB (Pres Ind Sg P2) => reun_ + "es" ;
    VPB (Pres Ind Sg P3) => reun_ + "e" ;
    VPB (Pres Ind Pl P1) => reun_ + "imos" ;
    VPB (Pres Ind Pl P2) => reun_ + "is" ;
    VPB (Pres Ind Pl P3) => reun_ + "em" ;
    VPB (Pres Sub Sg P1) => reun_ + "a" ;
    VPB (Pres Sub Sg P2) => reun_ + "as" ;
    VPB (Pres Sub Sg P3) => reun_ + "a" ;
    VPB (Pres Sub Pl P1) => reun_ + "amos" ;
    VPB (Pres Sub Pl P2) => reun_ + "ais" ;
    VPB (Pres Sub Pl P3) => reun_ + "am" ;
    VPB (PretI Ind Sg P1) => reun_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => reun_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => reun_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => reun_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => reun_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => reun_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => reun_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => reun_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => reun_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => reun_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => reun_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => reun_ + "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => reun_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => reun_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => reun_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => reun_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => reun_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => reun_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => reun_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => reun_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => reun_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => reun_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => reun_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => reun_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => reun_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => reun_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => reun_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => reun_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => reun_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => reun_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => reun_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => reun_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => reun_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => reun_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => reun_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => reun_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => reun_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => reun_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => reun_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => reun_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => reun_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => reun_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => reun_ + "e" ;
    VPB (Imper Sg P3) => reun_ + "a" ;
    VPB (Imper Pl P1) => reun_ + "amos" ;
    VPB (Imper Pl P2) => reun_ + "i" ;
    VPB (Imper Pl P3) => reun_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper proibir_77 : Str -> Verbum = \proibir ->
  let proib_ = Predef.tk 2 proibir in
 {s = table {
    VI Infn => proib_ + "ir" ;
    VI Ger => proib_ + "indo" ;
    VI Part => proib_ + "ido" ;
    VPB (Pres Ind Sg P1) => proib_ + "o" ;
    VPB (Pres Ind Sg P2) => proib_ + "es" ;
    VPB (Pres Ind Sg P3) => proib_ + "e" ;
    VPB (Pres Ind Pl P1) => proib_ + "imos" ;
    VPB (Pres Ind Pl P2) => proib_ + "is" ;
    VPB (Pres Ind Pl P3) => proib_ + "em" ;
    VPB (Pres Sub Sg P1) => proib_ + "a" ;
    VPB (Pres Sub Sg P2) => proib_ + "as" ;
    VPB (Pres Sub Sg P3) => proib_ + "a" ;
    VPB (Pres Sub Pl P1) => proib_ + "amos" ;
    VPB (Pres Sub Pl P2) => proib_ + "ais" ;
    VPB (Pres Sub Pl P3) => proib_ + "am" ;
    VPB (PretI Ind Sg P1) => proib_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => proib_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => proib_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => proib_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => proib_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => proib_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => proib_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => proib_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => proib_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => proib_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => proib_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => proib_ + "íssem" ; --# notpresent
    VPB (MQPerf Sg P1) => proib_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => proib_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => proib_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => proib_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => proib_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => proib_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => proib_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => proib_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => proib_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => proib_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => proib_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => proib_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => proib_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => proib_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => proib_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => proib_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => proib_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => proib_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => proib_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => proib_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => proib_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => proib_ + "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => proib_ + "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => proib_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => proib_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => proib_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => proib_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => proib_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => proib_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => proib_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => proib_ + "e" ;
    VPB (Imper Sg P3) => proib_ + "a" ;
    VPB (Imper Pl P1) => proib_ + "amos" ;
    VPB (Imper Pl P2) => proib_ + "i" ;
    VPB (Imper Pl P3) => proib_ + "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper imergir_78 : Str -> Verbum = \imergir ->
  let imerg_ = Predef.tk 2 imergir in
 {s = table {
    VI Infn => imerg_ + "ir" ;
    VI Ger => imerg_ + "indo" ;
    VI Part => imerg_ + "ido" ;
    VPB (Pres Ind Sg P1) => imerg_ + nonExist ;
    VPB (Pres Ind Sg P2) => imerg_ + "es" ;
    VPB (Pres Ind Sg P3) => imerg_ + "e" ;
    VPB (Pres Ind Pl P1) => imerg_ + "imos" ;
    VPB (Pres Ind Pl P2) => imerg_ + "is" ;
    VPB (Pres Ind Pl P3) => imerg_ + "em" ;
    VPB (Pres Sub Sg P1) => imerg_ + nonExist ;
    VPB (Pres Sub Sg P2) => imerg_ + nonExist ;
    VPB (Pres Sub Sg P3) => imerg_ + nonExist ;
    VPB (Pres Sub Pl P1) => imerg_ + nonExist ;
    VPB (Pres Sub Pl P2) => imerg_ + nonExist ;
    VPB (Pres Sub Pl P3) => imerg_ + nonExist ;
    VPB (PretI Ind Sg P1) => imerg_ + "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => imerg_ + "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => imerg_ + "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => imerg_ + "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => imerg_ + "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => imerg_ + "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => imerg_ + "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => imerg_ + "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => imerg_ + "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => imerg_ + "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => imerg_ + "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => imerg_ + "íssem" ; --# notpresent
    VPB (MQPerf Sg P1) => imerg_ + "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => imerg_ + "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => imerg_ + "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => imerg_ + "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => imerg_ + "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => imerg_ + "iram" ; --# notpresent
    VPB (PretP Sg P1) => imerg_ + "i" ; --# notpresent
    VPB (PretP Sg P2) => imerg_ + "iste" ; --# notpresent
    VPB (PretP Sg P3) => imerg_ + "iu" ; --# notpresent
    VPB (PretP Pl P1) => imerg_ + "imos" ; --# notpresent
    VPB (PretP Pl P2) => imerg_ + "istes" ; --# notpresent
    VPB (PretP Pl P3) => imerg_ + "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => imerg_ + "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => imerg_ + "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => imerg_ + "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => imerg_ + "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => imerg_ + "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => imerg_ + "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => imerg_ + "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => imerg_ + "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => imerg_ + "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => imerg_ + "írmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => imerg_ + "írdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => imerg_ + "irem" ; --# notpresent
    VPB (Cond Sg P1) => imerg_ + "iria" ; --# notpresent
    VPB (Cond Sg P2) => imerg_ + "irias" ; --# notpresent
    VPB (Cond Sg P3) => imerg_ + "iria" ; --# notpresent
    VPB (Cond Pl P1) => imerg_ + "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => imerg_ + "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => imerg_ + "iriam" ; --# notpresent
    VPB (Imper Sg P2) => imerg_ + "e" ;
    VPB (Imper Sg P3) => imerg_ + nonExist ;
    VPB (Imper Pl P1) => imerg_ + nonExist ;
    VPB (Imper Pl P2) => imerg_ + "i" ;
    VPB (Imper Pl P3) => imerg_ + "it" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper falir_79 : Str -> Verbum = \falir ->
  let fali_ = Predef.tk 1 falir in
 {s = table {
    VI Infn => fali_ + "r" ;
    VI Ger => fali_ + "ndo" ;
    VI Part => fali_ + "do" ;
    VPB (Pres Ind Sg P1) => fali_ + nonExist ;
    VPB (Pres Ind Sg P2) => fali_ + nonExist ;
    VPB (Pres Ind Sg P3) => fali_ + nonExist ;
    VPB (Pres Ind Pl P1) => fali_ + "mos" ;
    VPB (Pres Ind Pl P2) => fali_ + "s" ;
    VPB (Pres Ind Pl P3) => fali_ + nonExist ;
    VPB (Pres Sub Sg P1) => fali_ + nonExist ;
    VPB (Pres Sub Sg P2) => fali_ + nonExist ;
    VPB (Pres Sub Sg P3) => fali_ + nonExist ;
    VPB (Pres Sub Pl P1) => fali_ + nonExist ;
    VPB (Pres Sub Pl P2) => fali_ + nonExist ;
    VPB (Pres Sub Pl P3) => fali_ + nonExist ;
    VPB (PretI Ind Sg P1) => fali_ + "a" ; --# notpresent
    VPB (PretI Ind Sg P2) => fali_ + "as" ; --# notpresent
    VPB (PretI Ind Sg P3) => fali_ + "a" ; --# notpresent
    VPB (PretI Ind Pl P1) => fali_ + "amos" ; --# notpresent
    VPB (PretI Ind Pl P2) => fali_ + "eis" ; --# notpresent
    VPB (PretI Ind Pl P3) => fali_ + "am" ; --# notpresent
    VPB (PretI Sub Sg P1) => fali_ + "sse" ; --# notpresent
    VPB (PretI Sub Sg P2) => fali_ + "sses" ; --# notpresent
    VPB (PretI Sub Sg P3) => fali_ + "sse" ; --# notpresent
    VPB (PretI Sub Pl P1) => fali_ + "ssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => fali_ + "sseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => fali_ + "ssem" ; --# notpresent
    VPB (MQPerf Sg P1) => fali_ + "ra" ; --# notpresent
    VPB (MQPerf Sg P2) => fali_ + "ras" ; --# notpresent
    VPB (MQPerf Sg P3) => fali_ + "ra" ; --# notpresent
    VPB (MQPerf Pl P1) => fali_ + "ramos" ; --# notpresent
    VPB (MQPerf Pl P2) => fali_ + "reis" ; --# notpresent
    VPB (MQPerf Pl P3) => fali_ + "ram" ; --# notpresent
    VPB (PretP Sg P1) => fali_ + "" ; --# notpresent
    VPB (PretP Sg P2) => fali_ + "ste" ; --# notpresent
    VPB (PretP Sg P3) => fali_ + "u" ; --# notpresent
    VPB (PretP Pl P1) => fali_ + "mos" ; --# notpresent
    VPB (PretP Pl P2) => fali_ + "stes" ; --# notpresent
    VPB (PretP Pl P3) => fali_ + "ram" ; --# notpresent
    VPB (Fut Ind Sg P1) => fali_ + "rei" ; --# notpresent
    VPB (Fut Ind Sg P2) => fali_ + "rás" ; --# notpresent
    VPB (Fut Ind Sg P3) => fali_ + "rá" ; --# notpresent
    VPB (Fut Ind Pl P1) => fali_ + "remos" ; --# notpresent
    VPB (Fut Ind Pl P2) => fali_ + "reis" ; --# notpresent
    VPB (Fut Ind Pl P3) => fali_ + "rão" ; --# notpresent
    VPB (Fut Sub Sg P1) => fali_ + "r" ; --# notpresent
    VPB (Fut Sub Sg P2) => fali_ + "res" ; --# notpresent
    VPB (Fut Sub Sg P3) => fali_ + "r" ; --# notpresent
    VPB (Fut Sub Pl P1) => fali_ + "rmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => fali_ + "rdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => fali_ + "rem" ; --# notpresent
    VPB (Cond Sg P1) => fali_ + "ria" ; --# notpresent
    VPB (Cond Sg P2) => fali_ + "rias" ; --# notpresent
    VPB (Cond Sg P3) => fali_ + "ria" ; --# notpresent
    VPB (Cond Pl P1) => fali_ + "ríamos" ; --# notpresent
    VPB (Cond Pl P2) => fali_ + "ríeis" ; --# notpresent
    VPB (Cond Pl P3) => fali_ + "riam" ; --# notpresent
    VPB (Imper Sg P2) => fali_ + nonExist ;
    VPB (Imper Sg P3) => fali_ + nonExist ;
    VPB (Imper Pl P1) => fali_ + nonExist ;
    VPB (Imper Pl P2) => fali_ + "" ;
    VPB (Imper Pl P3) => fali_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper remir_80 : Str -> Verbum = \remir ->
  let remi_ = Predef.tk 1 remir in
 {s = table {
    VI Infn => remi_ + "r" ;
    VI Ger => remi_ + "ndo" ;
    VI Part => remi_ + "do" ;
    VPB (Pres Ind Sg P1) => remi_ + nonExist ;
    VPB (Pres Ind Sg P2) => remi_ + nonExist ;
    VPB (Pres Ind Sg P3) => remi_ + nonExist ;
    VPB (Pres Ind Pl P1) => remi_ + "mos" ;
    VPB (Pres Ind Pl P2) => remi_ + "s" ;
    VPB (Pres Ind Pl P3) => remi_ + nonExist ;
    VPB (Pres Sub Sg P1) => remi_ + nonExist ;
    VPB (Pres Sub Sg P2) => remi_ + nonExist ;
    VPB (Pres Sub Sg P3) => remi_ + nonExist ;
    VPB (Pres Sub Pl P1) => remi_ + nonExist ;
    VPB (Pres Sub Pl P2) => remi_ + nonExist ;
    VPB (Pres Sub Pl P3) => remi_ + nonExist ;
    VPB (PretI Ind Sg P1) => remi_ + "a" ; --# notpresent
    VPB (PretI Ind Sg P2) => remi_ + "as" ; --# notpresent
    VPB (PretI Ind Sg P3) => remi_ + "a" ; --# notpresent
    VPB (PretI Ind Pl P1) => remi_ + "amos" ; --# notpresent
    VPB (PretI Ind Pl P2) => remi_ + "eis" ; --# notpresent
    VPB (PretI Ind Pl P3) => remi_ + "am" ; --# notpresent
    VPB (PretI Sub Sg P1) => remi_ + "sse" ; --# notpresent
    VPB (PretI Sub Sg P2) => remi_ + "sses" ; --# notpresent
    VPB (PretI Sub Sg P3) => remi_ + "sse" ; --# notpresent
    VPB (PretI Sub Pl P1) => remi_ + "ssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => remi_ + "sseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => remi_ + "ssem" ; --# notpresent
    VPB (MQPerf Sg P1) => remi_ + "ra" ; --# notpresent
    VPB (MQPerf Sg P2) => remi_ + "ras" ; --# notpresent
    VPB (MQPerf Sg P3) => remi_ + "ra" ; --# notpresent
    VPB (MQPerf Pl P1) => remi_ + "ramos" ; --# notpresent
    VPB (MQPerf Pl P2) => remi_ + "reis" ; --# notpresent
    VPB (MQPerf Pl P3) => remi_ + "ram" ; --# notpresent
    VPB (PretP Sg P1) => remi_ + "" ; --# notpresent
    VPB (PretP Sg P2) => remi_ + "ste" ; --# notpresent
    VPB (PretP Sg P3) => remi_ + "u" ; --# notpresent
    VPB (PretP Pl P1) => remi_ + "mos" ; --# notpresent
    VPB (PretP Pl P2) => remi_ + "stes" ; --# notpresent
    VPB (PretP Pl P3) => remi_ + "ram" ; --# notpresent
    VPB (Fut Ind Sg P1) => remi_ + "rei" ; --# notpresent
    VPB (Fut Ind Sg P2) => remi_ + "rás" ; --# notpresent
    VPB (Fut Ind Sg P3) => remi_ + "rá" ; --# notpresent
    VPB (Fut Ind Pl P1) => remi_ + "remos" ; --# notpresent
    VPB (Fut Ind Pl P2) => remi_ + "reis" ; --# notpresent
    VPB (Fut Ind Pl P3) => remi_ + "rão" ; --# notpresent
    VPB (Fut Sub Sg P1) => remi_ + "r" ; --# notpresent
    VPB (Fut Sub Sg P2) => remi_ + "res" ; --# notpresent
    VPB (Fut Sub Sg P3) => remi_ + "r" ; --# notpresent
    VPB (Fut Sub Pl P1) => remi_ + "rmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => remi_ + "rdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => remi_ + "rem" ; --# notpresent
    VPB (Cond Sg P1) => remi_ + "ria" ; --# notpresent
    VPB (Cond Sg P2) => remi_ + "rias" ; --# notpresent
    VPB (Cond Sg P3) => remi_ + "ria" ; --# notpresent
    VPB (Cond Pl P1) => remi_ + "ríamos" ; --# notpresent
    VPB (Cond Pl P2) => remi_ + "ríeis" ; --# notpresent
    VPB (Cond Pl P3) => remi_ + "riam" ; --# notpresent
    VPB (Imper Sg P2) => remi_ + nonExist ;
    VPB (Imper Sg P3) => remi_ + nonExist ;
    VPB (Imper Pl P1) => remi_ + nonExist ;
    VPB (Imper Pl P2) => remi_ + "" ;
    VPB (Imper Pl P3) => remi_ + nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

}
