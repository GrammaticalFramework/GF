--# -path=.:../prelude:../common
--# -coding=utf8

-- This file is automaticaly generated by generate_tables_sgjp.
-- That program copies part of its source code to the output,
-- therefore this file is covered by the LGPLv3 as well as the
-- program itself. 
-- It is also possible that the input of the program was distributed
-- under some license. If it is GPL or similar my interpretation is that
-- this file is _not_ a copy of an input and is covered by LGPLv3, while 
-- the dictionary paired with this file is covered by both LGPLv3 and 
-- the license of the input.
-- Be careful not to violate the copyright low!
-- For details see http://www.mimuw.edu.pl/~asl/tabeleusz/ .

-- DO NOT EDIT THIS FILE

resource NounMorphoPol = ResPol ** open Prelude, (Predef=Predef) in {

     flags  coding=utf8;

    oper mkN: (SubstForm => Str) -> Gender -> CommNoun;
    oper mkN tab gen = { s = tab; g = gen };

    oper mkNTable0000: Str -> SubstForm => Str; --%
    oper mkNTable0000 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0001: Str -> SubstForm => Str; --%
    oper mkNTable0001 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "-u";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0002: Str -> SubstForm => Str; --%
    oper mkNTable0002 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0003: Str -> SubstForm => Str; --%
    oper mkNTable0003 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0006: Str -> SubstForm => Str; --%
    oper mkNTable0006 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ek";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0009: Str -> SubstForm => Str; --%
    oper mkNTable0009 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "lowie";
      SF Pl Gen => x + "li";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "li";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "lowie"
    };

    oper mkNTable0010: Str -> SubstForm => Str; --%
    oper mkNTable0010 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0011: Str -> SubstForm => Str; --%
    oper mkNTable0011 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owowi";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owie";
      SF Pl Nom => x + "owy";
      SF Pl Gen => x + "owów";
      SF Pl Dat => x + "owom";
      SF Pl Acc => x + "owy";
      SF Pl Instr => x + "owami";
      SF Pl Loc => x + "owach";
      SF Pl Voc => x + "owy"
    };

    oper mkNTable0012: Str -> SubstForm => Str; --%
    oper mkNTable0012 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "ym";
      SF Sg Loc => x + "ym";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "ych";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0013: Str -> SubstForm => Str; --%
    oper mkNTable0013 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "ej";
      SF Sg Dat => x + "ej";
      SF Sg Acc => x + "ą";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ej";
      SF Sg Voc => x + "a";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0014: Str -> SubstForm => Str; --%
    oper mkNTable0014 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0015: Str -> SubstForm => Str; --%
    oper mkNTable0015 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0016: Str -> SubstForm => Str; --%
    oper mkNTable0016 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "cowie";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cowie"
    };

    oper mkNTable0019: Str -> SubstForm => Str; --%
    oper mkNTable0019 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "sia";
      SF Sg Dat => x + "siowi";
      SF Sg Acc => x + "sia";
      SF Sg Instr => x + "siem";
      SF Sg Loc => x + "siu";
      SF Sg Voc => x + "siu";
      SF Pl Nom => x + "sie";
      SF Pl Gen => x + "siów";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "siów";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "sie"
    };

    oper mkNTable0020: Str -> SubstForm => Str; --%
    oper mkNTable0020 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0021: Str -> SubstForm => Str; --%
    oper mkNTable0021 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0022: Str -> SubstForm => Str; --%
    oper mkNTable0022 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ia";
      SF Sg Gen => x + "ii";
      SF Sg Dat => x + "ii";
      SF Sg Acc => x + "ię";
      SF Sg Instr => x + "ią";
      SF Sg Loc => x + "ii";
      SF Sg Voc => x + "io";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "yj";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "ie";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0025: Str -> SubstForm => Str; --%
    oper mkNTable0025 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "k";
      SF Sg Gen => x + "ka";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ka";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => x + "cy";
      SF Pl Gen => x + "ków";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ków";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "cy"
    };

    oper mkNTable0026: Str -> SubstForm => Str; --%
    oper mkNTable0026 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ta";
      SF Sg Gen => x + "ty";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "tę";
      SF Sg Instr => x + "tą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => x + "ty";
      SF Pl Gen => x + "t";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ty";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ty"
    };

    oper mkNTable0027: Str -> SubstForm => Str; --%
    oper mkNTable0027 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "k";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0028: Str -> SubstForm => Str; --%
    oper mkNTable0028 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "zy";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "zy"
    };

    oper mkNTable0029: Str -> SubstForm => Str; --%
    oper mkNTable0029 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "in";
      SF Sg Gen => x + "ina";
      SF Sg Dat => x + "inowi";
      SF Sg Acc => x + "ina";
      SF Sg Instr => x + "inem";
      SF Sg Loc => x + "inie";
      SF Sg Voc => x + "inie";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0030: Str -> SubstForm => Str; --%
    oper mkNTable0030 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ga";
      SF Sg Gen => x + "gi";
      SF Sg Dat => x + "dze";
      SF Sg Acc => x + "gę";
      SF Sg Instr => x + "gą";
      SF Sg Loc => x + "dze";
      SF Sg Voc => x + "go";
      SF Pl Nom => x + "gi";
      SF Pl Gen => x + "g";
      SF Pl Dat => x + "gom";
      SF Pl Acc => x + "gi";
      SF Pl Instr => x + "gami";
      SF Pl Loc => x + "gach";
      SF Pl Voc => x + "gi"
    };

    oper mkNTable0033: Str -> SubstForm => Str; --%
    oper mkNTable0033 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "towie";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "tów";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "towie"
    };

    oper mkNTable0035: Str -> SubstForm => Str; --%
    oper mkNTable0035 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "nia";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "nię";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ń";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0036: Str -> SubstForm => Str; --%
    oper mkNTable0036 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sia";
      SF Sg Gen => x + "si";
      SF Sg Dat => x + "si";
      SF Sg Acc => x + "się";
      SF Sg Instr => x + "sią";
      SF Sg Loc => x + "si";
      SF Sg Voc => x + "siu";
      SF Pl Nom => x + "sie";
      SF Pl Gen => x + "ś";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "sie";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "sie"
    };

    oper mkNTable0037: Str -> SubstForm => Str; --%
    oper mkNTable0037 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0038: Str -> SubstForm => Str; --%
    oper mkNTable0038 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "x";
      SF Sg Gen => x + "ksu";
      SF Sg Dat => x + "ksowi";
      SF Sg Acc => x + "x";
      SF Sg Instr => x + "ksem";
      SF Sg Loc => x + "ksie";
      SF Sg Voc => x + "ksie";
      SF Pl Nom => x + "ksy";
      SF Pl Gen => x + "ksów";
      SF Pl Dat => x + "ksom";
      SF Pl Acc => x + "ksy";
      SF Pl Instr => x + "ksami";
      SF Pl Loc => x + "ksach";
      SF Pl Voc => x + "ksy"
    };

    oper mkNTable0042: Str -> SubstForm => Str; --%
    oper mkNTable0042 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "to";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => x + "towie";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "tów";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "towie"
    };

    oper mkNTable0043: Str -> SubstForm => Str; --%
    oper mkNTable0043 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "m";
      SF Sg Loc => x + "m";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ch";
      SF Pl Dat => x + "m";
      SF Pl Acc => x + "ch";
      SF Pl Instr => x + "mi";
      SF Pl Loc => x + "ch";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0044: Str -> SubstForm => Str; --%
    oper mkNTable0044 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0046: Str -> SubstForm => Str; --%
    oper mkNTable0046 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "ka";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ka";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => x + "kowie";
      SF Pl Gen => x + "ków";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ków";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "kowie"
    };

    oper mkNTable0047: Str -> SubstForm => Str; --%
    oper mkNTable0047 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "er";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "rowie";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "rów";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "rowie"
    };

    oper mkNTable0048: Str -> SubstForm => Str; --%
    oper mkNTable0048 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ra";
      SF Sg Gen => x + "ry";
      SF Sg Dat => x + "rze";
      SF Sg Acc => x + "rę";
      SF Sg Instr => x + "rą";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "ro";
      SF Pl Nom => x + "ry";
      SF Pl Gen => x + "er";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "ry";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "ry"
    };

    oper mkNTable0049: Str -> SubstForm => Str; --%
    oper mkNTable0049 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owu";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owie";
      SF Pl Nom => x + "owy";
      SF Pl Gen => x + "owów";
      SF Pl Dat => x + "owom";
      SF Pl Acc => x + "owy";
      SF Pl Instr => x + "owami";
      SF Pl Loc => x + "owach";
      SF Pl Voc => x + "owy"
    };

    oper mkNTable0051: Str -> SubstForm => Str; --%
    oper mkNTable0051 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0053: Str -> SubstForm => Str; --%
    oper mkNTable0053 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0054: Str -> SubstForm => Str; --%
    oper mkNTable0054 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "i";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "im";
      SF Sg Loc => x + "im";
      SF Sg Voc => x + "i";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ich";
      SF Pl Dat => x + "im";
      SF Pl Acc => x + "ich";
      SF Pl Instr => x + "imi";
      SF Pl Loc => x + "ich";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0055: Str -> SubstForm => Str; --%
    oper mkNTable0055 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0059: Str -> SubstForm => Str; --%
    oper mkNTable0059 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ja";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ję";
      SF Sg Instr => x + "ją";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "jo";
      SF Pl Nom => x + "je";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "jom";
      SF Pl Acc => x + "je";
      SF Pl Instr => x + "jami";
      SF Pl Loc => x + "jach";
      SF Pl Voc => x + "je"
    };

    oper mkNTable0060: Str -> SubstForm => Str; --%
    oper mkNTable0060 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "j";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0061: Str -> SubstForm => Str; --%
    oper mkNTable0061 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niec";
      SF Sg Gen => x + "ńca";
      SF Sg Dat => x + "ńcowi";
      SF Sg Acc => x + "ńca";
      SF Sg Instr => x + "ńcem";
      SF Sg Loc => x + "ńcu";
      SF Sg Voc => x + "ńcu";
      SF Pl Nom => x + "ńcy";
      SF Pl Gen => x + "ńców";
      SF Pl Dat => x + "ńcom";
      SF Pl Acc => x + "ńców";
      SF Pl Instr => x + "ńcami";
      SF Pl Loc => x + "ńcach";
      SF Pl Voc => x + "ńcy"
    };

    oper mkNTable0064: Str -> SubstForm => Str; --%
    oper mkNTable0064 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0067: Str -> SubstForm => Str; --%
    oper mkNTable0067 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "m";
      SF Sg Loc => x + "m";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "ch";
      SF Pl Dat => x + "m";
      SF Pl Acc => x + "ch";
      SF Pl Instr => x + "mi";
      SF Pl Loc => x + "ch";
      SF Pl Voc => x + ""
    };

    oper mkNTable0068: Str -> SubstForm => Str; --%
    oper mkNTable0068 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "i";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "im";
      SF Sg Loc => x + "im";
      SF Sg Voc => x + "i";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ich";
      SF Pl Dat => x + "im";
      SF Pl Acc => x + "ich";
      SF Pl Instr => x + "imi";
      SF Pl Loc => x + "ich";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0069: Str -> SubstForm => Str; --%
    oper mkNTable0069 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "ciowie";
      SF Pl Gen => x + "ciów";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ciów";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "ciowie"
    };

    oper mkNTable0072: Str -> SubstForm => Str; --%
    oper mkNTable0072 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zia";
      SF Sg Gen => x + "zi";
      SF Sg Dat => x + "zi";
      SF Sg Acc => x + "zię";
      SF Sg Instr => x + "zią";
      SF Sg Loc => x + "zi";
      SF Sg Voc => x + "ziu";
      SF Pl Nom => x + "zie";
      SF Pl Gen => x + "ź";
      SF Pl Dat => x + "ziom";
      SF Pl Acc => x + "zie";
      SF Pl Instr => x + "ziami";
      SF Pl Loc => x + "ziach";
      SF Pl Voc => x + "zie"
    };

    oper mkNTable0073: Str -> SubstForm => Str; --%
    oper mkNTable0073 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0075: Str -> SubstForm => Str; --%
    oper mkNTable0075 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0077: Str -> SubstForm => Str; --%
    oper mkNTable0077 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "oł";
      SF Sg Gen => x + "oła";
      SF Sg Dat => x + "ołowi";
      SF Sg Acc => x + "oła";
      SF Sg Instr => x + "ołem";
      SF Sg Loc => x + "ele";
      SF Sg Voc => x + "ele";
      SF Pl Nom => x + "ołowie";
      SF Pl Gen => x + "ołów";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "ołów";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "ołowie"
    };

    oper mkNTable0079: Str -> SubstForm => Str; --%
    oper mkNTable0079 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0080: Str -> SubstForm => Str; --%
    oper mkNTable0080 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "sia";
      SF Sg Dat => x + "siowi";
      SF Sg Acc => x + "sia";
      SF Sg Instr => x + "siem";
      SF Sg Loc => x + "siu";
      SF Sg Voc => x + "siu";
      SF Pl Nom => x + "siowie";
      SF Pl Gen => x + "siów";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "siów";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "siowie"
    };

    oper mkNTable0083: Str -> SubstForm => Str; --%
    oper mkNTable0083 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "ina";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "ina";
      SF Sg Instr => x + "inem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0088: Str -> SubstForm => Str; --%
    oper mkNTable0088 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0089: Str -> SubstForm => Str; --%
    oper mkNTable0089 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sto";
      SF Sg Gen => x + "sta";
      SF Sg Dat => x + "stowi";
      SF Sg Acc => x + "sta";
      SF Sg Instr => x + "stem";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "sto";
      SF Pl Nom => x + "stowie";
      SF Pl Gen => x + "stów";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "stów";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "stowie"
    };

    oper mkNTable0091: Str -> SubstForm => Str; --%
    oper mkNTable0091 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0094: Str -> SubstForm => Str; --%
    oper mkNTable0094 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ja";
      SF Sg Gen => x + "ji";
      SF Sg Dat => x + "ji";
      SF Sg Acc => x + "ję";
      SF Sg Instr => x + "ją";
      SF Sg Loc => x + "ji";
      SF Sg Voc => x + "jo";
      SF Pl Nom => x + "je";
      SF Pl Gen => x + "yj";
      SF Pl Dat => x + "jom";
      SF Pl Acc => x + "je";
      SF Pl Instr => x + "jami";
      SF Pl Loc => x + "jach";
      SF Pl Voc => x + "je"
    };

    oper mkNTable0095: Str -> SubstForm => Str; --%
    oper mkNTable0095 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "um";
      SF Sg Gen => x + "um";
      SF Sg Dat => x + "um";
      SF Sg Acc => x + "um";
      SF Sg Instr => x + "um";
      SF Sg Loc => x + "um";
      SF Sg Voc => x + "um";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0096: Str -> SubstForm => Str; --%
    oper mkNTable0096 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0097: Str -> SubstForm => Str; --%
    oper mkNTable0097 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "st";
      SF Sg Gen => x + "sta";
      SF Sg Dat => x + "stowi";
      SF Sg Acc => x + "sta";
      SF Sg Instr => x + "stem";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "ście";
      SF Pl Nom => x + "stowie";
      SF Pl Gen => x + "stów";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "stów";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "stowie"
    };

    oper mkNTable0098: Str -> SubstForm => Str; --%
    oper mkNTable0098 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sta";
      SF Sg Gen => x + "sty";
      SF Sg Dat => x + "ście";
      SF Sg Acc => x + "stę";
      SF Sg Instr => x + "stą";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "sto";
      SF Pl Nom => x + "sty";
      SF Pl Gen => x + "st";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "sty";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "sty"
    };

    oper mkNTable0099: Str -> SubstForm => Str; --%
    oper mkNTable0099 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0100: Str -> SubstForm => Str; --%
    oper mkNTable0100 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0102: Str -> SubstForm => Str; --%
    oper mkNTable0102 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "in";
      SF Sg Gen => x + "ina";
      SF Sg Dat => x + "inowi";
      SF Sg Acc => x + "ina";
      SF Sg Instr => x + "inem";
      SF Sg Loc => x + "inie";
      SF Sg Voc => x + "inie";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0103: Str -> SubstForm => Str; --%
    oper mkNTable0103 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ta";
      SF Sg Gen => x + "ty";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "tę";
      SF Sg Instr => x + "tą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => x + "ci";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "tów";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ci"
    };

    oper mkNTable0104: Str -> SubstForm => Str; --%
    oper mkNTable0104 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "śka";
      SF Sg Gen => x + "śki";
      SF Sg Dat => x + "śce";
      SF Sg Acc => x + "śkę";
      SF Sg Instr => x + "śką";
      SF Sg Loc => x + "śce";
      SF Sg Voc => x + "śko";
      SF Pl Nom => x + "śki";
      SF Pl Gen => x + "siek";
      SF Pl Dat => x + "śkom";
      SF Pl Acc => x + "śki";
      SF Pl Instr => x + "śkami";
      SF Pl Loc => x + "śkach";
      SF Pl Voc => x + "śki"
    };

    oper mkNTable0110: Str -> SubstForm => Str; --%
    oper mkNTable0110 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0111: Str -> SubstForm => Str; --%
    oper mkNTable0111 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0114: Str -> SubstForm => Str; --%
    oper mkNTable0114 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "c";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "cowie";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cowie"
    };

    oper mkNTable0117: Str -> SubstForm => Str; --%
    oper mkNTable0117 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0118: Str -> SubstForm => Str; --%
    oper mkNTable0118 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0119: Str -> SubstForm => Str; --%
    oper mkNTable0119 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "owo";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owu";
      SF Sg Acc => x + "owo";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owo";
      SF Pl Nom => x + "owa";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "owom";
      SF Pl Acc => x + "owa";
      SF Pl Instr => x + "owami";
      SF Pl Loc => x + "owach";
      SF Pl Voc => x + "owa"
    };

    oper mkNTable0121: Str -> SubstForm => Str; --%
    oper mkNTable0121 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ja";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ję";
      SF Sg Instr => x + "ją";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "jo";
      SF Pl Nom => x + "jowie";
      SF Pl Gen => x + "jów";
      SF Pl Dat => x + "jom";
      SF Pl Acc => x + "jów";
      SF Pl Instr => x + "jami";
      SF Pl Loc => x + "jach";
      SF Pl Voc => x + "jowie"
    };

    oper mkNTable0123: Str -> SubstForm => Str; --%
    oper mkNTable0123 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "ym";
      SF Sg Loc => x + "ym";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "ych";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0126: Str -> SubstForm => Str; --%
    oper mkNTable0126 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => x + "kowie";
      SF Pl Gen => x + "ków";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ków";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "kowie"
    };

    oper mkNTable0129: Str -> SubstForm => Str; --%
    oper mkNTable0129 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0131: Str -> SubstForm => Str; --%
    oper mkNTable0131 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0133: Str -> SubstForm => Str; --%
    oper mkNTable0133 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ko";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => x + "kowie";
      SF Pl Gen => x + "ków";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ków";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "kowie"
    };

    oper mkNTable0140: Str -> SubstForm => Str; --%
    oper mkNTable0140 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niek";
      SF Sg Gen => x + "ńka";
      SF Sg Dat => x + "ńkowi";
      SF Sg Acc => x + "ńka";
      SF Sg Instr => x + "ńkiem";
      SF Sg Loc => x + "ńku";
      SF Sg Voc => x + "ńku";
      SF Pl Nom => x + "ńkowie";
      SF Pl Gen => x + "ńków";
      SF Pl Dat => x + "ńkom";
      SF Pl Acc => x + "ńków";
      SF Pl Instr => x + "ńkami";
      SF Pl Loc => x + "ńkach";
      SF Pl Voc => x + "ńkowie"
    };

    oper mkNTable0142: Str -> SubstForm => Str; --%
    oper mkNTable0142 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "niowie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "niów";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "niowie"
    };

    oper mkNTable0144: Str -> SubstForm => Str; --%
    oper mkNTable0144 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "na";
      SF Sg Gen => x + "ny";
      SF Sg Dat => x + "nie";
      SF Sg Acc => x + "nę";
      SF Sg Instr => x + "ną";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "no";
      SF Pl Nom => x + "ny";
      SF Pl Gen => x + "ien";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "ny";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "ny"
    };

    oper mkNTable0145: Str -> SubstForm => Str; --%
    oper mkNTable0145 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0151: Str -> SubstForm => Str; --%
    oper mkNTable0151 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "łowie";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "łów";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "łowie"
    };

    oper mkNTable0152: Str -> SubstForm => Str; --%
    oper mkNTable0152 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "ły";
      SF Sg Dat => x + "le";
      SF Sg Acc => x + "łę";
      SF Sg Instr => x + "łą";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "ł";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0153: Str -> SubstForm => Str; --%
    oper mkNTable0153 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ta";
      SF Sg Gen => x + "ty";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "tę";
      SF Sg Instr => x + "tą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => x + "towie";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "tów";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "towie"
    };

    oper mkNTable0154: Str -> SubstForm => Str; --%
    oper mkNTable0154 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "cowie";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cowie"
    };

    oper mkNTable0155: Str -> SubstForm => Str; --%
    oper mkNTable0155 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "sł";
      SF Sg Gen => x + "sła";
      SF Sg Dat => x + "słowi";
      SF Sg Acc => x + "sła";
      SF Sg Instr => x + "słem";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "śle";
      SF Pl Nom => x + "słowie";
      SF Pl Gen => x + "słów";
      SF Pl Dat => x + "słom";
      SF Pl Acc => x + "słów";
      SF Pl Instr => x + "słami";
      SF Pl Loc => x + "słach";
      SF Pl Voc => x + "słowie"
    };

    oper mkNTable0157: Str -> SubstForm => Str; --%
    oper mkNTable0157 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "iec";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0158: Str -> SubstForm => Str; --%
    oper mkNTable0158 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0159: Str -> SubstForm => Str; --%
    oper mkNTable0159 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0161: Str -> SubstForm => Str; --%
    oper mkNTable0161 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0162: Str -> SubstForm => Str; --%
    oper mkNTable0162 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "o";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "o";
      SF Pl Gen => x + "o";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "o";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "o"
    };

    oper mkNTable0167: Str -> SubstForm => Str; --%
    oper mkNTable0167 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "lowie";
      SF Pl Gen => x + "lów";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "lów";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "lowie"
    };

    oper mkNTable0168: Str -> SubstForm => Str; --%
    oper mkNTable0168 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "wi";
      SF Sg Acc => x + "na";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "nie";
      SF Pl Nom => x + "nowie";
      SF Pl Gen => x + "nów";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "nów";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "nowie"
    };

    oper mkNTable0169: Str -> SubstForm => Str; --%
    oper mkNTable0169 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "ły";
      SF Sg Dat => x + "le";
      SF Sg Acc => x + "łę";
      SF Sg Instr => x + "łą";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => x + "łowie";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "łów";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "łowie"
    };

    oper mkNTable0171: Str -> SubstForm => Str; --%
    oper mkNTable0171 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0173: Str -> SubstForm => Str; --%
    oper mkNTable0173 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0175: Str -> SubstForm => Str; --%
    oper mkNTable0175 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0176: Str -> SubstForm => Str; --%
    oper mkNTable0176 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0178: Str -> SubstForm => Str; --%
    oper mkNTable0178 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "óbr";
      SF Sg Gen => x + "obru";
      SF Sg Dat => x + "obrowi";
      SF Sg Acc => x + "óbr";
      SF Sg Instr => x + "obrem";
      SF Sg Loc => x + "obrze";
      SF Sg Voc => x + "obrze";
      SF Pl Nom => x + "obry";
      SF Pl Gen => x + "obrów";
      SF Pl Dat => x + "obrom";
      SF Pl Acc => x + "obry";
      SF Pl Instr => x + "obrami";
      SF Pl Loc => x + "obrach";
      SF Pl Voc => x + "obry"
    };

    oper mkNTable0179: Str -> SubstForm => Str; --%
    oper mkNTable0179 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ór";
      SF Sg Gen => x + "ora";
      SF Sg Dat => x + "orowi";
      SF Sg Acc => x + "ora";
      SF Sg Instr => x + "orem";
      SF Sg Loc => x + "orze";
      SF Sg Voc => x + "orze";
      SF Pl Nom => x + "orowie";
      SF Pl Gen => x + "orów";
      SF Pl Dat => x + "orom";
      SF Pl Acc => x + "orów";
      SF Pl Instr => x + "orami";
      SF Pl Loc => x + "orach";
      SF Pl Voc => x + "orowie"
    };

    oper mkNTable0181: Str -> SubstForm => Str; --%
    oper mkNTable0181 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0182: Str -> SubstForm => Str; --%
    oper mkNTable0182 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "o";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0190: Str -> SubstForm => Str; --%
    oper mkNTable0190 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "ci";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "tów";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ci"
    };

    oper mkNTable0191: Str -> SubstForm => Str; --%
    oper mkNTable0191 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0192: Str -> SubstForm => Str; --%
    oper mkNTable0192 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ł";
      SF Sg Gen => x + "łu";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ł";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0193: Str -> SubstForm => Str; --%
    oper mkNTable0193 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "óg";
      SF Sg Gen => x + "oga";
      SF Sg Dat => x + "ogowi";
      SF Sg Acc => x + "oga";
      SF Sg Instr => x + "ogiem";
      SF Sg Loc => x + "ogu";
      SF Sg Voc => x + "ogu";
      SF Pl Nom => x + "ogowie";
      SF Pl Gen => x + "ogów";
      SF Pl Dat => x + "ogom";
      SF Pl Acc => x + "ogów";
      SF Pl Instr => x + "ogami";
      SF Pl Loc => x + "ogach";
      SF Pl Voc => x + "ogowie"
    };

    oper mkNTable0197: Str -> SubstForm => Str; --%
    oper mkNTable0197 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0198: Str -> SubstForm => Str; --%
    oper mkNTable0198 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cha";
      SF Sg Gen => x + "chy";
      SF Sg Dat => x + "sze";
      SF Sg Acc => x + "chę";
      SF Sg Instr => x + "chą";
      SF Sg Loc => x + "sze";
      SF Sg Voc => x + "cho";
      SF Pl Nom => x + "chy";
      SF Pl Gen => x + "ch";
      SF Pl Dat => x + "chom";
      SF Pl Acc => x + "chy";
      SF Pl Instr => x + "chami";
      SF Pl Loc => x + "chach";
      SF Pl Voc => x + "chy"
    };

    oper mkNTable0199: Str -> SubstForm => Str; --%
    oper mkNTable0199 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ko";
      SF Sg Gen => x + "ka";
      SF Sg Dat => x + "ku";
      SF Sg Acc => x + "ko";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ko";
      SF Pl Nom => x + "ka";
      SF Pl Gen => x + "ek";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ka";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "ka"
    };

    oper mkNTable0200: Str -> SubstForm => Str; --%
    oper mkNTable0200 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cze";
      SF Pl Nom => x + "cy";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cy"
    };

    oper mkNTable0201: Str -> SubstForm => Str; --%
    oper mkNTable0201 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ch";
      SF Sg Gen => x + "cha";
      SF Sg Dat => x + "chowi";
      SF Sg Acc => x + "cha";
      SF Sg Instr => x + "chem";
      SF Sg Loc => x + "chu";
      SF Sg Voc => x + "chu";
      SF Pl Nom => x + "si";
      SF Pl Gen => x + "chów";
      SF Pl Dat => x + "chom";
      SF Pl Acc => x + "chów";
      SF Pl Instr => x + "chami";
      SF Pl Loc => x + "chach";
      SF Pl Voc => x + "si"
    };

    oper mkNTable0203: Str -> SubstForm => Str; --%
    oper mkNTable0203 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "ym";
      SF Sg Loc => x + "ym";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "ych";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0204: Str -> SubstForm => Str; --%
    oper mkNTable0204 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "siek";
      SF Sg Gen => x + "śka";
      SF Sg Dat => x + "śkowi";
      SF Sg Acc => x + "śka";
      SF Sg Instr => x + "śkiem";
      SF Sg Loc => x + "śku";
      SF Sg Voc => x + "śku";
      SF Pl Nom => x + "śkowie";
      SF Pl Gen => x + "śków";
      SF Pl Dat => x + "śkom";
      SF Pl Acc => x + "śków";
      SF Pl Instr => x + "śkami";
      SF Pl Loc => x + "śkach";
      SF Pl Voc => x + "śkowie"
    };

    oper mkNTable0205: Str -> SubstForm => Str; --%
    oper mkNTable0205 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0210: Str -> SubstForm => Str; --%
    oper mkNTable0210 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niec";
      SF Sg Gen => x + "ńca";
      SF Sg Dat => x + "ńcowi";
      SF Sg Acc => x + "ńca";
      SF Sg Instr => x + "ńcem";
      SF Sg Loc => x + "ńcu";
      SF Sg Voc => x + "ńcu";
      SF Pl Nom => x + "ńcowie";
      SF Pl Gen => x + "ńców";
      SF Pl Dat => x + "ńcom";
      SF Pl Acc => x + "ńców";
      SF Pl Instr => x + "ńcami";
      SF Pl Loc => x + "ńcach";
      SF Pl Voc => x + "ńcowie"
    };

    oper mkNTable0213: Str -> SubstForm => Str; --%
    oper mkNTable0213 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0217: Str -> SubstForm => Str; --%
    oper mkNTable0217 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0218: Str -> SubstForm => Str; --%
    oper mkNTable0218 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niec";
      SF Sg Gen => x + "ńca";
      SF Sg Dat => x + "ńcowi";
      SF Sg Acc => x + "ńca";
      SF Sg Instr => x + "ńcem";
      SF Sg Loc => x + "ńcu";
      SF Sg Voc => x + "ńcze";
      SF Pl Nom => x + "ńcy";
      SF Pl Gen => x + "ńców";
      SF Pl Dat => x + "ńcom";
      SF Pl Acc => x + "ńców";
      SF Pl Instr => x + "ńcami";
      SF Pl Loc => x + "ńcach";
      SF Pl Voc => x + "ńcy"
    };

    oper mkNTable0219: Str -> SubstForm => Str; --%
    oper mkNTable0219 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ga";
      SF Sg Gen => x + "gi";
      SF Sg Dat => x + "dze";
      SF Sg Acc => x + "gę";
      SF Sg Instr => x + "gą";
      SF Sg Loc => x + "dze";
      SF Sg Voc => x + "go";
      SF Pl Nom => x + "gowie";
      SF Pl Gen => x + "gów";
      SF Pl Dat => x + "gom";
      SF Pl Acc => x + "gów";
      SF Pl Instr => x + "gami";
      SF Pl Loc => x + "gach";
      SF Pl Voc => x + "gowie"
    };

    oper mkNTable0222: Str -> SubstForm => Str; --%
    oper mkNTable0222 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "zd";
      SF Sg Gen => x + "zda";
      SF Sg Dat => x + "zdowi";
      SF Sg Acc => x + "zda";
      SF Sg Instr => x + "zdem";
      SF Sg Loc => x + "ździe";
      SF Sg Voc => x + "ździe";
      SF Pl Nom => x + "zdowie";
      SF Pl Gen => x + "zdów";
      SF Pl Dat => x + "zdom";
      SF Pl Acc => x + "zdów";
      SF Pl Instr => x + "zdami";
      SF Pl Loc => x + "zdach";
      SF Pl Voc => x + "zdowie"
    };

    oper mkNTable0230: Str -> SubstForm => Str; --%
    oper mkNTable0230 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "x";
      SF Sg Gen => x + "ksa";
      SF Sg Dat => x + "ksowi";
      SF Sg Acc => x + "ksa";
      SF Sg Instr => x + "ksem";
      SF Sg Loc => x + "ksie";
      SF Sg Voc => x + "ksie";
      SF Pl Nom => x + "ksowie";
      SF Pl Gen => x + "ksów";
      SF Pl Dat => x + "ksom";
      SF Pl Acc => x + "ksów";
      SF Pl Instr => x + "ksami";
      SF Pl Loc => x + "ksach";
      SF Pl Voc => x + "ksowie"
    };

    oper mkNTable0231: Str -> SubstForm => Str; --%
    oper mkNTable0231 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "tu";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "t";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "ty";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ty";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ty"
    };

    oper mkNTable0232: Str -> SubstForm => Str; --%
    oper mkNTable0232 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cia";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "cię";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ć";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0233: Str -> SubstForm => Str; --%
    oper mkNTable0233 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "ty";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ty";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ty"
    };

    oper mkNTable0237: Str -> SubstForm => Str; --%
    oper mkNTable0237 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "th";
      SF Sg Gen => x + "tha";
      SF Sg Dat => x + "thowi";
      SF Sg Acc => x + "tha";
      SF Sg Instr => x + "them";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "thowie";
      SF Pl Gen => x + "thów";
      SF Pl Dat => x + "thom";
      SF Pl Acc => x + "thów";
      SF Pl Instr => x + "thami";
      SF Pl Loc => x + "thach";
      SF Pl Voc => x + "thowie"
    };

    oper mkNTable0238: Str -> SubstForm => Str; --%
    oper mkNTable0238 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "co";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "co";
      SF Pl Nom => x + "cowie";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cowie"
    };

    oper mkNTable0239: Str -> SubstForm => Str; --%
    oper mkNTable0239 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0241: Str -> SubstForm => Str; --%
    oper mkNTable0241 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ja";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ję";
      SF Sg Instr => x + "ją";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "jo";
      SF Pl Nom => x + "je";
      SF Pl Gen => x + "j";
      SF Pl Dat => x + "jom";
      SF Pl Acc => x + "je";
      SF Pl Instr => x + "jami";
      SF Pl Loc => x + "jach";
      SF Pl Voc => x + "je"
    };

    oper mkNTable0243: Str -> SubstForm => Str; --%
    oper mkNTable0243 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0244: Str -> SubstForm => Str; --%
    oper mkNTable0244 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + ""
    };

    oper mkNTable0246: Str -> SubstForm => Str; --%
    oper mkNTable0246 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "łowie";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "łów";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "łowie"
    };

    oper mkNTable0247: Str -> SubstForm => Str; --%
    oper mkNTable0247 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0248: Str -> SubstForm => Str; --%
    oper mkNTable0248 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ia";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "ia";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => x + "iowie";
      SF Pl Gen => x + "iów";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "iów";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "iowie"
    };

    oper mkNTable0250: Str -> SubstForm => Str; --%
    oper mkNTable0250 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0253: Str -> SubstForm => Str; --%
    oper mkNTable0253 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0254: Str -> SubstForm => Str; --%
    oper mkNTable0254 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "a";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0257: Str -> SubstForm => Str; --%
    oper mkNTable0257 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ya";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "yę";
      SF Sg Instr => x + "yą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "yo";
      SF Pl Nom => x + "yowie";
      SF Pl Gen => x + "yów";
      SF Pl Dat => x + "yom";
      SF Pl Acc => x + "yów";
      SF Pl Instr => x + "yami";
      SF Pl Loc => x + "yach";
      SF Pl Voc => x + "yowie"
    };

    oper mkNTable0258: Str -> SubstForm => Str; --%
    oper mkNTable0258 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "sia";
      SF Sg Dat => x + "siowi";
      SF Sg Acc => x + "sia";
      SF Sg Instr => x + "siem";
      SF Sg Loc => x + "siu";
      SF Sg Voc => x + "ś";
      SF Pl Nom => x + "siowie";
      SF Pl Gen => x + "siów";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "siów";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "siowie"
    };

    oper mkNTable0259: Str -> SubstForm => Str; --%
    oper mkNTable0259 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąb";
      SF Sg Gen => x + "ębia";
      SF Sg Dat => x + "ębiowi";
      SF Sg Acc => x + "ębia";
      SF Sg Instr => x + "ębiem";
      SF Sg Loc => x + "ębiu";
      SF Sg Voc => x + "ębiu";
      SF Pl Nom => x + "ębiowie";
      SF Pl Gen => x + "ębiów";
      SF Pl Dat => x + "ębiom";
      SF Pl Acc => x + "ębiów";
      SF Pl Instr => x + "ębiami";
      SF Pl Loc => x + "ębiach";
      SF Pl Voc => x + "ębiowie"
    };

    oper mkNTable0260: Str -> SubstForm => Str; --%
    oper mkNTable0260 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąb";
      SF Sg Gen => x + "ębia";
      SF Sg Dat => x + "ębiowi";
      SF Sg Acc => x + "ąb";
      SF Sg Instr => x + "ębiem";
      SF Sg Loc => x + "ębiu";
      SF Sg Voc => x + "ębiu";
      SF Pl Nom => x + "ębie";
      SF Pl Gen => x + "ębi";
      SF Pl Dat => x + "ębiom";
      SF Pl Acc => x + "ębie";
      SF Pl Instr => x + "ębiami";
      SF Pl Loc => x + "ębiach";
      SF Pl Voc => x + "ębie"
    };

    oper mkNTable0262: Str -> SubstForm => Str; --%
    oper mkNTable0262 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ta";
      SF Sg Gen => x + "ty";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "tę";
      SF Sg Instr => x + "tą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => x + "ty";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "tów";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ty"
    };

    oper mkNTable0263: Str -> SubstForm => Str; --%
    oper mkNTable0263 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "th";
      SF Sg Gen => x + "tha";
      SF Sg Dat => x + "thowi";
      SF Sg Acc => x + "tha";
      SF Sg Instr => x + "them";
      SF Sg Loc => x + "sie";
      SF Sg Voc => x + "sie";
      SF Pl Nom => x + "thowie";
      SF Pl Gen => x + "thów";
      SF Pl Dat => x + "thom";
      SF Pl Acc => x + "thów";
      SF Pl Instr => x + "thami";
      SF Pl Loc => x + "thach";
      SF Pl Voc => x + "thowie"
    };

    oper mkNTable0265: Str -> SubstForm => Str; --%
    oper mkNTable0265 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0266: Str -> SubstForm => Str; --%
    oper mkNTable0266 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "zień";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "niowie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "niów";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "niowie"
    };

    oper mkNTable0268: Str -> SubstForm => Str; --%
    oper mkNTable0268 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "niów";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0271: Str -> SubstForm => Str; --%
    oper mkNTable0271 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0274: Str -> SubstForm => Str; --%
    oper mkNTable0274 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0275: Str -> SubstForm => Str; --%
    oper mkNTable0275 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "tha";
      SF Sg Gen => x + "thy";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "thę";
      SF Sg Instr => x + "thą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "tho";
      SF Pl Nom => x + "thy";
      SF Pl Gen => x + "th";
      SF Pl Dat => x + "thom";
      SF Pl Acc => x + "thy";
      SF Pl Instr => x + "thami";
      SF Pl Loc => x + "thach";
      SF Pl Voc => x + "thy"
    };

    oper mkNTable0278: Str -> SubstForm => Str; --%
    oper mkNTable0278 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "er";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "rzy";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "rów";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "rzy"
    };

    oper mkNTable0280: Str -> SubstForm => Str; --%
    oper mkNTable0280 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "li";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "łów";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "li"
    };

    oper mkNTable0281: Str -> SubstForm => Str; --%
    oper mkNTable0281 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "nowi";
      SF Sg Acc => x + "na";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "nie";
      SF Pl Nom => x + "nowie";
      SF Pl Gen => x + "nów";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "nów";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "nowie"
    };

    oper mkNTable0282: Str -> SubstForm => Str; --%
    oper mkNTable0282 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0283: Str -> SubstForm => Str; --%
    oper mkNTable0283 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "iej";
      SF Sg Dat => x + "iej";
      SF Sg Acc => x + "ą";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "iej";
      SF Sg Voc => x + "a";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "ich";
      SF Pl Dat => x + "im";
      SF Pl Acc => x + "ie";
      SF Pl Instr => x + "imi";
      SF Pl Loc => x + "ich";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0286: Str -> SubstForm => Str; --%
    oper mkNTable0286 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "nowi";
      SF Sg Acc => x + "na";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "nowie";
      SF Pl Gen => x + "nów";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "nów";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "nowie"
    };

    oper mkNTable0290: Str -> SubstForm => Str; --%
    oper mkNTable0290 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "ni";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0291: Str -> SubstForm => Str; --%
    oper mkNTable0291 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "źka";
      SF Sg Gen => x + "źki";
      SF Sg Dat => x + "źce";
      SF Sg Acc => x + "źkę";
      SF Sg Instr => x + "źką";
      SF Sg Loc => x + "źce";
      SF Sg Voc => x + "źko";
      SF Pl Nom => x + "źki";
      SF Pl Gen => x + "ziek";
      SF Pl Dat => x + "źkom";
      SF Pl Acc => x + "źki";
      SF Pl Instr => x + "źkami";
      SF Pl Loc => x + "źkach";
      SF Pl Voc => x + "źki"
    };

    oper mkNTable0292: Str -> SubstForm => Str; --%
    oper mkNTable0292 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "łło";
      SF Sg Gen => x + "łły";
      SF Sg Dat => x + "lle";
      SF Sg Acc => x + "łłę";
      SF Sg Instr => x + "łłą";
      SF Sg Loc => x + "lle";
      SF Sg Voc => x + "łło";
      SF Pl Nom => x + "łłowie";
      SF Pl Gen => x + "łłów";
      SF Pl Dat => x + "łłom";
      SF Pl Acc => x + "łłów";
      SF Pl Instr => x + "łłami";
      SF Pl Loc => x + "łłach";
      SF Pl Voc => x + "łłowie"
    };

    oper mkNTable0293: Str -> SubstForm => Str; --%
    oper mkNTable0293 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oda";
      SF Sg Gen => x + "ody";
      SF Sg Dat => x + "odzie";
      SF Sg Acc => x + "odę";
      SF Sg Instr => x + "odą";
      SF Sg Loc => x + "odzie";
      SF Sg Voc => x + "odo";
      SF Pl Nom => x + "ody";
      SF Pl Gen => x + "ód";
      SF Pl Dat => x + "odom";
      SF Pl Acc => x + "ody";
      SF Pl Instr => x + "odami";
      SF Pl Loc => x + "odach";
      SF Pl Voc => x + "ody"
    };

    oper mkNTable0297: Str -> SubstForm => Str; --%
    oper mkNTable0297 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0299: Str -> SubstForm => Str; --%
    oper mkNTable0299 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sło";
      SF Sg Gen => x + "sła";
      SF Sg Dat => x + "słu";
      SF Sg Acc => x + "sło";
      SF Sg Instr => x + "słem";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "sło";
      SF Pl Nom => x + "sła";
      SF Pl Gen => x + "seł";
      SF Pl Dat => x + "słom";
      SF Pl Acc => x + "sła";
      SF Pl Instr => x + "słami";
      SF Pl Loc => x + "słach";
      SF Pl Voc => x + "sła"
    };

    oper mkNTable0300: Str -> SubstForm => Str; --%
    oper mkNTable0300 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "a";
      SF Pl Dat => x + "a";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "a";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0301: Str -> SubstForm => Str; --%
    oper mkNTable0301 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0302: Str -> SubstForm => Str; --%
    oper mkNTable0302 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0304: Str -> SubstForm => Str; --%
    oper mkNTable0304 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0305: Str -> SubstForm => Str; --%
    oper mkNTable0305 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ph";
      SF Sg Gen => x + "pha";
      SF Sg Dat => x + "phowi";
      SF Sg Acc => x + "pha";
      SF Sg Instr => x + "phem";
      SF Sg Loc => x + "fie";
      SF Sg Voc => x + "fie";
      SF Pl Nom => x + "phowie";
      SF Pl Gen => x + "phów";
      SF Pl Dat => x + "phom";
      SF Pl Acc => x + "phów";
      SF Pl Instr => x + "phami";
      SF Pl Loc => x + "phach";
      SF Pl Voc => x + "phowie"
    };

    oper mkNTable0308: Str -> SubstForm => Str; --%
    oper mkNTable0308 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0309: Str -> SubstForm => Str; --%
    oper mkNTable0309 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0312: Str -> SubstForm => Str; --%
    oper mkNTable0312 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ia";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "ia";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0313: Str -> SubstForm => Str; --%
    oper mkNTable0313 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ńka";
      SF Sg Gen => x + "ńki";
      SF Sg Dat => x + "ńce";
      SF Sg Acc => x + "ńkę";
      SF Sg Instr => x + "ńką";
      SF Sg Loc => x + "ńce";
      SF Sg Voc => x + "ńko";
      SF Pl Nom => x + "ńki";
      SF Pl Gen => x + "niek";
      SF Pl Dat => x + "ńkom";
      SF Pl Acc => x + "ńki";
      SF Pl Instr => x + "ńkami";
      SF Pl Loc => x + "ńkach";
      SF Pl Voc => x + "ńki"
    };

    oper mkNTable0315: Str -> SubstForm => Str; --%
    oper mkNTable0315 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0316: Str -> SubstForm => Str; --%
    oper mkNTable0316 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ź";
      SF Sg Gen => x + "zia";
      SF Sg Dat => x + "ziowi";
      SF Sg Acc => x + "zia";
      SF Sg Instr => x + "ziem";
      SF Sg Loc => x + "ziu";
      SF Sg Voc => x + "ziu";
      SF Pl Nom => x + "ziowie";
      SF Pl Gen => x + "ziów";
      SF Pl Dat => x + "ziom";
      SF Pl Acc => x + "ziów";
      SF Pl Instr => x + "ziami";
      SF Pl Loc => x + "ziach";
      SF Pl Voc => x + "ziowie"
    };

    oper mkNTable0317: Str -> SubstForm => Str; --%
    oper mkNTable0317 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "nia";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "nię";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "nio";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ń";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0324: Str -> SubstForm => Str; --%
    oper mkNTable0324 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0328: Str -> SubstForm => Str; --%
    oper mkNTable0328 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "zioł";
      SF Sg Gen => x + "zła";
      SF Sg Dat => x + "złowi";
      SF Sg Acc => x + "zła";
      SF Sg Instr => x + "złem";
      SF Sg Loc => x + "źle";
      SF Sg Voc => x + "źle";
      SF Pl Nom => x + "złowie";
      SF Pl Gen => x + "złów";
      SF Pl Dat => x + "złom";
      SF Pl Acc => x + "złów";
      SF Pl Instr => x + "złami";
      SF Pl Loc => x + "złach";
      SF Pl Voc => x + "złowie"
    };

    oper mkNTable0330: Str -> SubstForm => Str; --%
    oper mkNTable0330 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iew";
      SF Sg Gen => x + "wi";
      SF Sg Dat => x + "wi";
      SF Sg Acc => x + "iew";
      SF Sg Instr => x + "wią";
      SF Sg Loc => x + "wi";
      SF Sg Voc => x + "wi";
      SF Pl Nom => x + "wie";
      SF Pl Gen => x + "wi";
      SF Pl Dat => x + "wiom";
      SF Pl Acc => x + "wie";
      SF Pl Instr => x + "wiami";
      SF Pl Loc => x + "wiach";
      SF Pl Voc => x + "wie"
    };

    oper mkNTable0332: Str -> SubstForm => Str; --%
    oper mkNTable0332 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0333: Str -> SubstForm => Str; --%
    oper mkNTable0333 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ia";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "ia";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "iów";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "iów";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0334: Str -> SubstForm => Str; --%
    oper mkNTable0334 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zna";
      SF Sg Gen => x + "zny";
      SF Sg Dat => x + "źnie";
      SF Sg Acc => x + "znę";
      SF Sg Instr => x + "zną";
      SF Sg Loc => x + "źnie";
      SF Sg Voc => x + "zno";
      SF Pl Nom => x + "zny";
      SF Pl Gen => x + "zn";
      SF Pl Dat => x + "znom";
      SF Pl Acc => x + "zny";
      SF Pl Instr => x + "znami";
      SF Pl Loc => x + "znach";
      SF Pl Voc => x + "zny"
    };

    oper mkNTable0335: Str -> SubstForm => Str; --%
    oper mkNTable0335 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "cień";
      SF Sg Gen => x + "tnia";
      SF Sg Dat => x + "tniowi";
      SF Sg Acc => x + "tnia";
      SF Sg Instr => x + "tniem";
      SF Sg Loc => x + "tniu";
      SF Sg Voc => x + "tniu";
      SF Pl Nom => x + "tniowie";
      SF Pl Gen => x + "tniów";
      SF Pl Dat => x + "tniom";
      SF Pl Acc => x + "tniów";
      SF Pl Instr => x + "tniami";
      SF Pl Loc => x + "tniach";
      SF Pl Voc => x + "tniowie"
    };

    oper mkNTable0337: Str -> SubstForm => Str; --%
    oper mkNTable0337 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "to";
      SF Sg Gen => x + "ty";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "tę";
      SF Sg Instr => x + "tą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => x + "towie";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "tów";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "towie"
    };

    oper mkNTable0338: Str -> SubstForm => Str; --%
    oper mkNTable0338 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "m";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0339: Str -> SubstForm => Str; --%
    oper mkNTable0339 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "nia";
      SF Sg Gen => x + "nii";
      SF Sg Dat => x + "nii";
      SF Sg Acc => x + "nię";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "nii";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ń";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0342: Str -> SubstForm => Str; --%
    oper mkNTable0342 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ew";
      SF Sg Gen => x + "wa";
      SF Sg Dat => x + "wu";
      SF Sg Acc => x + "wa";
      SF Sg Instr => x + "wem";
      SF Sg Loc => x + "wie";
      SF Sg Voc => x + "wie";
      SF Pl Nom => x + "wowie";
      SF Pl Gen => x + "wów";
      SF Pl Dat => x + "wom";
      SF Pl Acc => x + "wów";
      SF Pl Instr => x + "wami";
      SF Pl Loc => x + "wach";
      SF Pl Voc => x + "wowie"
    };

    oper mkNTable0343: Str -> SubstForm => Str; --%
    oper mkNTable0343 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ew";
      SF Sg Gen => x + "wa";
      SF Sg Dat => x + "wu";
      SF Sg Acc => x + "wa";
      SF Sg Instr => x + "wem";
      SF Sg Loc => x + "wie";
      SF Sg Voc => x + "wie";
      SF Pl Nom => x + "wy";
      SF Pl Gen => x + "wów";
      SF Pl Dat => x + "wom";
      SF Pl Acc => x + "wy";
      SF Pl Instr => x + "wami";
      SF Pl Loc => x + "wach";
      SF Pl Voc => x + "wy"
    };

    oper mkNTable0348: Str -> SubstForm => Str; --%
    oper mkNTable0348 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "-u";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "-u";
      SF Sg Voc => x + "-u";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0349: Str -> SubstForm => Str; --%
    oper mkNTable0349 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "ciek";
      SF Sg Gen => x + "ćka";
      SF Sg Dat => x + "ćkowi";
      SF Sg Acc => x + "ćka";
      SF Sg Instr => x + "ćkiem";
      SF Sg Loc => x + "ćku";
      SF Sg Voc => x + "ćku";
      SF Pl Nom => x + "ćkowie";
      SF Pl Gen => x + "ćków";
      SF Pl Dat => x + "ćkom";
      SF Pl Acc => x + "ćków";
      SF Pl Instr => x + "ćkami";
      SF Pl Loc => x + "ćkach";
      SF Pl Voc => x + "ćkowie"
    };

    oper mkNTable0350: Str -> SubstForm => Str; --%
    oper mkNTable0350 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0352: Str -> SubstForm => Str; --%
    oper mkNTable0352 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0353: Str -> SubstForm => Str; --%
    oper mkNTable0353 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "r";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "rowie";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "rów";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "rowie"
    };

    oper mkNTable0356: Str -> SubstForm => Str; --%
    oper mkNTable0356 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "cowie";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cowie"
    };

    oper mkNTable0360: Str -> SubstForm => Str; --%
    oper mkNTable0360 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "cowie";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "cowi";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cowie"
    };

    oper mkNTable0364: Str -> SubstForm => Str; --%
    oper mkNTable0364 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0365: Str -> SubstForm => Str; --%
    oper mkNTable0365 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0366: Str -> SubstForm => Str; --%
    oper mkNTable0366 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ec";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0373: Str -> SubstForm => Str; --%
    oper mkNTable0373 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0374: Str -> SubstForm => Str; --%
    oper mkNTable0374 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ech";
      SF Sg Gen => x + "cha";
      SF Sg Dat => x + "chowi";
      SF Sg Acc => x + "cha";
      SF Sg Instr => x + "chem";
      SF Sg Loc => x + "chu";
      SF Sg Voc => x + "chu";
      SF Pl Nom => x + "chowie";
      SF Pl Gen => x + "chów";
      SF Pl Dat => x + "chom";
      SF Pl Acc => x + "chów";
      SF Pl Instr => x + "chami";
      SF Pl Loc => x + "chach";
      SF Pl Voc => x + "chowie"
    };

    oper mkNTable0375: Str -> SubstForm => Str; --%
    oper mkNTable0375 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "go";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "go";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0378: Str -> SubstForm => Str; --%
    oper mkNTable0378 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cha";
      SF Sg Gen => x + "chy";
      SF Sg Dat => x + "sze";
      SF Sg Acc => x + "chę";
      SF Sg Instr => x + "chą";
      SF Sg Loc => x + "sze";
      SF Sg Voc => x + "cho";
      SF Pl Nom => x + "chowie";
      SF Pl Gen => x + "chów";
      SF Pl Dat => x + "chom";
      SF Pl Acc => x + "chów";
      SF Pl Instr => x + "chami";
      SF Pl Loc => x + "chach";
      SF Pl Voc => x + "chowie"
    };

    oper mkNTable0379: Str -> SubstForm => Str; --%
    oper mkNTable0379 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ę";
      SF Sg Gen => x + "ęcia";
      SF Sg Dat => x + "ęciu";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ęciem";
      SF Sg Loc => x + "ęciu";
      SF Sg Voc => x + "ę";
      SF Pl Nom => x + "ęta";
      SF Pl Gen => x + "ąt";
      SF Pl Dat => x + "ętom";
      SF Pl Acc => x + "ęta";
      SF Pl Instr => x + "ętami";
      SF Pl Loc => x + "ętach";
      SF Pl Voc => x + "ęta"
    };

    oper mkNTable0382: Str -> SubstForm => Str; --%
    oper mkNTable0382 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "zi";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "zi"
    };

    oper mkNTable0383: Str -> SubstForm => Str; --%
    oper mkNTable0383 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "tt";
      SF Sg Gen => x + "tta";
      SF Sg Dat => x + "ttowi";
      SF Sg Acc => x + "tta";
      SF Sg Instr => x + "ttem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "ttowie";
      SF Pl Gen => x + "ttów";
      SF Pl Dat => x + "ttom";
      SF Pl Acc => x + "ttów";
      SF Pl Instr => x + "ttami";
      SF Pl Loc => x + "ttach";
      SF Pl Voc => x + "ttowie"
    };

    oper mkNTable0386: Str -> SubstForm => Str; --%
    oper mkNTable0386 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ót";
      SF Sg Gen => x + "ota";
      SF Sg Dat => x + "otowi";
      SF Sg Acc => x + "ota";
      SF Sg Instr => x + "otem";
      SF Sg Loc => x + "ocie";
      SF Sg Voc => x + "ocie";
      SF Pl Nom => x + "otowie";
      SF Pl Gen => x + "otów";
      SF Pl Dat => x + "otom";
      SF Pl Acc => x + "otów";
      SF Pl Instr => x + "otami";
      SF Pl Loc => x + "otach";
      SF Pl Voc => x + "otowie"
    };

    oper mkNTable0388: Str -> SubstForm => Str; --%
    oper mkNTable0388 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0390: Str -> SubstForm => Str; --%
    oper mkNTable0390 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cze";
      SF Pl Nom => x + "cy";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cy"
    };

    oper mkNTable0398: Str -> SubstForm => Str; --%
    oper mkNTable0398 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zeł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "łowie";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "łów";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "łowie"
    };

    oper mkNTable0399: Str -> SubstForm => Str; --%
    oper mkNTable0399 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "óg";
      SF Sg Gen => x + "ogu";
      SF Sg Dat => x + "ogowi";
      SF Sg Acc => x + "óg";
      SF Sg Instr => x + "ogiem";
      SF Sg Loc => x + "ogu";
      SF Sg Voc => x + "ogu";
      SF Pl Nom => x + "ogi";
      SF Pl Gen => x + "ogów";
      SF Pl Dat => x + "ogom";
      SF Pl Acc => x + "ogi";
      SF Pl Instr => x + "ogami";
      SF Pl Loc => x + "ogach";
      SF Pl Voc => x + "ogi"
    };

    oper mkNTable0400: Str -> SubstForm => Str; --%
    oper mkNTable0400 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "óg";
      SF Sg Gen => x + "oga";
      SF Sg Dat => x + "ogowi";
      SF Sg Acc => x + "óg";
      SF Sg Instr => x + "ogiem";
      SF Sg Loc => x + "ogu";
      SF Sg Voc => x + "ogu";
      SF Pl Nom => x + "ogi";
      SF Pl Gen => x + "ogów";
      SF Pl Dat => x + "ogom";
      SF Pl Acc => x + "ogi";
      SF Pl Instr => x + "ogami";
      SF Pl Loc => x + "ogach";
      SF Pl Voc => x + "ogi"
    };

    oper mkNTable0402: Str -> SubstForm => Str; --%
    oper mkNTable0402 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "nie";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niu";
      SF Sg Acc => x + "nie";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "nie";
      SF Pl Nom => x + "nia";
      SF Pl Gen => x + "ń";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nia";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nia"
    };

    oper mkNTable0403: Str -> SubstForm => Str; --%
    oper mkNTable0403 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0410: Str -> SubstForm => Str; --%
    oper mkNTable0410 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ro";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ro";
      SF Pl Nom => x + "rowie";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "rów";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "rowie"
    };

    oper mkNTable0411: Str -> SubstForm => Str; --%
    oper mkNTable0411 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "a";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "a";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "a";
      SF Pl Dat => x + "a";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "a";
      SF Pl Loc => x + "a";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0413: Str -> SubstForm => Str; --%
    oper mkNTable0413 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0418: Str -> SubstForm => Str; --%
    oper mkNTable0418 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0420: Str -> SubstForm => Str; --%
    oper mkNTable0420 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "o";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0421: Str -> SubstForm => Str; --%
    oper mkNTable0421 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ół";
      SF Sg Gen => x + "oła";
      SF Sg Dat => x + "ołowi";
      SF Sg Acc => x + "oła";
      SF Sg Instr => x + "ołem";
      SF Sg Loc => x + "ole";
      SF Sg Voc => x + "ole";
      SF Pl Nom => x + "ołowie";
      SF Pl Gen => x + "ołów";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "ołów";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "ołowie"
    };

    oper mkNTable0428: Str -> SubstForm => Str; --%
    oper mkNTable0428 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => x + "zi";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "zi"
    };

    oper mkNTable0429: Str -> SubstForm => Str; --%
    oper mkNTable0429 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ha";
      SF Sg Gen => x + "hy";
      SF Sg Dat => x + "że";
      SF Sg Acc => x + "hę";
      SF Sg Instr => x + "hą";
      SF Sg Loc => x + "że";
      SF Sg Voc => x + "ho";
      SF Pl Nom => x + "howie";
      SF Pl Gen => x + "hów";
      SF Pl Dat => x + "hom";
      SF Pl Acc => x + "hów";
      SF Pl Instr => x + "hami";
      SF Pl Loc => x + "hach";
      SF Pl Voc => x + "howie"
    };

    oper mkNTable0432: Str -> SubstForm => Str; --%
    oper mkNTable0432 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ca";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "cę";
      SF Sg Instr => x + "cą";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "co";
      SF Pl Nom => x + "cowie";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cowie"
    };

    oper mkNTable0435: Str -> SubstForm => Str; --%
    oper mkNTable0435 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "ka";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ek";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ków";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0438: Str -> SubstForm => Str; --%
    oper mkNTable0438 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "e";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "e";
      SF Pl Dat => x + "e";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "e";
      SF Pl Loc => x + "e";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0439: Str -> SubstForm => Str; --%
    oper mkNTable0439 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => x + "kowie";
      SF Pl Gen => x + "ek";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ek";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "kowie"
    };

    oper mkNTable0441: Str -> SubstForm => Str; --%
    oper mkNTable0441 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ól";
      SF Sg Gen => x + "ola";
      SF Sg Dat => x + "olowi";
      SF Sg Acc => x + "ola";
      SF Sg Instr => x + "olem";
      SF Sg Loc => x + "olu";
      SF Sg Voc => x + "olu";
      SF Pl Nom => x + "olowie";
      SF Pl Gen => x + "oli";
      SF Pl Dat => x + "olom";
      SF Pl Acc => x + "oli";
      SF Pl Instr => x + "olami";
      SF Pl Loc => x + "olach";
      SF Pl Voc => x + "olowie"
    };

    oper mkNTable0444: Str -> SubstForm => Str; --%
    oper mkNTable0444 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0448: Str -> SubstForm => Str; --%
    oper mkNTable0448 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cze";
      SF Pl Nom => x + "cy";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cy"
    };

    oper mkNTable0456: Str -> SubstForm => Str; --%
    oper mkNTable0456 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ieł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "łowie";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "łów";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "łowie"
    };

    oper mkNTable0458: Str -> SubstForm => Str; --%
    oper mkNTable0458 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ój";
      SF Sg Gen => x + "oja";
      SF Sg Dat => x + "ojowi";
      SF Sg Acc => x + "oja";
      SF Sg Instr => x + "ojem";
      SF Sg Loc => x + "oju";
      SF Sg Voc => x + "oju";
      SF Pl Nom => x + "ojowie";
      SF Pl Gen => x + "ojów";
      SF Pl Dat => x + "ojom";
      SF Pl Acc => x + "ojów";
      SF Pl Instr => x + "ojami";
      SF Pl Loc => x + "ojach";
      SF Pl Voc => x + "ojowie"
    };

    oper mkNTable0459: Str -> SubstForm => Str; --%
    oper mkNTable0459 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "o";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "o";
      SF Pl Gen => x + "o";
      SF Pl Dat => x + "o";
      SF Pl Acc => x + "o";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "o"
    };

    oper mkNTable0460: Str -> SubstForm => Str; --%
    oper mkNTable0460 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0461: Str -> SubstForm => Str; --%
    oper mkNTable0461 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "asto";
      SF Sg Gen => x + "asta";
      SF Sg Dat => x + "astu";
      SF Sg Acc => x + "asto";
      SF Sg Instr => x + "astem";
      SF Sg Loc => x + "eście";
      SF Sg Voc => x + "asto";
      SF Pl Nom => x + "asta";
      SF Pl Gen => x + "ast";
      SF Pl Dat => x + "astom";
      SF Pl Acc => x + "asta";
      SF Pl Instr => x + "astami";
      SF Pl Loc => x + "astach";
      SF Pl Voc => x + "asta"
    };

    oper mkNTable0463: Str -> SubstForm => Str; --%
    oper mkNTable0463 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "ku";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ek";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ków";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0465: Str -> SubstForm => Str; --%
    oper mkNTable0465 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niec";
      SF Sg Gen => x + "ńca";
      SF Sg Dat => x + "ńcowi";
      SF Sg Acc => x + "niec";
      SF Sg Instr => x + "ńcem";
      SF Sg Loc => x + "ńcu";
      SF Sg Voc => x + "ńcu";
      SF Pl Nom => x + "ńce";
      SF Pl Gen => x + "ńców";
      SF Pl Dat => x + "ńcom";
      SF Pl Acc => x + "ńce";
      SF Pl Instr => x + "ńcami";
      SF Pl Loc => x + "ńcach";
      SF Pl Voc => x + "ńce"
    };

    oper mkNTable0466: Str -> SubstForm => Str; --%
    oper mkNTable0466 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ór";
      SF Sg Gen => x + "oru";
      SF Sg Dat => x + "orowi";
      SF Sg Acc => x + "ór";
      SF Sg Instr => x + "orem";
      SF Sg Loc => x + "orze";
      SF Sg Voc => x + "orze";
      SF Pl Nom => x + "ory";
      SF Pl Gen => x + "orów";
      SF Pl Dat => x + "orom";
      SF Pl Acc => x + "ory";
      SF Pl Instr => x + "orami";
      SF Pl Loc => x + "orach";
      SF Pl Voc => x + "ory"
    };

    oper mkNTable0467: Str -> SubstForm => Str; --%
    oper mkNTable0467 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "-otu";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0468: Str -> SubstForm => Str; --%
    oper mkNTable0468 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0469: Str -> SubstForm => Str; --%
    oper mkNTable0469 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "er";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "er";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "ry";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "ry";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "ry"
    };

    oper mkNTable0470: Str -> SubstForm => Str; --%
    oper mkNTable0470 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niec";
      SF Sg Gen => x + "ńca";
      SF Sg Dat => x + "ńcowi";
      SF Sg Acc => x + "ńca";
      SF Sg Instr => x + "ńcem";
      SF Sg Loc => x + "ńcu";
      SF Sg Voc => x + "ńcze";
      SF Pl Nom => x + "ńcowie";
      SF Pl Gen => x + "ńców";
      SF Pl Dat => x + "ńcom";
      SF Pl Acc => x + "ńców";
      SF Pl Instr => x + "ńcami";
      SF Pl Loc => x + "ńcach";
      SF Pl Voc => x + "ńcowie"
    };

    oper mkNTable0472: Str -> SubstForm => Str; --%
    oper mkNTable0472 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "e";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "e";
      SF Sg Loc => x + "e";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "e";
      SF Pl Loc => x + "e";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0475: Str -> SubstForm => Str; --%
    oper mkNTable0475 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => x + "ci";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ci";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "ci"
    };

    oper mkNTable0476: Str -> SubstForm => Str; --%
    oper mkNTable0476 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "anoc";
      SF Sg Gen => x + "iejnocy";
      SF Sg Dat => x + "iejnocy";
      SF Sg Acc => x + "ąnoc";
      SF Sg Instr => x + "ąnocą";
      SF Sg Loc => x + "iejnocy";
      SF Sg Voc => x + "anocy";
      SF Pl Nom => x + "ienoce";
      SF Pl Gen => x + "anocy";
      SF Pl Dat => x + "imnocom";
      SF Pl Acc => x + "ienoce";
      SF Pl Instr => x + "iminocami";
      SF Pl Loc => x + "ichnocach";
      SF Pl Voc => x + "ienoce"
    };

    oper mkNTable0477: Str -> SubstForm => Str; --%
    oper mkNTable0477 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0485: Str -> SubstForm => Str; --%
    oper mkNTable0485 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ier";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "rzy";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "rów";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "rzy"
    };

    oper mkNTable0486: Str -> SubstForm => Str; --%
    oper mkNTable0486 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zeł";
      SF Sg Gen => x + "zła";
      SF Sg Dat => x + "złowi";
      SF Sg Acc => x + "zła";
      SF Sg Instr => x + "złem";
      SF Sg Loc => x + "źle";
      SF Sg Voc => x + "źle";
      SF Pl Nom => x + "zły";
      SF Pl Gen => x + "złów";
      SF Pl Dat => x + "złom";
      SF Pl Acc => x + "zły";
      SF Pl Instr => x + "złami";
      SF Pl Loc => x + "złach";
      SF Pl Voc => x + "zły"
    };

    oper mkNTable0488: Str -> SubstForm => Str; --%
    oper mkNTable0488 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0490: Str -> SubstForm => Str; --%
    oper mkNTable0490 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ia";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ię";
      SF Sg Instr => x + "ią";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "io";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "ie";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0492: Str -> SubstForm => Str; --%
    oper mkNTable0492 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ło";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łu";
      SF Sg Acc => x + "ło";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => x + "ła";
      SF Pl Gen => x + "eł";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ła";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ła"
    };

    oper mkNTable0493: Str -> SubstForm => Str; --%
    oper mkNTable0493 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ier";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ier";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "ry";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "ry";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "ry"
    };

    oper mkNTable0494: Str -> SubstForm => Str; --%
    oper mkNTable0494 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sta";
      SF Sg Gen => x + "sty";
      SF Sg Dat => x + "ście";
      SF Sg Acc => x + "stę";
      SF Sg Instr => x + "stą";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "sto";
      SF Pl Nom => x + "ści";
      SF Pl Gen => x + "stów";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "stów";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "ści"
    };

    oper mkNTable0495: Str -> SubstForm => Str; --%
    oper mkNTable0495 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0496: Str -> SubstForm => Str; --%
    oper mkNTable0496 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ta";
      SF Sg Gen => x + "ty";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "tę";
      SF Sg Instr => x + "tą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => x + "ty";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ty";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ty"
    };

    oper mkNTable0497: Str -> SubstForm => Str; --%
    oper mkNTable0497 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0498: Str -> SubstForm => Str; --%
    oper mkNTable0498 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ni";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "nią";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "ni";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ń";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0499: Str -> SubstForm => Str; --%
    oper mkNTable0499 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "o";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "o";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "o"
    };

    oper mkNTable0500: Str -> SubstForm => Str; --%
    oper mkNTable0500 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0502: Str -> SubstForm => Str; --%
    oper mkNTable0502 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "t";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "ty";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ty";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ty"
    };

    oper mkNTable0503: Str -> SubstForm => Str; --%
    oper mkNTable0503 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0504: Str -> SubstForm => Str; --%
    oper mkNTable0504 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "ej";
      SF Sg Dat => x + "ej";
      SF Sg Acc => x + "ą";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ej";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0505: Str -> SubstForm => Str; --%
    oper mkNTable0505 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "c";
      SF Sg Gen => x + "cu";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "c";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0506: Str -> SubstForm => Str; --%
    oper mkNTable0506 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "g";
      SF Sg Gen => x + "ga";
      SF Sg Dat => x + "gowi";
      SF Sg Acc => x + "ga";
      SF Sg Instr => x + "giem";
      SF Sg Loc => x + "gu";
      SF Sg Voc => x + "gu";
      SF Pl Nom => x + "dzy";
      SF Pl Gen => x + "gów";
      SF Pl Dat => x + "gom";
      SF Pl Acc => x + "gów";
      SF Pl Instr => x + "gami";
      SF Pl Loc => x + "gach";
      SF Pl Voc => x + "dzy"
    };

    oper mkNTable0509: Str -> SubstForm => Str; --%
    oper mkNTable0509 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0510: Str -> SubstForm => Str; --%
    oper mkNTable0510 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "st";
      SF Sg Gen => x + "stu";
      SF Sg Dat => x + "stowi";
      SF Sg Acc => x + "st";
      SF Sg Instr => x + "stem";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "ście";
      SF Pl Nom => x + "sty";
      SF Pl Gen => x + "stów";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "sty";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "sty"
    };

    oper mkNTable0511: Str -> SubstForm => Str; --%
    oper mkNTable0511 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "to";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "tu";
      SF Sg Acc => x + "to";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => x + "ta";
      SF Pl Gen => x + "t";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ta";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ta"
    };

    oper mkNTable0512: Str -> SubstForm => Str; --%
    oper mkNTable0512 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "ka";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ka";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ków";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0513: Str -> SubstForm => Str; --%
    oper mkNTable0513 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "el";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "li";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0514: Str -> SubstForm => Str; --%
    oper mkNTable0514 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0517: Str -> SubstForm => Str; --%
    oper mkNTable0517 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "er";
      SF Sg Gen => x + "ru";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "er";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "ry";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "ry";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "ry"
    };

    oper mkNTable0518: Str -> SubstForm => Str; --%
    oper mkNTable0518 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0519: Str -> SubstForm => Str; --%
    oper mkNTable0519 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0520: Str -> SubstForm => Str; --%
    oper mkNTable0520 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "owa";
      SF Sg Gen => x + "owy";
      SF Sg Dat => x + "owie";
      SF Sg Acc => x + "owę";
      SF Sg Instr => x + "ową";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owo";
      SF Pl Nom => x + "owy";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "owom";
      SF Pl Acc => x + "owy";
      SF Pl Instr => x + "owami";
      SF Pl Loc => x + "owach";
      SF Pl Voc => x + "owy"
    };

    oper mkNTable0521: Str -> SubstForm => Str; --%
    oper mkNTable0521 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0523: Str -> SubstForm => Str; --%
    oper mkNTable0523 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0524: Str -> SubstForm => Str; --%
    oper mkNTable0524 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0525: Str -> SubstForm => Str; --%
    oper mkNTable0525 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ier";
      SF Sg Gen => x + "ru";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ier";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "ry";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "ry";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "ry"
    };

    oper mkNTable0526: Str -> SubstForm => Str; --%
    oper mkNTable0526 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ój";
      SF Sg Gen => x + "oju";
      SF Sg Dat => x + "ojowi";
      SF Sg Acc => x + "ój";
      SF Sg Instr => x + "ojem";
      SF Sg Loc => x + "oju";
      SF Sg Voc => x + "oju";
      SF Pl Nom => x + "oje";
      SF Pl Gen => x + "ojów";
      SF Pl Dat => x + "ojom";
      SF Pl Acc => x + "oje";
      SF Pl Instr => x + "ojami";
      SF Pl Loc => x + "ojach";
      SF Pl Voc => x + "oje"
    };

    oper mkNTable0527: Str -> SubstForm => Str; --%
    oper mkNTable0527 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "e";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "e";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "e";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "e";
      SF Pl Loc => x + "e";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0530: Str -> SubstForm => Str; --%
    oper mkNTable0530 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0531: Str -> SubstForm => Str; --%
    oper mkNTable0531 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "oł";
      SF Sg Gen => x + "oła";
      SF Sg Dat => x + "ołowi";
      SF Sg Acc => x + "oła";
      SF Sg Instr => x + "ołem";
      SF Sg Loc => x + "ele";
      SF Sg Voc => x + "ele";
      SF Pl Nom => x + "oły";
      SF Pl Gen => x + "ołów";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oły";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oły"
    };

    oper mkNTable0532: Str -> SubstForm => Str; --%
    oper mkNTable0532 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sta";
      SF Sg Gen => x + "sty";
      SF Sg Dat => x + "ście";
      SF Sg Acc => x + "stę";
      SF Sg Instr => x + "stą";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "sto";
      SF Pl Nom => x + "sty";
      SF Pl Gen => x + "stów";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "sty";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "sty"
    };

    oper mkNTable0533: Str -> SubstForm => Str; --%
    oper mkNTable0533 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ł";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0534: Str -> SubstForm => Str; --%
    oper mkNTable0534 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "ziec";
      SF Sg Gen => x + "źca";
      SF Sg Dat => x + "źcowi";
      SF Sg Acc => x + "ziec";
      SF Sg Instr => x + "źcem";
      SF Sg Loc => x + "źcu";
      SF Sg Voc => x + "źcu";
      SF Pl Nom => x + "źce";
      SF Pl Gen => x + "źców";
      SF Pl Dat => x + "źcom";
      SF Pl Acc => x + "źce";
      SF Pl Instr => x + "źcami";
      SF Pl Loc => x + "źcach";
      SF Pl Voc => x + "źce"
    };

    oper mkNTable0536: Str -> SubstForm => Str; --%
    oper mkNTable0536 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ało";
      SF Sg Gen => x + "ała";
      SF Sg Dat => x + "ału";
      SF Sg Acc => x + "ało";
      SF Sg Instr => x + "ałem";
      SF Sg Loc => x + "ele";
      SF Sg Voc => x + "ało";
      SF Pl Nom => x + "ała";
      SF Pl Gen => x + "ał";
      SF Pl Dat => x + "ałom";
      SF Pl Acc => x + "ała";
      SF Pl Instr => x + "ałami";
      SF Pl Loc => x + "ałach";
      SF Pl Voc => x + "ała"
    };

    oper mkNTable0537: Str -> SubstForm => Str; --%
    oper mkNTable0537 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ro";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "ru";
      SF Sg Acc => x + "ro";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "ro";
      SF Pl Nom => x + "ra";
      SF Pl Gen => x + "er";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "ra";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "ra"
    };

    oper mkNTable0538: Str -> SubstForm => Str; --%
    oper mkNTable0538 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oza";
      SF Sg Gen => x + "ozy";
      SF Sg Dat => x + "ozie";
      SF Sg Acc => x + "ozę";
      SF Sg Instr => x + "ozą";
      SF Sg Loc => x + "ozie";
      SF Sg Voc => x + "ozo";
      SF Pl Nom => x + "ozy";
      SF Pl Gen => x + "óz";
      SF Pl Dat => x + "ozom";
      SF Pl Acc => x + "ozy";
      SF Pl Instr => x + "ozami";
      SF Pl Loc => x + "ozach";
      SF Pl Voc => x + "ozy"
    };

    oper mkNTable0539: Str -> SubstForm => Str; --%
    oper mkNTable0539 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0541: Str -> SubstForm => Str; --%
    oper mkNTable0541 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0542: Str -> SubstForm => Str; --%
    oper mkNTable0542 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0543: Str -> SubstForm => Str; --%
    oper mkNTable0543 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ło";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łu";
      SF Sg Acc => x + "ło";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => x + "ła";
      SF Pl Gen => x + "ł";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ła";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ła"
    };

    oper mkNTable0544: Str -> SubstForm => Str; --%
    oper mkNTable0544 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "lu";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "iel";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "lów";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0545: Str -> SubstForm => Str; --%
    oper mkNTable0545 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ążę";
      SF Sg Gen => x + "ęcia";
      SF Sg Dat => x + "ęciu";
      SF Sg Acc => x + "ęcia";
      SF Sg Instr => x + "ęciem";
      SF Sg Loc => x + "ęciu";
      SF Sg Voc => x + "ążę";
      SF Pl Nom => x + "ążęta";
      SF Pl Gen => x + "ążąt";
      SF Pl Dat => x + "ążętom";
      SF Pl Acc => x + "ążąt";
      SF Pl Instr => x + "ążętami";
      SF Pl Loc => x + "ążętach";
      SF Pl Voc => x + "ążęta"
    };

    oper mkNTable0546: Str -> SubstForm => Str; --%
    oper mkNTable0546 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0547: Str -> SubstForm => Str; --%
    oper mkNTable0547 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ni";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "nię";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "ni";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ń";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0548: Str -> SubstForm => Str; --%
    oper mkNTable0548 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "er";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "ry";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "ry";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "ry"
    };

    oper mkNTable0549: Str -> SubstForm => Str; --%
    oper mkNTable0549 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "st";
      SF Sg Gen => x + "sta";
      SF Sg Dat => x + "stowi";
      SF Sg Acc => x + "st";
      SF Sg Instr => x + "stem";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "ście";
      SF Pl Nom => x + "sty";
      SF Pl Gen => x + "stów";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "sty";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "sty"
    };

    oper mkNTable0550: Str -> SubstForm => Str; --%
    oper mkNTable0550 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0552: Str -> SubstForm => Str; --%
    oper mkNTable0552 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0553: Str -> SubstForm => Str; --%
    oper mkNTable0553 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0554: Str -> SubstForm => Str; --%
    oper mkNTable0554 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "ym";
      SF Sg Loc => x + "ym";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0555: Str -> SubstForm => Str; --%
    oper mkNTable0555 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "no";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "nu";
      SF Sg Acc => x + "no";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "no";
      SF Pl Nom => x + "na";
      SF Pl Gen => x + "ien";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "na";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "na"
    };

    oper mkNTable0557: Str -> SubstForm => Str; --%
    oper mkNTable0557 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "iel";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "lów";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0558: Str -> SubstForm => Str; --%
    oper mkNTable0558 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "lu";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "el";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "li";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0559: Str -> SubstForm => Str; --%
    oper mkNTable0559 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "at";
      SF Sg Gen => x + "atu";
      SF Sg Dat => x + "atowi";
      SF Sg Acc => x + "at";
      SF Sg Instr => x + "atem";
      SF Sg Loc => x + "ecie";
      SF Sg Voc => x + "ecie";
      SF Pl Nom => x + "aty";
      SF Pl Gen => x + "atów";
      SF Pl Dat => x + "atom";
      SF Pl Acc => x + "aty";
      SF Pl Instr => x + "atami";
      SF Pl Loc => x + "atach";
      SF Pl Voc => x + "aty"
    };

    oper mkNTable0561: Str -> SubstForm => Str; --%
    oper mkNTable0561 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "zy";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "zy"
    };

    oper mkNTable0562: Str -> SubstForm => Str; --%
    oper mkNTable0562 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0563: Str -> SubstForm => Str; --%
    oper mkNTable0563 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ień";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "ień";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0564: Str -> SubstForm => Str; --%
    oper mkNTable0564 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "óz";
      SF Sg Gen => x + "ozu";
      SF Sg Dat => x + "ozowi";
      SF Sg Acc => x + "óz";
      SF Sg Instr => x + "ozem";
      SF Sg Loc => x + "ozie";
      SF Sg Voc => x + "ozie";
      SF Pl Nom => x + "ozy";
      SF Pl Gen => x + "ozów";
      SF Pl Dat => x + "ozom";
      SF Pl Acc => x + "ozy";
      SF Pl Instr => x + "ozami";
      SF Pl Loc => x + "ozach";
      SF Pl Voc => x + "ozy"
    };

    oper mkNTable0565: Str -> SubstForm => Str; --%
    oper mkNTable0565 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0566: Str -> SubstForm => Str; --%
    oper mkNTable0566 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "li";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0567: Str -> SubstForm => Str; --%
    oper mkNTable0567 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0568: Str -> SubstForm => Str; --%
    oper mkNTable0568 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ół";
      SF Sg Gen => x + "ołu";
      SF Sg Dat => x + "ołowi";
      SF Sg Acc => x + "ołu";
      SF Sg Instr => x + "ołem";
      SF Sg Loc => x + "ole";
      SF Sg Voc => x + "ole";
      SF Pl Nom => x + "oły";
      SF Pl Gen => x + "ołów";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oły";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oły"
    };

    oper mkNTable0570: Str -> SubstForm => Str; --%
    oper mkNTable0570 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0571: Str -> SubstForm => Str; --%
    oper mkNTable0571 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "li";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "li";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0572: Str -> SubstForm => Str; --%
    oper mkNTable0572 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cie";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciu";
      SF Sg Acc => x + "cie";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "cia";
      SF Pl Gen => x + "ć";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cia";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cia"
    };

    oper mkNTable0573: Str -> SubstForm => Str; --%
    oper mkNTable0573 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ciów";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0574: Str -> SubstForm => Str; --%
    oper mkNTable0574 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ez";
      SF Sg Gen => x + "zu";
      SF Sg Dat => x + "zowi";
      SF Sg Acc => x + "ez";
      SF Sg Instr => x + "zem";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => x + "zy";
      SF Pl Gen => x + "zów";
      SF Pl Dat => x + "zom";
      SF Pl Acc => x + "zy";
      SF Pl Instr => x + "zami";
      SF Pl Loc => x + "zach";
      SF Pl Voc => x + "zy"
    };

    oper mkNTable0575: Str -> SubstForm => Str; --%
    oper mkNTable0575 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "no";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "nu";
      SF Sg Acc => x + "no";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "no";
      SF Pl Nom => x + "na";
      SF Pl Gen => x + "en";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "na";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "na"
    };

    oper mkNTable0577: Str -> SubstForm => Str; --%
    oper mkNTable0577 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "cy";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cy"
    };

    oper mkNTable0578: Str -> SubstForm => Str; --%
    oper mkNTable0578 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0579: Str -> SubstForm => Str; --%
    oper mkNTable0579 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ór";
      SF Sg Gen => x + "ora";
      SF Sg Dat => x + "orowi";
      SF Sg Acc => x + "ora";
      SF Sg Instr => x + "orem";
      SF Sg Loc => x + "orze";
      SF Sg Voc => x + "orze";
      SF Pl Nom => x + "ory";
      SF Pl Gen => x + "orów";
      SF Pl Dat => x + "orom";
      SF Pl Acc => x + "ory";
      SF Pl Instr => x + "orami";
      SF Pl Loc => x + "orach";
      SF Pl Voc => x + "ory"
    };

    oper mkNTable0580: Str -> SubstForm => Str; --%
    oper mkNTable0580 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0581: Str -> SubstForm => Str; --%
    oper mkNTable0581 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => x + "cy";
      SF Pl Gen => x + "ków";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ków";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "cy"
    };

    oper mkNTable0582: Str -> SubstForm => Str; --%
    oper mkNTable0582 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niec";
      SF Sg Gen => x + "ńca";
      SF Sg Dat => x + "ńcowi";
      SF Sg Acc => x + "ńca";
      SF Sg Instr => x + "ńcem";
      SF Sg Loc => x + "ńcu";
      SF Sg Voc => x + "ńcu";
      SF Pl Nom => x + "ńce";
      SF Pl Gen => x + "ńców";
      SF Pl Dat => x + "ńcom";
      SF Pl Acc => x + "ńce";
      SF Pl Instr => x + "ńcami";
      SF Pl Loc => x + "ńcach";
      SF Pl Voc => x + "ńce"
    };

    oper mkNTable0583: Str -> SubstForm => Str; --%
    oper mkNTable0583 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "i";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0584: Str -> SubstForm => Str; --%
    oper mkNTable0584 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ole";
      SF Sg Gen => x + "ola";
      SF Sg Dat => x + "olu";
      SF Sg Acc => x + "ole";
      SF Sg Instr => x + "olem";
      SF Sg Loc => x + "olu";
      SF Sg Voc => x + "ole";
      SF Pl Nom => x + "ola";
      SF Pl Gen => x + "ól";
      SF Pl Dat => x + "olom";
      SF Pl Acc => x + "ola";
      SF Pl Instr => x + "olami";
      SF Pl Loc => x + "olach";
      SF Pl Voc => x + "ola"
    };

    oper mkNTable0585: Str -> SubstForm => Str; --%
    oper mkNTable0585 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "wa";
      SF Sg Gen => x + "wy";
      SF Sg Dat => x + "wie";
      SF Sg Acc => x + "wę";
      SF Sg Instr => x + "wą";
      SF Sg Loc => x + "wie";
      SF Sg Voc => x + "wo";
      SF Pl Nom => x + "wy";
      SF Pl Gen => x + "ew";
      SF Pl Dat => x + "wom";
      SF Pl Acc => x + "wy";
      SF Pl Instr => x + "wami";
      SF Pl Loc => x + "wach";
      SF Pl Voc => x + "wy"
    };

    oper mkNTable0587: Str -> SubstForm => Str; --%
    oper mkNTable0587 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "en";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "nowi";
      SF Sg Acc => x + "en";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "nie";
      SF Pl Nom => x + "ny";
      SF Pl Gen => x + "nów";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "ny";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "ny"
    };

    oper mkNTable0588: Str -> SubstForm => Str; --%
    oper mkNTable0588 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "ciek";
      SF Sg Gen => x + "ćka";
      SF Sg Dat => x + "ćkowi";
      SF Sg Acc => x + "ćka";
      SF Sg Instr => x + "ćkiem";
      SF Sg Loc => x + "ćku";
      SF Sg Voc => x + "ćku";
      SF Pl Nom => x + "ćki";
      SF Pl Gen => x + "ćków";
      SF Pl Dat => x + "ćkom";
      SF Pl Acc => x + "ćki";
      SF Pl Instr => x + "ćkami";
      SF Pl Loc => x + "ćkach";
      SF Pl Voc => x + "ćki"
    };

    oper mkNTable0589: Str -> SubstForm => Str; --%
    oper mkNTable0589 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "m";
      SF Sg Loc => x + "m";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ch";
      SF Pl Dat => x + "m";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "mi";
      SF Pl Loc => x + "ch";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0590: Str -> SubstForm => Str; --%
    oper mkNTable0590 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "ziec";
      SF Sg Gen => x + "źca";
      SF Sg Dat => x + "źcowi";
      SF Sg Acc => x + "źca";
      SF Sg Instr => x + "źcem";
      SF Sg Loc => x + "źcu";
      SF Sg Voc => x + "źcu";
      SF Pl Nom => x + "źce";
      SF Pl Gen => x + "źców";
      SF Pl Dat => x + "źcom";
      SF Pl Acc => x + "źce";
      SF Pl Instr => x + "źcami";
      SF Pl Loc => x + "źcach";
      SF Pl Voc => x + "źce"
    };

    oper mkNTable0591: Str -> SubstForm => Str; --%
    oper mkNTable0591 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "cy";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cy"
    };

    oper mkNTable0592: Str -> SubstForm => Str; --%
    oper mkNTable0592 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0593: Str -> SubstForm => Str; --%
    oper mkNTable0593 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "iel";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "li";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0594: Str -> SubstForm => Str; --%
    oper mkNTable0594 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ora";
      SF Sg Gen => x + "ory";
      SF Sg Dat => x + "orze";
      SF Sg Acc => x + "orę";
      SF Sg Instr => x + "orą";
      SF Sg Loc => x + "orze";
      SF Sg Voc => x + "oro";
      SF Pl Nom => x + "ory";
      SF Pl Gen => x + "ór";
      SF Pl Dat => x + "orom";
      SF Pl Acc => x + "ory";
      SF Pl Instr => x + "orami";
      SF Pl Loc => x + "orach";
      SF Pl Voc => x + "ory"
    };

    oper mkNTable0597: Str -> SubstForm => Str; --%
    oper mkNTable0597 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ha";
      SF Sg Gen => x + "hy";
      SF Sg Dat => x + "że";
      SF Sg Acc => x + "hę";
      SF Sg Instr => x + "hą";
      SF Sg Loc => x + "że";
      SF Sg Voc => x + "ho";
      SF Pl Nom => x + "hy";
      SF Pl Gen => x + "h";
      SF Pl Dat => x + "hom";
      SF Pl Acc => x + "hy";
      SF Pl Instr => x + "hami";
      SF Pl Loc => x + "hach";
      SF Pl Voc => x + "hy"
    };

    oper mkNTable0599: Str -> SubstForm => Str; --%
    oper mkNTable0599 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "tu";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "cia";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ci";
      SF Pl Instr => x + "ćmi";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cia"
    };

    oper mkNTable0600: Str -> SubstForm => Str; --%
    oper mkNTable0600 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ew";
      SF Sg Gen => x + "wi";
      SF Sg Dat => x + "wi";
      SF Sg Acc => x + "ew";
      SF Sg Instr => x + "wią";
      SF Sg Loc => x + "wi";
      SF Sg Voc => x + "wi";
      SF Pl Nom => x + "wi";
      SF Pl Gen => x + "wi";
      SF Pl Dat => x + "wiom";
      SF Pl Acc => x + "wi";
      SF Pl Instr => x + "wiami";
      SF Pl Loc => x + "wiach";
      SF Pl Voc => x + "wi"
    };

    oper mkNTable0601: Str -> SubstForm => Str; --%
    oper mkNTable0601 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0602: Str -> SubstForm => Str; --%
    oper mkNTable0602 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zda";
      SF Sg Gen => x + "zdy";
      SF Sg Dat => x + "ździe";
      SF Sg Acc => x + "zdę";
      SF Sg Instr => x + "zdą";
      SF Sg Loc => x + "ździe";
      SF Sg Voc => x + "zdo";
      SF Pl Nom => x + "zdy";
      SF Pl Gen => x + "zd";
      SF Pl Dat => x + "zdom";
      SF Pl Acc => x + "zdy";
      SF Pl Instr => x + "zdami";
      SF Pl Loc => x + "zdach";
      SF Pl Voc => x + "zdy"
    };

    oper mkNTable0603: Str -> SubstForm => Str; --%
    oper mkNTable0603 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "sia";
      SF Sg Dat => x + "siowi";
      SF Sg Acc => x + "sia";
      SF Sg Instr => x + "siem";
      SF Sg Loc => x + "siu";
      SF Sg Voc => x + "siu";
      SF Pl Nom => x + "sie";
      SF Pl Gen => x + "siów";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "sie";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "sie"
    };

    oper mkNTable0604: Str -> SubstForm => Str; --%
    oper mkNTable0604 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ę";
      SF Sg Gen => x + "enia";
      SF Sg Dat => x + "eniu";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "eniem";
      SF Sg Loc => x + "eniu";
      SF Sg Voc => x + "ę";
      SF Pl Nom => x + "ona";
      SF Pl Gen => x + "on";
      SF Pl Dat => x + "onom";
      SF Pl Acc => x + "ona";
      SF Pl Instr => x + "onami";
      SF Pl Loc => x + "onach";
      SF Pl Voc => x + "ona"
    };

    oper mkNTable0605: Str -> SubstForm => Str; --%
    oper mkNTable0605 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0606: Str -> SubstForm => Str; --%
    oper mkNTable0606 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "óg";
      SF Sg Gen => x + "oga";
      SF Sg Dat => x + "ogowi";
      SF Sg Acc => x + "oga";
      SF Sg Instr => x + "ogiem";
      SF Sg Loc => x + "ogu";
      SF Sg Voc => x + "ogu";
      SF Pl Nom => x + "ogi";
      SF Pl Gen => x + "ogów";
      SF Pl Dat => x + "ogom";
      SF Pl Acc => x + "ogi";
      SF Pl Instr => x + "ogami";
      SF Pl Loc => x + "ogach";
      SF Pl Voc => x + "ogi"
    };

    oper mkNTable0607: Str -> SubstForm => Str; --%
    oper mkNTable0607 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "siec";
      SF Sg Gen => x + "śca";
      SF Sg Dat => x + "ścowi";
      SF Sg Acc => x + "siec";
      SF Sg Instr => x + "ścem";
      SF Sg Loc => x + "ścu";
      SF Sg Voc => x + "ścu";
      SF Pl Nom => x + "śce";
      SF Pl Gen => x + "śców";
      SF Pl Dat => x + "ścom";
      SF Pl Acc => x + "śce";
      SF Pl Instr => x + "ścami";
      SF Pl Loc => x + "ścach";
      SF Pl Voc => x + "śce"
    };

    oper mkNTable0608: Str -> SubstForm => Str; --%
    oper mkNTable0608 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0609: Str -> SubstForm => Str; --%
    oper mkNTable0609 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ób";
      SF Sg Gen => x + "oba";
      SF Sg Dat => x + "obowi";
      SF Sg Acc => x + "oba";
      SF Sg Instr => x + "obem";
      SF Sg Loc => x + "obie";
      SF Sg Voc => x + "obie";
      SF Pl Nom => x + "oby";
      SF Pl Gen => x + "obów";
      SF Pl Dat => x + "obom";
      SF Pl Acc => x + "oby";
      SF Pl Instr => x + "obami";
      SF Pl Loc => x + "obach";
      SF Pl Voc => x + "oby"
    };

    oper mkNTable0610: Str -> SubstForm => Str; --%
    oper mkNTable0610 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ód";
      SF Sg Gen => x + "odu";
      SF Sg Dat => x + "odowi";
      SF Sg Acc => x + "ód";
      SF Sg Instr => x + "odem";
      SF Sg Loc => x + "odzie";
      SF Sg Voc => x + "odzie";
      SF Pl Nom => x + "ody";
      SF Pl Gen => x + "odów";
      SF Pl Dat => x + "odom";
      SF Pl Acc => x + "ody";
      SF Pl Instr => x + "odami";
      SF Pl Loc => x + "odach";
      SF Pl Voc => x + "ody"
    };

    oper mkNTable0611: Str -> SubstForm => Str; --%
    oper mkNTable0611 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0612: Str -> SubstForm => Str; --%
    oper mkNTable0612 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "niu";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0614: Str -> SubstForm => Str; --%
    oper mkNTable0614 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "m";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0615: Str -> SubstForm => Str; --%
    oper mkNTable0615 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "na";
      SF Sg Gen => x + "ny";
      SF Sg Dat => x + "nie";
      SF Sg Acc => x + "nę";
      SF Sg Instr => x + "ną";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "no";
      SF Pl Nom => x + "ny";
      SF Pl Gen => x + "en";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "ny";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "ny"
    };

    oper mkNTable0618: Str -> SubstForm => Str; --%
    oper mkNTable0618 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0619: Str -> SubstForm => Str; --%
    oper mkNTable0619 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "li";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0620: Str -> SubstForm => Str; --%
    oper mkNTable0620 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zen";
      SF Sg Gen => x + "zna";
      SF Sg Dat => x + "znowi";
      SF Sg Acc => x + "zna";
      SF Sg Instr => x + "znem";
      SF Sg Loc => x + "źnie";
      SF Sg Voc => x + "źnie";
      SF Pl Nom => x + "źni";
      SF Pl Gen => x + "znów";
      SF Pl Dat => x + "znom";
      SF Pl Acc => x + "znów";
      SF Pl Instr => x + "znami";
      SF Pl Loc => x + "znach";
      SF Pl Voc => x + "źni"
    };

    oper mkNTable0621: Str -> SubstForm => Str; --%
    oper mkNTable0621 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąd";
      SF Sg Gen => x + "ędu";
      SF Sg Dat => x + "ędowi";
      SF Sg Acc => x + "ąd";
      SF Sg Instr => x + "ędem";
      SF Sg Loc => x + "ędzie";
      SF Sg Voc => x + "ędzie";
      SF Pl Nom => x + "ędy";
      SF Pl Gen => x + "ędów";
      SF Pl Dat => x + "ędom";
      SF Pl Acc => x + "ędy";
      SF Pl Instr => x + "ędami";
      SF Pl Loc => x + "ędach";
      SF Pl Voc => x + "ędy"
    };

    oper mkNTable0622: Str -> SubstForm => Str; --%
    oper mkNTable0622 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "en";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "nowi";
      SF Sg Acc => x + "na";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "nie";
      SF Pl Nom => x + "ny";
      SF Pl Gen => x + "nów";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "ny";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "ny"
    };

    oper mkNTable0624: Str -> SubstForm => Str; --%
    oper mkNTable0624 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ób";
      SF Sg Gen => x + "obu";
      SF Sg Dat => x + "obowi";
      SF Sg Acc => x + "ób";
      SF Sg Instr => x + "obem";
      SF Sg Loc => x + "obie";
      SF Sg Voc => x + "obie";
      SF Pl Nom => x + "oby";
      SF Pl Gen => x + "obów";
      SF Pl Dat => x + "obom";
      SF Pl Acc => x + "oby";
      SF Pl Instr => x + "obami";
      SF Pl Loc => x + "obach";
      SF Pl Voc => x + "oby"
    };

    oper mkNTable0625: Str -> SubstForm => Str; --%
    oper mkNTable0625 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "óbr";
      SF Sg Gen => x + "obra";
      SF Sg Dat => x + "obrowi";
      SF Sg Acc => x + "obra";
      SF Sg Instr => x + "obrem";
      SF Sg Loc => x + "obrze";
      SF Sg Voc => x + "obrze";
      SF Pl Nom => x + "obry";
      SF Pl Gen => x + "obrów";
      SF Pl Dat => x + "obrom";
      SF Pl Acc => x + "obry";
      SF Pl Instr => x + "obrami";
      SF Pl Loc => x + "obrach";
      SF Pl Voc => x + "obry"
    };

    oper mkNTable0626: Str -> SubstForm => Str; --%
    oper mkNTable0626 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "óg";
      SF Sg Gen => x + "oga";
      SF Sg Dat => x + "ogu";
      SF Sg Acc => x + "oga";
      SF Sg Instr => x + "ogiem";
      SF Sg Loc => x + "ogu";
      SF Sg Voc => x + "oże";
      SF Pl Nom => x + "ogowie";
      SF Pl Gen => x + "ogów";
      SF Pl Dat => x + "ogom";
      SF Pl Acc => x + "ogów";
      SF Pl Instr => x + "ogami";
      SF Pl Loc => x + "ogach";
      SF Pl Voc => x + "ogowie"
    };

    oper mkNTable0628: Str -> SubstForm => Str; --%
    oper mkNTable0628 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "c";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0629: Str -> SubstForm => Str; --%
    oper mkNTable0629 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "lów";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0630: Str -> SubstForm => Str; --%
    oper mkNTable0630 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "a";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0631: Str -> SubstForm => Str; --%
    oper mkNTable0631 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ca";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "cę";
      SF Sg Instr => x + "cą";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "co";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "c";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0632: Str -> SubstForm => Str; --%
    oper mkNTable0632 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "ły";
      SF Sg Dat => x + "le";
      SF Sg Acc => x + "łę";
      SF Sg Instr => x + "łą";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "ieł";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0633: Str -> SubstForm => Str; --%
    oper mkNTable0633 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ź";
      SF Sg Gen => x + "zia";
      SF Sg Dat => x + "ziowi";
      SF Sg Acc => x + "ź";
      SF Sg Instr => x + "ziem";
      SF Sg Loc => x + "ziu";
      SF Sg Voc => x + "ziu";
      SF Pl Nom => x + "zie";
      SF Pl Gen => x + "zi";
      SF Pl Dat => x + "ziom";
      SF Pl Acc => x + "zie";
      SF Pl Instr => x + "ziami";
      SF Pl Loc => x + "ziach";
      SF Pl Voc => x + "zie"
    };

    oper mkNTable0634: Str -> SubstForm => Str; --%
    oper mkNTable0634 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "sia";
      SF Sg Dat => x + "siowi";
      SF Sg Acc => x + "ś";
      SF Sg Instr => x + "siem";
      SF Sg Loc => x + "siu";
      SF Sg Voc => x + "siu";
      SF Pl Nom => x + "sie";
      SF Pl Gen => x + "siów";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "sie";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "sie"
    };

    oper mkNTable0635: Str -> SubstForm => Str; --%
    oper mkNTable0635 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "ym";
      SF Sg Loc => x + "ym";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0636: Str -> SubstForm => Str; --%
    oper mkNTable0636 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oba";
      SF Sg Gen => x + "oby";
      SF Sg Dat => x + "obie";
      SF Sg Acc => x + "obę";
      SF Sg Instr => x + "obą";
      SF Sg Loc => x + "obie";
      SF Sg Voc => x + "obo";
      SF Pl Nom => x + "oby";
      SF Pl Gen => x + "ób";
      SF Pl Dat => x + "obom";
      SF Pl Acc => x + "oby";
      SF Pl Instr => x + "obami";
      SF Pl Loc => x + "obach";
      SF Pl Voc => x + "oby"
    };

    oper mkNTable0638: Str -> SubstForm => Str; --%
    oper mkNTable0638 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "est";
      SF Sg Gen => x + "tu";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "est";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "ty";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ty";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ty"
    };

    oper mkNTable0640: Str -> SubstForm => Str; --%
    oper mkNTable0640 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cu";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cze";
      SF Pl Nom => x + "cy";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ców";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "cy"
    };

    oper mkNTable0642: Str -> SubstForm => Str; --%
    oper mkNTable0642 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owu";
      SF Sg Dat => x + "owowi";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owie";
      SF Pl Nom => x + "owy";
      SF Pl Gen => x + "owów";
      SF Pl Dat => x + "owom";
      SF Pl Acc => x + "owy";
      SF Pl Instr => x + "owami";
      SF Pl Loc => x + "owach";
      SF Pl Voc => x + "owy"
    };

    oper mkNTable0644: Str -> SubstForm => Str; --%
    oper mkNTable0644 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0645: Str -> SubstForm => Str; --%
    oper mkNTable0645 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "o";
      SF Pl Gen => x + "o";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "o";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "o"
    };

    oper mkNTable0646: Str -> SubstForm => Str; --%
    oper mkNTable0646 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "e";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "e";
      SF Pl Loc => x + "e";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0648: Str -> SubstForm => Str; --%
    oper mkNTable0648 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ia";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "ia";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "ie";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0649: Str -> SubstForm => Str; --%
    oper mkNTable0649 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ciów";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ciów";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0650: Str -> SubstForm => Str; --%
    oper mkNTable0650 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sła";
      SF Sg Gen => x + "sły";
      SF Sg Dat => x + "śle";
      SF Sg Acc => x + "słę";
      SF Sg Instr => x + "słą";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "sło";
      SF Pl Nom => x + "sły";
      SF Pl Gen => x + "seł";
      SF Pl Dat => x + "słom";
      SF Pl Acc => x + "sły";
      SF Pl Instr => x + "słami";
      SF Pl Loc => x + "słach";
      SF Pl Voc => x + "sły"
    };

    oper mkNTable0651: Str -> SubstForm => Str; --%
    oper mkNTable0651 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ło";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łu";
      SF Sg Acc => x + "ło";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => x + "ła";
      SF Pl Gen => x + "ieł";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ła";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ła"
    };

    oper mkNTable0652: Str -> SubstForm => Str; --%
    oper mkNTable0652 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ota";
      SF Sg Gen => x + "oty";
      SF Sg Dat => x + "ocie";
      SF Sg Acc => x + "otę";
      SF Sg Instr => x + "otą";
      SF Sg Loc => x + "ocie";
      SF Sg Voc => x + "oto";
      SF Pl Nom => x + "oty";
      SF Pl Gen => x + "ót";
      SF Pl Dat => x + "otom";
      SF Pl Acc => x + "oty";
      SF Pl Instr => x + "otami";
      SF Pl Loc => x + "otach";
      SF Pl Voc => x + "oty"
    };

    oper mkNTable0653: Str -> SubstForm => Str; --%
    oper mkNTable0653 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ół";
      SF Sg Gen => x + "ołu";
      SF Sg Dat => x + "ołowi";
      SF Sg Acc => x + "ół";
      SF Sg Instr => x + "ołem";
      SF Sg Loc => x + "ole";
      SF Sg Voc => x + "ole";
      SF Pl Nom => x + "oły";
      SF Pl Gen => x + "ołów";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oły";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oły"
    };

    oper mkNTable0654: Str -> SubstForm => Str; --%
    oper mkNTable0654 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "o";
      SF Pl Gen => x + "o";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "o";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "o"
    };

    oper mkNTable0655: Str -> SubstForm => Str; --%
    oper mkNTable0655 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0657: Str -> SubstForm => Str; --%
    oper mkNTable0657 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "el";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "lów";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0658: Str -> SubstForm => Str; --%
    oper mkNTable0658 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "tu";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "ci";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "tów";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ci"
    };

    oper mkNTable0659: Str -> SubstForm => Str; --%
    oper mkNTable0659 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "tu";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "ty";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ty";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ty"
    };

    oper mkNTable0660: Str -> SubstForm => Str; --%
    oper mkNTable0660 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "smo";
      SF Sg Gen => x + "sma";
      SF Sg Dat => x + "smu";
      SF Sg Acc => x + "smo";
      SF Sg Instr => x + "smem";
      SF Sg Loc => x + "śmie";
      SF Sg Voc => x + "smo";
      SF Pl Nom => x + "sma";
      SF Pl Gen => x + "sm";
      SF Pl Dat => x + "smom";
      SF Pl Acc => x + "sma";
      SF Pl Instr => x + "smami";
      SF Pl Loc => x + "smach";
      SF Pl Voc => x + "sma"
    };

    oper mkNTable0661: Str -> SubstForm => Str; --%
    oper mkNTable0661 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ź";
      SF Sg Gen => x + "zi";
      SF Sg Dat => x + "zi";
      SF Sg Acc => x + "ź";
      SF Sg Instr => x + "zią";
      SF Sg Loc => x + "zi";
      SF Sg Voc => x + "zi";
      SF Pl Nom => x + "zie";
      SF Pl Gen => x + "zi";
      SF Pl Dat => x + "ziom";
      SF Pl Acc => x + "zie";
      SF Pl Instr => x + "ziami";
      SF Pl Loc => x + "ziach";
      SF Pl Voc => x + "zie"
    };

    oper mkNTable0662: Str -> SubstForm => Str; --%
    oper mkNTable0662 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "iu";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "ie";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0663: Str -> SubstForm => Str; --%
    oper mkNTable0663 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "eść";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "eść";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => x + "ci";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ci";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "ci"
    };

    oper mkNTable0664: Str -> SubstForm => Str; --%
    oper mkNTable0664 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oło";
      SF Sg Gen => x + "oła";
      SF Sg Dat => x + "ołu";
      SF Sg Acc => x + "oło";
      SF Sg Instr => x + "ołem";
      SF Sg Loc => x + "ole";
      SF Sg Voc => x + "oło";
      SF Pl Nom => x + "oła";
      SF Pl Gen => x + "ół";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oła";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oła"
    };

    oper mkNTable0665: Str -> SubstForm => Str; --%
    oper mkNTable0665 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "y";
      SF Sg Instr => x + "ym";
      SF Sg Loc => x + "ym";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0666: Str -> SubstForm => Str; --%
    oper mkNTable0666 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "ciec";
      SF Sg Gen => x + "ćca";
      SF Sg Dat => x + "ćcowi";
      SF Sg Acc => x + "ćca";
      SF Sg Instr => x + "ćcem";
      SF Sg Loc => x + "ćcu";
      SF Sg Voc => x + "ćcu";
      SF Pl Nom => x + "ćce";
      SF Pl Gen => x + "ćców";
      SF Pl Dat => x + "ćcom";
      SF Pl Acc => x + "ćce";
      SF Pl Instr => x + "ćcami";
      SF Pl Loc => x + "ćcach";
      SF Pl Voc => x + "ćce"
    };

    oper mkNTable0667: Str -> SubstForm => Str; --%
    oper mkNTable0667 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "ciec";
      SF Sg Gen => x + "ćca";
      SF Sg Dat => x + "ćcowi";
      SF Sg Acc => x + "ciec";
      SF Sg Instr => x + "ćcem";
      SF Sg Loc => x + "ćcu";
      SF Sg Voc => x + "ćcu";
      SF Pl Nom => x + "ćce";
      SF Pl Gen => x + "ćców";
      SF Pl Dat => x + "ćcom";
      SF Pl Acc => x + "ćce";
      SF Pl Instr => x + "ćcami";
      SF Pl Loc => x + "ćcach";
      SF Pl Voc => x + "ćce"
    };

    oper mkNTable0668: Str -> SubstForm => Str; --%
    oper mkNTable0668 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "człowiek";
      SF Sg Gen => x + "człowieka";
      SF Sg Dat => x + "człowiekowi";
      SF Sg Acc => x + "człowieka";
      SF Sg Instr => x + "człowiekiem";
      SF Sg Loc => x + "człowieku";
      SF Sg Voc => x + "człowieku";
      SF Pl Nom => x + "ludzie";
      SF Pl Gen => x + "ludzi";
      SF Pl Dat => x + "ludziom";
      SF Pl Acc => x + "ludzi";
      SF Pl Instr => x + "ludźmi";
      SF Pl Loc => x + "ludziach";
      SF Pl Voc => x + "ludzie"
    };

--created for sukienka and kurtka. Paula Pawlowski 6/2/2018
  oper mkNTable0670p : Str -> SubstForm => Str; --%
    oper mkNTable0670p lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ek";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0671: Str -> SubstForm => Str; --%
    oper mkNTable0671 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "si";
      SF Sg Dat => x + "si";
      SF Sg Acc => x + "ś";
      SF Sg Instr => x + "sią";
      SF Sg Loc => x + "si";
      SF Sg Voc => x + "ś";
      SF Pl Nom => x + "sie";
      SF Pl Gen => x + "si";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "sie";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "sie"
    };

    oper mkNTable0674: Str -> SubstForm => Str; --%
    oper mkNTable0674 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "ni";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "ńmi";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0675: Str -> SubstForm => Str; --%
    oper mkNTable0675 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "lów";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0676: Str -> SubstForm => Str; --%
    oper mkNTable0676 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "niu";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0677: Str -> SubstForm => Str; --%
    oper mkNTable0677 lexem = 
      let x = Predef.tk 5 lexem in
    table { 
      SF Sg Nom => x + "eszcz";
      SF Sg Gen => x + "żdżu";
      SF Sg Dat => x + "żdżowi";
      SF Sg Acc => x + "eszcz";
      SF Sg Instr => x + "żdżem";
      SF Sg Loc => x + "żdżu";
      SF Sg Voc => x + "żdżu";
      SF Pl Nom => x + "żdże";
      SF Pl Gen => x + "żdżów";
      SF Pl Dat => x + "żdżom";
      SF Pl Acc => x + "żdże";
      SF Pl Instr => x + "żdżami";
      SF Pl Loc => x + "żdżach";
      SF Pl Voc => x + "żdże"
    };

    oper mkNTable0678: Str -> SubstForm => Str; --%
    oper mkNTable0678 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łu";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "li";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "łów";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "li"
    };

    oper mkNTable0679: Str -> SubstForm => Str; --%
    oper mkNTable0679 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łu";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0681: Str -> SubstForm => Str; --%
    oper mkNTable0681 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "obro";
      SF Sg Gen => x + "obra";
      SF Sg Dat => x + "obru";
      SF Sg Acc => x + "obro";
      SF Sg Instr => x + "obrem";
      SF Sg Loc => x + "obru";
      SF Sg Voc => x + "obro";
      SF Pl Nom => x + "obra";
      SF Pl Gen => x + "óbr";
      SF Pl Dat => x + "obrom";
      SF Pl Acc => x + "obra";
      SF Pl Instr => x + "obrami";
      SF Pl Loc => x + "obrach";
      SF Pl Voc => x + "obra"
    };

    oper mkNTable0682: Str -> SubstForm => Str; --%
    oper mkNTable0682 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "azd";
      SF Sg Gen => x + "azdu";
      SF Sg Dat => x + "azdowi";
      SF Sg Acc => x + "azd";
      SF Sg Instr => x + "azdem";
      SF Sg Loc => x + "eździe";
      SF Sg Voc => x + "eździe";
      SF Pl Nom => x + "azdy";
      SF Pl Gen => x + "azdów";
      SF Pl Dat => x + "azdom";
      SF Pl Acc => x + "azdy";
      SF Pl Instr => x + "azdami";
      SF Pl Loc => x + "azdach";
      SF Pl Voc => x + "azdy"
    };

    oper mkNTable0683: Str -> SubstForm => Str; --%
    oper mkNTable0683 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ór";
      SF Sg Gen => x + "ora";
      SF Sg Dat => x + "orowi";
      SF Sg Acc => x + "ora";
      SF Sg Instr => x + "orem";
      SF Sg Loc => x + "orze";
      SF Sg Voc => x + "orze";
      SF Pl Nom => x + "orzy";
      SF Pl Gen => x + "orów";
      SF Pl Dat => x + "orom";
      SF Pl Acc => x + "orów";
      SF Pl Instr => x + "orami";
      SF Pl Loc => x + "orach";
      SF Pl Voc => x + "orzy"
    };

    oper mkNTable0684: Str -> SubstForm => Str; --%
    oper mkNTable0684 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ola";
      SF Sg Gen => x + "oli";
      SF Sg Dat => x + "oli";
      SF Sg Acc => x + "olę";
      SF Sg Instr => x + "olą";
      SF Sg Loc => x + "oli";
      SF Sg Voc => x + "olo";
      SF Pl Nom => x + "ole";
      SF Pl Gen => x + "ól";
      SF Pl Dat => x + "olom";
      SF Pl Acc => x + "ole";
      SF Pl Instr => x + "olami";
      SF Pl Loc => x + "olach";
      SF Pl Voc => x + "ole"
    };

    oper mkNTable0685: Str -> SubstForm => Str; --%
    oper mkNTable0685 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "sł";
      SF Sg Gen => x + "słu";
      SF Sg Dat => x + "słowi";
      SF Sg Acc => x + "sł";
      SF Sg Instr => x + "słem";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "śle";
      SF Pl Nom => x + "sły";
      SF Pl Gen => x + "słów";
      SF Pl Dat => x + "słom";
      SF Pl Acc => x + "sły";
      SF Pl Instr => x + "słami";
      SF Pl Loc => x + "słach";
      SF Pl Voc => x + "sły"
    };

    oper mkNTable0689: Str -> SubstForm => Str; --%
    oper mkNTable0689 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oga";
      SF Sg Gen => x + "ogi";
      SF Sg Dat => x + "odze";
      SF Sg Acc => x + "ogę";
      SF Sg Instr => x + "ogą";
      SF Sg Loc => x + "odze";
      SF Sg Voc => x + "ogo";
      SF Pl Nom => x + "ogi";
      SF Pl Gen => x + "óg";
      SF Pl Dat => x + "ogom";
      SF Pl Acc => x + "ogi";
      SF Pl Instr => x + "ogami";
      SF Pl Loc => x + "ogach";
      SF Pl Voc => x + "ogi"
    };

    oper mkNTable0691: Str -> SubstForm => Str; --%
    oper mkNTable0691 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ia";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "ia";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "iów";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "ie";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0692: Str -> SubstForm => Str; --%
    oper mkNTable0692 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "zd";
      SF Sg Gen => x + "zda";
      SF Sg Dat => x + "zdowi";
      SF Sg Acc => x + "zda";
      SF Sg Instr => x + "zdem";
      SF Sg Loc => x + "ździe";
      SF Sg Voc => x + "ździe";
      SF Pl Nom => x + "zdy";
      SF Pl Gen => x + "zdów";
      SF Pl Dat => x + "zdom";
      SF Pl Acc => x + "zdy";
      SF Pl Instr => x + "zdami";
      SF Pl Loc => x + "zdach";
      SF Pl Voc => x + "zdy"
    };

    oper mkNTable0694: Str -> SubstForm => Str; --%
    oper mkNTable0694 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "em";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "e";
      SF Pl Loc => x + "e";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0695: Str -> SubstForm => Str; --%
    oper mkNTable0695 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ha";
      SF Sg Gen => x + "hy";
      SF Sg Dat => x + "sze";
      SF Sg Acc => x + "hę";
      SF Sg Instr => x + "hą";
      SF Sg Loc => x + "sze";
      SF Sg Voc => x + "ho";
      SF Pl Nom => x + "hy";
      SF Pl Gen => x + "h";
      SF Pl Dat => x + "hom";
      SF Pl Acc => x + "hy";
      SF Pl Instr => x + "hami";
      SF Pl Loc => x + "hach";
      SF Pl Voc => x + "hy"
    };

    oper mkNTable0696: Str -> SubstForm => Str; --%
    oper mkNTable0696 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0697: Str -> SubstForm => Str; --%
    oper mkNTable0697 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "niów";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0698: Str -> SubstForm => Str; --%
    oper mkNTable0698 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0699: Str -> SubstForm => Str; --%
    oper mkNTable0699 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "zec";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0700: Str -> SubstForm => Str; --%
    oper mkNTable0700 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0701: Str -> SubstForm => Str; --%
    oper mkNTable0701 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0702: Str -> SubstForm => Str; --%
    oper mkNTable0702 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0703: Str -> SubstForm => Str; --%
    oper mkNTable0703 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cko";
      SF Sg Gen => x + "cka";
      SF Sg Dat => x + "cku";
      SF Sg Acc => x + "cko";
      SF Sg Instr => x + "ckiem";
      SF Sg Loc => x + "cku";
      SF Sg Voc => x + "cko";
      SF Pl Nom => x + "ci";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ci";
      SF Pl Instr => x + "ćmi";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "ci"
    };

    oper mkNTable0704: Str -> SubstForm => Str; --%
    oper mkNTable0704 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ieć";
      SF Sg Gen => x + "ciu";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "ieć";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0706: Str -> SubstForm => Str; --%
    oper mkNTable0706 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąb";
      SF Sg Gen => x + "ęba";
      SF Sg Dat => x + "ębowi";
      SF Sg Acc => x + "ąb";
      SF Sg Instr => x + "ębem";
      SF Sg Loc => x + "ębie";
      SF Sg Voc => x + "ębie";
      SF Pl Nom => x + "ęby";
      SF Pl Gen => x + "ębów";
      SF Pl Dat => x + "ębom";
      SF Pl Acc => x + "ęby";
      SF Pl Instr => x + "ębami";
      SF Pl Loc => x + "ębach";
      SF Pl Voc => x + "ęby"
    };

    oper mkNTable0707: Str -> SubstForm => Str; --%
    oper mkNTable0707 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "zień";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "zień";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0710: Str -> SubstForm => Str; --%
    oper mkNTable0710 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąb";
      SF Sg Gen => x + "ęba";
      SF Sg Dat => x + "ębowi";
      SF Sg Acc => x + "ęba";
      SF Sg Instr => x + "ębem";
      SF Sg Loc => x + "ębie";
      SF Sg Voc => x + "ębie";
      SF Pl Nom => x + "ęby";
      SF Pl Gen => x + "ębów";
      SF Pl Dat => x + "ębom";
      SF Pl Acc => x + "ęby";
      SF Pl Instr => x + "ębami";
      SF Pl Loc => x + "ębach";
      SF Pl Voc => x + "ęby"
    };

    oper mkNTable0711: Str -> SubstForm => Str; --%
    oper mkNTable0711 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąb";
      SF Sg Gen => x + "ębu";
      SF Sg Dat => x + "ębowi";
      SF Sg Acc => x + "ąb";
      SF Sg Instr => x + "ębem";
      SF Sg Loc => x + "ębie";
      SF Sg Voc => x + "ębie";
      SF Pl Nom => x + "ęby";
      SF Pl Gen => x + "ębów";
      SF Pl Dat => x + "ębom";
      SF Pl Acc => x + "ęby";
      SF Pl Instr => x + "ębami";
      SF Pl Loc => x + "ębach";
      SF Pl Voc => x + "ęby"
    };

    oper mkNTable0712: Str -> SubstForm => Str; --%
    oper mkNTable0712 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ół";
      SF Sg Gen => x + "oła";
      SF Sg Dat => x + "ołowi";
      SF Sg Acc => x + "oła";
      SF Sg Instr => x + "ołem";
      SF Sg Loc => x + "ole";
      SF Sg Voc => x + "ole";
      SF Pl Nom => x + "oły";
      SF Pl Gen => x + "ołów";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oły";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oły"
    };

    oper mkNTable0713: Str -> SubstForm => Str; --%
    oper mkNTable0713 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "en";
      SF Sg Gen => x + "nu";
      SF Sg Dat => x + "nowi";
      SF Sg Acc => x + "en";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "nie";
      SF Pl Nom => x + "ny";
      SF Pl Gen => x + "nów";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "ny";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "ny"
    };

    oper mkNTable0714: Str -> SubstForm => Str; --%
    oper mkNTable0714 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "e";
      SF Sg Dat => x + "e";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "e";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "e";
      SF Pl Dat => x + "e";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "e";
      SF Pl Loc => x + "e";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0715: Str -> SubstForm => Str; --%
    oper mkNTable0715 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0716: Str -> SubstForm => Str; --%
    oper mkNTable0716 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "on";
      SF Sg Gen => x + "onu";
      SF Sg Dat => x + "onowi";
      SF Sg Acc => x + "on";
      SF Sg Instr => x + "onem";
      SF Sg Loc => x + "onie";
      SF Sg Voc => x + "onie";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0717: Str -> SubstForm => Str; --%
    oper mkNTable0717 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "u";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0718: Str -> SubstForm => Str; --%
    oper mkNTable0718 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ier";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "ry";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "ry";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "ry"
    };

    oper mkNTable0719: Str -> SubstForm => Str; --%
    oper mkNTable0719 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0720: Str -> SubstForm => Str; --%
    oper mkNTable0720 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ja";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ję";
      SF Sg Instr => x + "ją";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "jo";
      SF Pl Nom => x + "je";
      SF Pl Gen => x + "jów";
      SF Pl Dat => x + "jom";
      SF Pl Acc => x + "jów";
      SF Pl Instr => x + "jami";
      SF Pl Loc => x + "jach";
      SF Pl Voc => x + "je"
    };

    oper mkNTable0721: Str -> SubstForm => Str; --%
    oper mkNTable0721 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "zy";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "zy"
    };

    oper mkNTable0722: Str -> SubstForm => Str; --%
    oper mkNTable0722 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ź";
      SF Sg Gen => x + "zia";
      SF Sg Dat => x + "ziowi";
      SF Sg Acc => x + "ź";
      SF Sg Instr => x + "ziem";
      SF Sg Loc => x + "ziu";
      SF Sg Voc => x + "ziu";
      SF Pl Nom => x + "zie";
      SF Pl Gen => x + "ziów";
      SF Pl Dat => x + "ziom";
      SF Pl Acc => x + "zie";
      SF Pl Instr => x + "ziami";
      SF Pl Loc => x + "ziach";
      SF Pl Voc => x + "zie"
    };

    oper mkNTable0723: Str -> SubstForm => Str; --%
    oper mkNTable0723 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "tu";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "t";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "ta";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ta";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ta"
    };

    oper mkNTable0724: Str -> SubstForm => Str; --%
    oper mkNTable0724 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zda";
      SF Sg Gen => x + "zdy";
      SF Sg Dat => x + "ździe";
      SF Sg Acc => x + "zdę";
      SF Sg Instr => x + "zdą";
      SF Sg Loc => x + "ździe";
      SF Sg Voc => x + "zdo";
      SF Pl Nom => x + "zdowie";
      SF Pl Gen => x + "zdów";
      SF Pl Dat => x + "zdom";
      SF Pl Acc => x + "zdów";
      SF Pl Instr => x + "zdami";
      SF Pl Loc => x + "zdach";
      SF Pl Voc => x + "zdowie"
    };

    oper mkNTable0725: Str -> SubstForm => Str; --%
    oper mkNTable0725 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąź";
      SF Sg Gen => x + "ęzi";
      SF Sg Dat => x + "ęzi";
      SF Sg Acc => x + "ąź";
      SF Sg Instr => x + "ęzią";
      SF Sg Loc => x + "ęzi";
      SF Sg Voc => x + "ęzi";
      SF Pl Nom => x + "ęzie";
      SF Pl Gen => x + "ęzi";
      SF Pl Dat => x + "ęziom";
      SF Pl Acc => x + "ęzie";
      SF Pl Instr => x + "ęźmi";
      SF Pl Loc => x + "ęziach";
      SF Pl Voc => x + "ęzie"
    };

    oper mkNTable0727: Str -> SubstForm => Str; --%
    oper mkNTable0727 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0728: Str -> SubstForm => Str; --%
    oper mkNTable0728 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iez";
      SF Sg Gen => x + "za";
      SF Sg Dat => x + "zowi";
      SF Sg Acc => x + "za";
      SF Sg Instr => x + "zem";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => x + "zy";
      SF Pl Gen => x + "zów";
      SF Pl Dat => x + "zom";
      SF Pl Acc => x + "zy";
      SF Pl Instr => x + "zami";
      SF Pl Loc => x + "zach";
      SF Pl Voc => x + "zy"
    };

    oper mkNTable0729: Str -> SubstForm => Str; --%
    oper mkNTable0729 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zło";
      SF Sg Gen => x + "zła";
      SF Sg Dat => x + "złu";
      SF Sg Acc => x + "zło";
      SF Sg Instr => x + "złem";
      SF Sg Loc => x + "źle";
      SF Sg Voc => x + "zło";
      SF Pl Nom => x + "zła";
      SF Pl Gen => x + "zł";
      SF Pl Dat => x + "złom";
      SF Pl Acc => x + "zła";
      SF Pl Instr => x + "złami";
      SF Pl Loc => x + "złach";
      SF Pl Voc => x + "zła"
    };

    oper mkNTable0730: Str -> SubstForm => Str; --%
    oper mkNTable0730 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "azdo";
      SF Sg Gen => x + "azda";
      SF Sg Dat => x + "azdu";
      SF Sg Acc => x + "azdo";
      SF Sg Instr => x + "azdem";
      SF Sg Loc => x + "eździe";
      SF Sg Voc => x + "azdo";
      SF Pl Nom => x + "azda";
      SF Pl Gen => x + "azd";
      SF Pl Dat => x + "azdom";
      SF Pl Acc => x + "azda";
      SF Pl Instr => x + "azdami";
      SF Pl Loc => x + "azdach";
      SF Pl Voc => x + "azda"
    };

    oper mkNTable0731: Str -> SubstForm => Str; --%
    oper mkNTable0731 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ój";
      SF Sg Gen => x + "oja";
      SF Sg Dat => x + "ojowi";
      SF Sg Acc => x + "oja";
      SF Sg Instr => x + "ojem";
      SF Sg Loc => x + "oju";
      SF Sg Voc => x + "oju";
      SF Pl Nom => x + "oje";
      SF Pl Gen => x + "ojów";
      SF Pl Dat => x + "ojom";
      SF Pl Acc => x + "ojów";
      SF Pl Instr => x + "ojami";
      SF Pl Loc => x + "ojach";
      SF Pl Voc => x + "oje"
    };

    oper mkNTable0732: Str -> SubstForm => Str; --%
    oper mkNTable0732 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ź";
      SF Sg Gen => x + "zi";
      SF Sg Dat => x + "zi";
      SF Sg Acc => x + "ź";
      SF Sg Instr => x + "zią";
      SF Sg Loc => x + "zi";
      SF Sg Voc => x + "zi";
      SF Pl Nom => x + "zi";
      SF Pl Gen => x + "zi";
      SF Pl Dat => x + "ziom";
      SF Pl Acc => x + "zi";
      SF Pl Instr => x + "ziami";
      SF Pl Loc => x + "ziach";
      SF Pl Voc => x + "zi"
    };

    oper mkNTable0733: Str -> SubstForm => Str; --%
    oper mkNTable0733 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąb";
      SF Sg Gen => x + "ębia";
      SF Sg Dat => x + "ębiowi";
      SF Sg Acc => x + "ębia";
      SF Sg Instr => x + "ębiem";
      SF Sg Loc => x + "ębiu";
      SF Sg Voc => x + "ębiu";
      SF Pl Nom => x + "ębie";
      SF Pl Gen => x + "ębi";
      SF Pl Dat => x + "ębiom";
      SF Pl Acc => x + "ębie";
      SF Pl Instr => x + "ębiami";
      SF Pl Loc => x + "ębiach";
      SF Pl Voc => x + "ębie"
    };

    oper mkNTable0734: Str -> SubstForm => Str; --%
    oper mkNTable0734 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ci";
      SF Pl Instr => x + "ćmi";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0736: Str -> SubstForm => Str; --%
    oper mkNTable0736 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ra";
      SF Sg Gen => x + "ry";
      SF Sg Dat => x + "rze";
      SF Sg Acc => x + "rę";
      SF Sg Instr => x + "rą";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "ro";
      SF Pl Nom => x + "ry";
      SF Pl Gen => x + "ier";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "ry";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "ry"
    };

    oper mkNTable0738: Str -> SubstForm => Str; --%
    oper mkNTable0738 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "odza";
      SF Sg Gen => x + "odzy";
      SF Sg Dat => x + "odzy";
      SF Sg Acc => x + "odzę";
      SF Sg Instr => x + "odzą";
      SF Sg Loc => x + "odzy";
      SF Sg Voc => x + "odzo";
      SF Pl Nom => x + "odze";
      SF Pl Gen => x + "ódz";
      SF Pl Dat => x + "odzom";
      SF Pl Acc => x + "odze";
      SF Pl Instr => x + "odzami";
      SF Pl Loc => x + "odzach";
      SF Pl Voc => x + "odze"
    };

    oper mkNTable0740: Str -> SubstForm => Str; --%
    oper mkNTable0740 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "oźba";
      SF Sg Gen => x + "oźby";
      SF Sg Dat => x + "oźbie";
      SF Sg Acc => x + "oźbę";
      SF Sg Instr => x + "oźbą";
      SF Sg Loc => x + "oźbie";
      SF Sg Voc => x + "oźbo";
      SF Pl Nom => x + "oźby";
      SF Pl Gen => x + "óźb";
      SF Pl Dat => x + "oźbom";
      SF Pl Acc => x + "oźby";
      SF Pl Instr => x + "oźbami";
      SF Pl Loc => x + "oźbach";
      SF Pl Voc => x + "oźby"
    };

    oper mkNTable0741: Str -> SubstForm => Str; --%
    oper mkNTable0741 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "zień";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "zień";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0742: Str -> SubstForm => Str; --%
    oper mkNTable0742 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zeł";
      SF Sg Gen => x + "zła";
      SF Sg Dat => x + "złowi";
      SF Sg Acc => x + "zeł";
      SF Sg Instr => x + "złem";
      SF Sg Loc => x + "źle";
      SF Sg Voc => x + "źle";
      SF Pl Nom => x + "zły";
      SF Pl Gen => x + "złów";
      SF Pl Dat => x + "złom";
      SF Pl Acc => x + "zły";
      SF Pl Instr => x + "złami";
      SF Pl Loc => x + "złach";
      SF Pl Voc => x + "zły"
    };

    oper mkNTable0743: Str -> SubstForm => Str; --%
    oper mkNTable0743 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ód";
      SF Sg Gen => x + "oda";
      SF Sg Dat => x + "odowi";
      SF Sg Acc => x + "oda";
      SF Sg Instr => x + "odem";
      SF Sg Loc => x + "odzie";
      SF Sg Voc => x + "odzie";
      SF Pl Nom => x + "ody";
      SF Pl Gen => x + "odów";
      SF Pl Dat => x + "odom";
      SF Pl Acc => x + "ody";
      SF Pl Instr => x + "odami";
      SF Pl Loc => x + "odach";
      SF Pl Voc => x + "ody"
    };

    oper mkNTable0745: Str -> SubstForm => Str; --%
    oper mkNTable0745 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ódź";
      SF Sg Gen => x + "odzi";
      SF Sg Dat => x + "odzi";
      SF Sg Acc => x + "ódź";
      SF Sg Instr => x + "odzią";
      SF Sg Loc => x + "odzi";
      SF Sg Voc => x + "odzi";
      SF Pl Nom => x + "odzie";
      SF Pl Gen => x + "odzi";
      SF Pl Dat => x + "odziom";
      SF Pl Acc => x + "odzie";
      SF Pl Instr => x + "odziami";
      SF Pl Loc => x + "odziach";
      SF Pl Voc => x + "odzie"
    };

    oper mkNTable0748: Str -> SubstForm => Str; --%
    oper mkNTable0748 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "azda";
      SF Sg Gen => x + "azdy";
      SF Sg Dat => x + "eździe";
      SF Sg Acc => x + "azdę";
      SF Sg Instr => x + "azdą";
      SF Sg Loc => x + "eździe";
      SF Sg Voc => x + "azdo";
      SF Pl Nom => x + "azdy";
      SF Pl Gen => x + "azd";
      SF Pl Dat => x + "azdom";
      SF Pl Acc => x + "azdy";
      SF Pl Instr => x + "azdami";
      SF Pl Loc => x + "azdach";
      SF Pl Voc => x + "azdy"
    };

    oper mkNTable0749: Str -> SubstForm => Str; --%
    oper mkNTable0749 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "zd";
      SF Sg Gen => x + "zdu";
      SF Sg Dat => x + "zdowi";
      SF Sg Acc => x + "zd";
      SF Sg Instr => x + "zdem";
      SF Sg Loc => x + "ździe";
      SF Sg Voc => x + "ździe";
      SF Pl Nom => x + "zdy";
      SF Pl Gen => x + "zdów";
      SF Pl Dat => x + "zdom";
      SF Pl Acc => x + "zdy";
      SF Pl Instr => x + "zdami";
      SF Pl Loc => x + "zdach";
      SF Pl Voc => x + "zdy"
    };

    oper mkNTable0750: Str -> SubstForm => Str; --%
    oper mkNTable0750 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "óźdź";
      SF Sg Gen => x + "oździa";
      SF Sg Dat => x + "oździowi";
      SF Sg Acc => x + "oździa";
      SF Sg Instr => x + "oździem";
      SF Sg Loc => x + "oździu";
      SF Sg Voc => x + "oździu";
      SF Pl Nom => x + "oździe";
      SF Pl Gen => x + "oździ";
      SF Pl Dat => x + "oździom";
      SF Pl Acc => x + "oździe";
      SF Pl Instr => x + "oździami";
      SF Pl Loc => x + "oździach";
      SF Pl Voc => x + "oździe"
    };

    oper mkNTable0751: Str -> SubstForm => Str; --%
    oper mkNTable0751 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "óźdź";
      SF Sg Gen => x + "oździa";
      SF Sg Dat => x + "oździowi";
      SF Sg Acc => x + "óźdź";
      SF Sg Instr => x + "oździem";
      SF Sg Loc => x + "oździu";
      SF Sg Voc => x + "oździu";
      SF Pl Nom => x + "oździe";
      SF Pl Gen => x + "oździ";
      SF Pl Dat => x + "oździom";
      SF Pl Acc => x + "oździe";
      SF Pl Instr => x + "oźdźmi";
      SF Pl Loc => x + "oździach";
      SF Pl Voc => x + "oździe"
    };

    oper mkNTable0752: Str -> SubstForm => Str; --%
    oper mkNTable0752 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "za";
      SF Sg Gen => x + "zy";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "zę";
      SF Sg Instr => x + "zą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zo";
      SF Pl Nom => x + "zy";
      SF Pl Gen => x + "iez";
      SF Pl Dat => x + "zom";
      SF Pl Acc => x + "zy";
      SF Pl Instr => x + "zami";
      SF Pl Loc => x + "zach";
      SF Pl Voc => x + "zy"
    };

    oper mkNTable0753: Str -> SubstForm => Str; --%
    oper mkNTable0753 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zło";
      SF Sg Gen => x + "zła";
      SF Sg Dat => x + "złu";
      SF Sg Acc => x + "zło";
      SF Sg Instr => x + "złem";
      SF Sg Loc => x + "źle";
      SF Sg Voc => x + "zło";
      SF Pl Nom => x + "zła";
      SF Pl Gen => x + "zeł";
      SF Pl Dat => x + "złom";
      SF Pl Acc => x + "zła";
      SF Pl Instr => x + "złami";
      SF Pl Loc => x + "złach";
      SF Pl Voc => x + "zła"
    };

    oper mkNTable0754: Str -> SubstForm => Str; --%
    oper mkNTable0754 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owia";
      SF Sg Dat => x + "owiowi";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "owiem";
      SF Sg Loc => x + "owiu";
      SF Sg Voc => x + "owiu";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "owi";
      SF Pl Dat => x + "owiom";
      SF Pl Acc => x + "owie";
      SF Pl Instr => x + "owiami";
      SF Pl Loc => x + "owiach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0755: Str -> SubstForm => Str; --%
    oper mkNTable0755 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "ej";
      SF Sg Dat => x + "ej";
      SF Sg Acc => x + "ą";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ej";
      SF Sg Voc => x + "a";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ch";
      SF Pl Dat => x + "m";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "mi";
      SF Pl Loc => x + "ch";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0756: Str -> SubstForm => Str; --%
    oper mkNTable0756 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąb";
      SF Sg Gen => x + "ębi";
      SF Sg Dat => x + "ębi";
      SF Sg Acc => x + "ąb";
      SF Sg Instr => x + "ębią";
      SF Sg Loc => x + "ębi";
      SF Sg Voc => x + "ębi";
      SF Pl Nom => x + "ębie";
      SF Pl Gen => x + "ębi";
      SF Pl Dat => x + "ębiom";
      SF Pl Acc => x + "ębie";
      SF Pl Instr => x + "ębiami";
      SF Pl Loc => x + "ębiach";
      SF Pl Voc => x + "ębie"
    };

    oper mkNTable0757: Str -> SubstForm => Str; --%
    oper mkNTable0757 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "si";
      SF Sg Dat => x + "si";
      SF Sg Acc => x + "ś";
      SF Sg Instr => x + "sią";
      SF Sg Loc => x + "si";
      SF Sg Voc => x + "si";
      SF Pl Nom => x + "si";
      SF Pl Gen => x + "si";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "si";
      SF Pl Instr => x + "śmi";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "si"
    };

    oper mkNTable0760: Str -> SubstForm => Str; --%
    oper mkNTable0760 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0762: Str -> SubstForm => Str; --%
    oper mkNTable0762 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "lów";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "lów";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0763: Str -> SubstForm => Str; --%
    oper mkNTable0763 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ól";
      SF Sg Gen => x + "oli";
      SF Sg Dat => x + "oli";
      SF Sg Acc => x + "ól";
      SF Sg Instr => x + "olą";
      SF Sg Loc => x + "oli";
      SF Sg Voc => x + "oli";
      SF Pl Nom => x + "ole";
      SF Pl Gen => x + "oli";
      SF Pl Dat => x + "olom";
      SF Pl Acc => x + "ole";
      SF Pl Instr => x + "olami";
      SF Pl Loc => x + "olach";
      SF Pl Voc => x + "ole"
    };

    oper mkNTable0768: Str -> SubstForm => Str; --%
    oper mkNTable0768 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "co";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cu";
      SF Sg Acc => x + "co";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "co";
      SF Pl Nom => x + "ca";
      SF Pl Gen => x + "ec";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ca";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ca"
    };

    oper mkNTable0769: Str -> SubstForm => Str; --%
    oper mkNTable0769 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąb";
      SF Sg Gen => x + "ębu";
      SF Sg Dat => x + "ębowi";
      SF Sg Acc => x + "ąb";
      SF Sg Instr => x + "ębiem";
      SF Sg Loc => x + "ębiu";
      SF Sg Voc => x + "ębiu";
      SF Pl Nom => x + "ęby";
      SF Pl Gen => x + "ębów";
      SF Pl Dat => x + "ębom";
      SF Pl Acc => x + "ęby";
      SF Pl Instr => x + "ębiami";
      SF Pl Loc => x + "ębiach";
      SF Pl Voc => x + "ęby"
    };

    oper mkNTable0770: Str -> SubstForm => Str; --%
    oper mkNTable0770 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "siek";
      SF Sg Gen => x + "śka";
      SF Sg Dat => x + "śkowi";
      SF Sg Acc => x + "siek";
      SF Sg Instr => x + "śkiem";
      SF Sg Loc => x + "śku";
      SF Sg Voc => x + "śku";
      SF Pl Nom => x + "śki";
      SF Pl Gen => x + "śków";
      SF Pl Dat => x + "śkom";
      SF Pl Acc => x + "śki";
      SF Pl Instr => x + "śkami";
      SF Pl Loc => x + "śkach";
      SF Pl Voc => x + "śki"
    };

    oper mkNTable0771: Str -> SubstForm => Str; --%
    oper mkNTable0771 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ź";
      SF Sg Gen => x + "zia";
      SF Sg Dat => x + "ziowi";
      SF Sg Acc => x + "zia";
      SF Sg Instr => x + "ziem";
      SF Sg Loc => x + "ziu";
      SF Sg Voc => x + "ziu";
      SF Pl Nom => x + "zie";
      SF Pl Gen => x + "zi";
      SF Pl Dat => x + "ziom";
      SF Pl Acc => x + "zie";
      SF Pl Instr => x + "ziami";
      SF Pl Loc => x + "ziach";
      SF Pl Voc => x + "zie"
    };

    oper mkNTable0773: Str -> SubstForm => Str; --%
    oper mkNTable0773 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "iu";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "iów";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "ie";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0775: Str -> SubstForm => Str; --%
    oper mkNTable0775 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "ni";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0776: Str -> SubstForm => Str; --%
    oper mkNTable0776 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "ziec";
      SF Sg Gen => x + "źca";
      SF Sg Dat => x + "źcowi";
      SF Sg Acc => x + "źca";
      SF Sg Instr => x + "źcem";
      SF Sg Loc => x + "źcu";
      SF Sg Voc => x + "źcze";
      SF Pl Nom => x + "źcy";
      SF Pl Gen => x + "źców";
      SF Pl Dat => x + "źcom";
      SF Pl Acc => x + "źców";
      SF Pl Instr => x + "źcami";
      SF Pl Loc => x + "źcach";
      SF Pl Voc => x + "źcy"
    };

    oper mkNTable0777: Str -> SubstForm => Str; --%
    oper mkNTable0777 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ya";
      SF Sg Dat => x + "yowi";
      SF Sg Acc => x + "ya";
      SF Sg Instr => x + "yem";
      SF Sg Loc => x + "yu";
      SF Sg Voc => x + "yu";
      SF Pl Nom => x + "ye";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "yom";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "yami";
      SF Pl Loc => x + "yach";
      SF Pl Voc => x + "ye"
    };

    oper mkNTable0778: Str -> SubstForm => Str; --%
    oper mkNTable0778 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "ły";
      SF Sg Dat => x + "le";
      SF Sg Acc => x + "łę";
      SF Sg Instr => x + "łą";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "eł";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0779: Str -> SubstForm => Str; --%
    oper mkNTable0779 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "ły";
      SF Sg Dat => x + "le";
      SF Sg Acc => x + "łę";
      SF Sg Instr => x + "łą";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => x + "li";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "łów";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "li"
    };

    oper mkNTable0780: Str -> SubstForm => Str; --%
    oper mkNTable0780 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0781: Str -> SubstForm => Str; --%
    oper mkNTable0781 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "eć";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0782: Str -> SubstForm => Str; --%
    oper mkNTable0782 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "sia";
      SF Sg Dat => x + "siowi";
      SF Sg Acc => x + "sia";
      SF Sg Instr => x + "siem";
      SF Sg Loc => x + "siu";
      SF Sg Voc => x + "siu";
      SF Pl Nom => x + "sie";
      SF Pl Gen => x + "si";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "sie";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "sie"
    };

    oper mkNTable0783: Str -> SubstForm => Str; --%
    oper mkNTable0783 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ma";
      SF Sg Gen => x + "my";
      SF Sg Dat => x + "mie";
      SF Sg Acc => x + "mę";
      SF Sg Instr => x + "mą";
      SF Sg Loc => x + "mie";
      SF Sg Voc => x + "mo";
      SF Pl Nom => x + "my";
      SF Pl Gen => x + "em";
      SF Pl Dat => x + "mom";
      SF Pl Acc => x + "my";
      SF Pl Instr => x + "mami";
      SF Pl Loc => x + "mach";
      SF Pl Voc => x + "my"
    };

    oper mkNTable0784: Str -> SubstForm => Str; --%
    oper mkNTable0784 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zeł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0785: Str -> SubstForm => Str; --%
    oper mkNTable0785 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "lu";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "el";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "lów";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0787: Str -> SubstForm => Str; --%
    oper mkNTable0787 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iep";
      SF Sg Gen => x + "pa";
      SF Sg Dat => x + "powi";
      SF Sg Acc => x + "iep";
      SF Sg Instr => x + "pem";
      SF Sg Loc => x + "pie";
      SF Sg Voc => x + "pie";
      SF Pl Nom => x + "py";
      SF Pl Gen => x + "pów";
      SF Pl Dat => x + "pom";
      SF Pl Acc => x + "py";
      SF Pl Instr => x + "pami";
      SF Pl Loc => x + "pach";
      SF Pl Voc => x + "py"
    };

    oper mkNTable0789: Str -> SubstForm => Str; --%
    oper mkNTable0789 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ieł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0790: Str -> SubstForm => Str; --%
    oper mkNTable0790 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ieł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ieł";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0791: Str -> SubstForm => Str; --%
    oper mkNTable0791 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zno";
      SF Sg Gen => x + "zna";
      SF Sg Dat => x + "znu";
      SF Sg Acc => x + "zno";
      SF Sg Instr => x + "znem";
      SF Sg Loc => x + "źnie";
      SF Sg Voc => x + "zno";
      SF Pl Nom => x + "zna";
      SF Pl Gen => x + "zn";
      SF Pl Dat => x + "znom";
      SF Pl Acc => x + "zna";
      SF Pl Instr => x + "znami";
      SF Pl Loc => x + "znach";
      SF Pl Voc => x + "zna"
    };

    oper mkNTable0792: Str -> SubstForm => Str; --%
    oper mkNTable0792 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ćmi";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0793: Str -> SubstForm => Str; --%
    oper mkNTable0793 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ciów";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0794: Str -> SubstForm => Str; --%
    oper mkNTable0794 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ci";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0795: Str -> SubstForm => Str; --%
    oper mkNTable0795 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ieć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "ieć";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ciów";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0796: Str -> SubstForm => Str; --%
    oper mkNTable0796 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "cioł";
      SF Sg Gen => x + "tła";
      SF Sg Dat => x + "tłowi";
      SF Sg Acc => x + "cioł";
      SF Sg Instr => x + "tłem";
      SF Sg Loc => x + "tle";
      SF Sg Voc => x + "tle";
      SF Pl Nom => x + "tły";
      SF Pl Gen => x + "tłów";
      SF Pl Dat => x + "tłom";
      SF Pl Acc => x + "tły";
      SF Pl Instr => x + "tłami";
      SF Pl Loc => x + "tłach";
      SF Pl Voc => x + "tły"
    };

    oper mkNTable0797: Str -> SubstForm => Str; --%
    oper mkNTable0797 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owowi";
      SF Sg Acc => x + "owa";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owie";
      SF Pl Nom => x + "owy";
      SF Pl Gen => x + "owów";
      SF Pl Dat => x + "owom";
      SF Pl Acc => x + "owy";
      SF Pl Instr => x + "owami";
      SF Pl Loc => x + "owach";
      SF Pl Voc => x + "owy"
    };

    oper mkNTable0798: Str -> SubstForm => Str; --%
    oper mkNTable0798 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ga";
      SF Sg Gen => x + "gi";
      SF Sg Dat => x + "dze";
      SF Sg Acc => x + "gę";
      SF Sg Instr => x + "gą";
      SF Sg Loc => x + "dze";
      SF Sg Voc => x + "go";
      SF Pl Nom => x + "dzy";
      SF Pl Gen => x + "gów";
      SF Pl Dat => x + "gom";
      SF Pl Acc => x + "gów";
      SF Pl Instr => x + "gami";
      SF Pl Loc => x + "gach";
      SF Pl Voc => x + "dzy"
    };

    oper mkNTable0799: Str -> SubstForm => Str; --%
    oper mkNTable0799 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "j";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "j";
      SF Sg Instr => x + "ją";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "i";
      SF Pl Nom => x + "je";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "jom";
      SF Pl Acc => x + "je";
      SF Pl Instr => x + "jami";
      SF Pl Loc => x + "jach";
      SF Pl Voc => x + "je"
    };

    oper mkNTable0801: Str -> SubstForm => Str; --%
    oper mkNTable0801 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ew";
      SF Sg Gen => x + "wi";
      SF Sg Dat => x + "wi";
      SF Sg Acc => x + "ew";
      SF Sg Instr => x + "wią";
      SF Sg Loc => x + "wi";
      SF Sg Voc => x + "wi";
      SF Pl Nom => x + "wie";
      SF Pl Gen => x + "wi";
      SF Pl Dat => x + "wiom";
      SF Pl Acc => x + "wie";
      SF Pl Instr => x + "wiami";
      SF Pl Loc => x + "wiach";
      SF Pl Voc => x + "wie"
    };

    oper mkNTable0802: Str -> SubstForm => Str; --%
    oper mkNTable0802 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eć";
      SF Sg Gen => x + "ciu";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "eć";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0803: Str -> SubstForm => Str; --%
    oper mkNTable0803 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ia";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "iów";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "ie";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0804: Str -> SubstForm => Str; --%
    oper mkNTable0804 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "tu";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "towie";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "tów";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "towie"
    };

    oper mkNTable0805: Str -> SubstForm => Str; --%
    oper mkNTable0805 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "zieł";
      SF Sg Gen => x + "zła";
      SF Sg Dat => x + "złowi";
      SF Sg Acc => x + "zła";
      SF Sg Instr => x + "złem";
      SF Sg Loc => x + "źle";
      SF Sg Voc => x + "źle";
      SF Pl Nom => x + "zły";
      SF Pl Gen => x + "złów";
      SF Pl Dat => x + "złom";
      SF Pl Acc => x + "zły";
      SF Pl Instr => x + "złami";
      SF Pl Loc => x + "złach";
      SF Pl Voc => x + "zły"
    };

    oper mkNTable0806: Str -> SubstForm => Str; --%
    oper mkNTable0806 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "zioł";
      SF Sg Gen => x + "zła";
      SF Sg Dat => x + "złowi";
      SF Sg Acc => x + "zła";
      SF Sg Instr => x + "złem";
      SF Sg Loc => x + "źle";
      SF Sg Voc => x + "źle";
      SF Pl Nom => x + "zły";
      SF Pl Gen => x + "złów";
      SF Pl Dat => x + "złom";
      SF Pl Acc => x + "zły";
      SF Pl Instr => x + "złami";
      SF Pl Loc => x + "złach";
      SF Pl Voc => x + "zły"
    };

    oper mkNTable0807: Str -> SubstForm => Str; --%
    oper mkNTable0807 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "zioł";
      SF Sg Gen => x + "zła";
      SF Sg Dat => x + "złowi";
      SF Sg Acc => x + "zioł";
      SF Sg Instr => x + "złem";
      SF Sg Loc => x + "źle";
      SF Sg Voc => x + "źle";
      SF Pl Nom => x + "zły";
      SF Pl Gen => x + "złów";
      SF Pl Dat => x + "złom";
      SF Pl Acc => x + "zły";
      SF Pl Instr => x + "złami";
      SF Pl Loc => x + "złach";
      SF Pl Voc => x + "zły"
    };

    oper mkNTable0808: Str -> SubstForm => Str; --%
    oper mkNTable0808 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ój";
      SF Sg Gen => x + "oja";
      SF Sg Dat => x + "ojowi";
      SF Sg Acc => x + "oja";
      SF Sg Instr => x + "ojem";
      SF Sg Loc => x + "oju";
      SF Sg Voc => x + "oju";
      SF Pl Nom => x + "oje";
      SF Pl Gen => x + "ojów";
      SF Pl Dat => x + "ojom";
      SF Pl Acc => x + "oje";
      SF Pl Instr => x + "ojami";
      SF Pl Loc => x + "ojach";
      SF Pl Voc => x + "oje"
    };

    oper mkNTable0811: Str -> SubstForm => Str; --%
    oper mkNTable0811 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ót";
      SF Sg Gen => x + "otu";
      SF Sg Dat => x + "otowi";
      SF Sg Acc => x + "ót";
      SF Sg Instr => x + "otem";
      SF Sg Loc => x + "ocie";
      SF Sg Voc => x + "ocie";
      SF Pl Nom => x + "oty";
      SF Pl Gen => x + "otów";
      SF Pl Dat => x + "otom";
      SF Pl Acc => x + "oty";
      SF Pl Instr => x + "otami";
      SF Pl Loc => x + "otach";
      SF Pl Voc => x + "oty"
    };

    oper mkNTable0813: Str -> SubstForm => Str; --%
    oper mkNTable0813 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ół";
      SF Sg Gen => x + "oła";
      SF Sg Dat => x + "ołowi";
      SF Sg Acc => x + "ół";
      SF Sg Instr => x + "ołem";
      SF Sg Loc => x + "ele";
      SF Sg Voc => x + "ele";
      SF Pl Nom => x + "oły";
      SF Pl Gen => x + "ołów";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oły";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oły"
    };

    oper mkNTable0814: Str -> SubstForm => Str; --%
    oper mkNTable0814 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => x + "ci";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ci";
      SF Pl Instr => x + "ćmi";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "ci"
    };

    oper mkNTable0815: Str -> SubstForm => Str; --%
    oper mkNTable0815 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "ńmi";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0816: Str -> SubstForm => Str; --%
    oper mkNTable0816 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sno";
      SF Sg Gen => x + "sna";
      SF Sg Dat => x + "snu";
      SF Sg Acc => x + "sno";
      SF Sg Instr => x + "snem";
      SF Sg Loc => x + "śnie";
      SF Sg Voc => x + "sno";
      SF Pl Nom => x + "sna";
      SF Pl Gen => x + "sien";
      SF Pl Dat => x + "snom";
      SF Pl Acc => x + "sna";
      SF Pl Instr => x + "snami";
      SF Pl Loc => x + "snach";
      SF Pl Voc => x + "sna"
    };

    oper mkNTable0817: Str -> SubstForm => Str; --%
    oper mkNTable0817 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "cu";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ec";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0818: Str -> SubstForm => Str; --%
    oper mkNTable0818 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "eć";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ciów";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0819: Str -> SubstForm => Str; --%
    oper mkNTable0819 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąg";
      SF Sg Gen => x + "ęgu";
      SF Sg Dat => x + "ęgowi";
      SF Sg Acc => x + "ąg";
      SF Sg Instr => x + "ęgiem";
      SF Sg Loc => x + "ęgu";
      SF Sg Voc => x + "ęgu";
      SF Pl Nom => x + "ęgi";
      SF Pl Gen => x + "ęgów";
      SF Pl Dat => x + "ęgom";
      SF Pl Acc => x + "ęgi";
      SF Pl Instr => x + "ęgami";
      SF Pl Loc => x + "ęgach";
      SF Pl Voc => x + "ęgi"
    };

    oper mkNTable0821: Str -> SubstForm => Str; --%
    oper mkNTable0821 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ądz";
      SF Sg Gen => x + "ędza";
      SF Sg Dat => x + "ędzu";
      SF Sg Acc => x + "ędza";
      SF Sg Instr => x + "ędzem";
      SF Sg Loc => x + "ędzu";
      SF Sg Voc => x + "ęże";
      SF Pl Nom => x + "ęża";
      SF Pl Gen => x + "ęży";
      SF Pl Dat => x + "ężom";
      SF Pl Acc => x + "ęży";
      SF Pl Instr => x + "ężmi";
      SF Pl Loc => x + "ężach";
      SF Pl Voc => x + "ęża"
    };

    oper mkNTable0822: Str -> SubstForm => Str; --%
    oper mkNTable0822 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ęga";
      SF Sg Gen => x + "ęgi";
      SF Sg Dat => x + "ędze";
      SF Sg Acc => x + "ęgę";
      SF Sg Instr => x + "ęgą";
      SF Sg Loc => x + "ędze";
      SF Sg Voc => x + "ęgo";
      SF Pl Nom => x + "ęgi";
      SF Pl Gen => x + "ąg";
      SF Pl Dat => x + "ęgom";
      SF Pl Acc => x + "ęgi";
      SF Pl Instr => x + "ęgami";
      SF Pl Loc => x + "ęgach";
      SF Pl Voc => x + "ęgi"
    };

    oper mkNTable0823: Str -> SubstForm => Str; --%
    oper mkNTable0823 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "eł";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0824: Str -> SubstForm => Str; --%
    oper mkNTable0824 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "st";
      SF Sg Gen => x + "sta";
      SF Sg Dat => x + "stowi";
      SF Sg Acc => x + "sta";
      SF Sg Instr => x + "stem";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "ście";
      SF Pl Nom => x + "ści";
      SF Pl Gen => x + "stów";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "stów";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "ści"
    };

    oper mkNTable0826: Str -> SubstForm => Str; --%
    oper mkNTable0826 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0827: Str -> SubstForm => Str; --%
    oper mkNTable0827 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "cień";
      SF Sg Gen => x + "tnia";
      SF Sg Dat => x + "tniowi";
      SF Sg Acc => x + "cień";
      SF Sg Instr => x + "tniem";
      SF Sg Loc => x + "tniu";
      SF Sg Voc => x + "tniu";
      SF Pl Nom => x + "tnie";
      SF Pl Gen => x + "tniów";
      SF Pl Dat => x + "tniom";
      SF Pl Acc => x + "tnie";
      SF Pl Instr => x + "tniami";
      SF Pl Loc => x + "tniach";
      SF Pl Voc => x + "tnie"
    };

    oper mkNTable0828: Str -> SubstForm => Str; --%
    oper mkNTable0828 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "u";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0829: Str -> SubstForm => Str; --%
    oper mkNTable0829 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "o";
      SF Pl Gen => x + "o";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "o";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "o"
    };

    oper mkNTable0830: Str -> SubstForm => Str; --%
    oper mkNTable0830 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "as";
      SF Sg Gen => x + "asu";
      SF Sg Dat => x + "asowi";
      SF Sg Acc => x + "as";
      SF Sg Instr => x + "asem";
      SF Sg Loc => x + "esie";
      SF Sg Voc => x + "esie";
      SF Pl Nom => x + "asy";
      SF Pl Gen => x + "asów";
      SF Pl Dat => x + "asom";
      SF Pl Acc => x + "asy";
      SF Pl Instr => x + "asami";
      SF Pl Loc => x + "asach";
      SF Pl Voc => x + "asy"
    };

    oper mkNTable0831: Str -> SubstForm => Str; --%
    oper mkNTable0831 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "co";
      SF Sg Gen => x + "co";
      SF Sg Dat => x + "cu";
      SF Sg Acc => x + "co";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "co";
      SF Pl Nom => x + "co";
      SF Pl Gen => x + "co";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "co";
      SF Pl Instr => x + "co";
      SF Pl Loc => x + "co";
      SF Pl Voc => x + "co"
    };

    oper mkNTable0832: Str -> SubstForm => Str; --%
    oper mkNTable0832 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cze";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0833: Str -> SubstForm => Str; --%
    oper mkNTable0833 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ato";
      SF Sg Gen => x + "ata";
      SF Sg Dat => x + "atu";
      SF Sg Acc => x + "ato";
      SF Sg Instr => x + "atem";
      SF Sg Loc => x + "ecie";
      SF Sg Voc => x + "ato";
      SF Pl Nom => x + "ata";
      SF Pl Gen => x + "at";
      SF Pl Dat => x + "atom";
      SF Pl Acc => x + "ata";
      SF Pl Instr => x + "atami";
      SF Pl Loc => x + "atach";
      SF Pl Voc => x + "ata"
    };

    oper mkNTable0834: Str -> SubstForm => Str; --%
    oper mkNTable0834 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "j";
      SF Sg Gen => x + "ja";
      SF Sg Dat => x + "jowi";
      SF Sg Acc => x + "ja";
      SF Sg Instr => x + "jem";
      SF Sg Loc => x + "ju";
      SF Sg Voc => x + "ju";
      SF Pl Nom => x + "je";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "jom";
      SF Pl Acc => x + "je";
      SF Pl Instr => x + "jami";
      SF Pl Loc => x + "jach";
      SF Pl Voc => x + "je"
    };

    oper mkNTable0836: Str -> SubstForm => Str; --%
    oper mkNTable0836 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0838: Str -> SubstForm => Str; --%
    oper mkNTable0838 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ćmi";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0839: Str -> SubstForm => Str; --%
    oper mkNTable0839 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "um";
      SF Sg Gen => x + "um";
      SF Sg Dat => x + "um";
      SF Sg Acc => x + "um";
      SF Sg Instr => x + "um";
      SF Sg Loc => x + "um";
      SF Sg Voc => x + "um";
      SF Pl Nom => x + "um";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "um";
      SF Pl Acc => x + "um";
      SF Pl Instr => x + "um";
      SF Pl Loc => x + "um";
      SF Pl Voc => x + "um"
    };

    oper mkNTable0840: Str -> SubstForm => Str; --%
    oper mkNTable0840 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oża";
      SF Sg Gen => x + "oży";
      SF Sg Dat => x + "oży";
      SF Sg Acc => x + "ożę";
      SF Sg Instr => x + "ożą";
      SF Sg Loc => x + "oży";
      SF Sg Voc => x + "ożo";
      SF Pl Nom => x + "oże";
      SF Pl Gen => x + "óż";
      SF Pl Dat => x + "ożom";
      SF Pl Acc => x + "oże";
      SF Pl Instr => x + "ożami";
      SF Pl Loc => x + "ożach";
      SF Pl Voc => x + "oże"
    };

    oper mkNTable0842: Str -> SubstForm => Str; --%
    oper mkNTable0842 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0843: Str -> SubstForm => Str; --%
    oper mkNTable0843 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "śka";
      SF Sg Gen => x + "śki";
      SF Sg Dat => x + "śce";
      SF Sg Acc => x + "śkę";
      SF Sg Instr => x + "śką";
      SF Sg Loc => x + "śce";
      SF Sg Voc => x + "śku";
      SF Pl Nom => x + "śki";
      SF Pl Gen => x + "siek";
      SF Pl Dat => x + "śkom";
      SF Pl Acc => x + "śki";
      SF Pl Instr => x + "śkami";
      SF Pl Loc => x + "śkach";
      SF Pl Voc => x + "śki"
    };

    oper mkNTable0844: Str -> SubstForm => Str; --%
    oper mkNTable0844 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "lu";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "iel";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "li";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "le";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0847: Str -> SubstForm => Str; --%
    oper mkNTable0847 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ech";
      SF Sg Gen => x + "chu";
      SF Sg Dat => x + "chowi";
      SF Sg Acc => x + "ech";
      SF Sg Instr => x + "chem";
      SF Sg Loc => x + "chu";
      SF Sg Voc => x + "chu";
      SF Pl Nom => x + "chy";
      SF Pl Gen => x + "chów";
      SF Pl Dat => x + "chom";
      SF Pl Acc => x + "chy";
      SF Pl Instr => x + "chami";
      SF Pl Loc => x + "chach";
      SF Pl Voc => x + "chy"
    };

    oper mkNTable0848: Str -> SubstForm => Str; --%
    oper mkNTable0848 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "x";
      SF Sg Gen => x + "ksa";
      SF Sg Dat => x + "ksowi";
      SF Sg Acc => x + "ksa";
      SF Sg Instr => x + "ksem";
      SF Sg Loc => x + "ksie";
      SF Sg Voc => x + "ksie";
      SF Pl Nom => x + "ksy";
      SF Pl Gen => x + "ksów";
      SF Pl Dat => x + "ksom";
      SF Pl Acc => x + "ksy";
      SF Pl Instr => x + "ksami";
      SF Pl Loc => x + "ksach";
      SF Pl Voc => x + "ksy"
    };

    oper mkNTable0849: Str -> SubstForm => Str; --%
    oper mkNTable0849 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ków";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0851: Str -> SubstForm => Str; --%
    oper mkNTable0851 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ara";
      SF Sg Gen => x + "ary";
      SF Sg Dat => x + "erze";
      SF Sg Acc => x + "arę";
      SF Sg Instr => x + "arą";
      SF Sg Loc => x + "erze";
      SF Sg Voc => x + "aro";
      SF Pl Nom => x + "ary";
      SF Pl Gen => x + "ar";
      SF Pl Dat => x + "arom";
      SF Pl Acc => x + "ary";
      SF Pl Instr => x + "arami";
      SF Pl Loc => x + "arach";
      SF Pl Voc => x + "ary"
    };

    oper mkNTable0853: Str -> SubstForm => Str; --%
    oper mkNTable0853 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąc";
      SF Sg Gen => x + "ąca";
      SF Sg Dat => x + "ącowi";
      SF Sg Acc => x + "ąc";
      SF Sg Instr => x + "ącem";
      SF Sg Loc => x + "ącu";
      SF Sg Voc => x + "ącu";
      SF Pl Nom => x + "ące";
      SF Pl Gen => x + "ęcy";
      SF Pl Dat => x + "ącom";
      SF Pl Acc => x + "ące";
      SF Pl Instr => x + "ącami";
      SF Pl Loc => x + "ącach";
      SF Pl Voc => x + "ące"
    };

    oper mkNTable0854: Str -> SubstForm => Str; --%
    oper mkNTable0854 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "at";
      SF Sg Gen => x + "atu";
      SF Sg Dat => x + "atu";
      SF Sg Acc => x + "at";
      SF Sg Instr => x + "atem";
      SF Sg Loc => x + "ecie";
      SF Sg Voc => x + "ecie";
      SF Pl Nom => x + "aty";
      SF Pl Gen => x + "atów";
      SF Pl Dat => x + "atom";
      SF Pl Acc => x + "aty";
      SF Pl Instr => x + "atami";
      SF Pl Loc => x + "atach";
      SF Pl Voc => x + "aty"
    };

    oper mkNTable0855: Str -> SubstForm => Str; --%
    oper mkNTable0855 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "st";
      SF Sg Gen => x + "sta";
      SF Sg Dat => x + "stowi";
      SF Sg Acc => x + "sta";
      SF Sg Instr => x + "stem";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "ście";
      SF Pl Nom => x + "sty";
      SF Pl Gen => x + "stów";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "sty";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "sty"
    };

    oper mkNTable0857: Str -> SubstForm => Str; --%
    oper mkNTable0857 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "siek";
      SF Sg Gen => x + "śka";
      SF Sg Dat => x + "śkowi";
      SF Sg Acc => x + "śka";
      SF Sg Instr => x + "śkiem";
      SF Sg Loc => x + "śku";
      SF Sg Voc => x + "śku";
      SF Pl Nom => x + "śki";
      SF Pl Gen => x + "śków";
      SF Pl Dat => x + "śkom";
      SF Pl Acc => x + "śki";
      SF Pl Instr => x + "śkami";
      SF Pl Loc => x + "śkach";
      SF Pl Voc => x + "śki"
    };

    oper mkNTable0858: Str -> SubstForm => Str; --%
    oper mkNTable0858 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "sień";
      SF Sg Gen => x + "śnia";
      SF Sg Dat => x + "śniowi";
      SF Sg Acc => x + "sień";
      SF Sg Instr => x + "śniem";
      SF Sg Loc => x + "śniu";
      SF Sg Voc => x + "śniu";
      SF Pl Nom => x + "śnie";
      SF Pl Gen => x + "śni";
      SF Pl Dat => x + "śniom";
      SF Pl Acc => x + "śnie";
      SF Pl Instr => x + "śniami";
      SF Pl Loc => x + "śniach";
      SF Pl Voc => x + "śnie"
    };

    oper mkNTable0859: Str -> SubstForm => Str; --%
    oper mkNTable0859 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ia";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "ie";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0860: Str -> SubstForm => Str; --%
    oper mkNTable0860 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "orga";
      SF Sg Gen => x + "orgi";
      SF Sg Dat => x + "ordze";
      SF Sg Acc => x + "orgę";
      SF Sg Instr => x + "orgą";
      SF Sg Loc => x + "ordze";
      SF Sg Voc => x + "orgo";
      SF Pl Nom => x + "orgi";
      SF Pl Gen => x + "órg";
      SF Pl Dat => x + "orgom";
      SF Pl Acc => x + "orgi";
      SF Pl Instr => x + "orgami";
      SF Pl Loc => x + "orgach";
      SF Pl Voc => x + "orgi"
    };

    oper mkNTable0861: Str -> SubstForm => Str; --%
    oper mkNTable0861 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "orze";
      SF Sg Gen => x + "orza";
      SF Sg Dat => x + "orzu";
      SF Sg Acc => x + "orze";
      SF Sg Instr => x + "orzem";
      SF Sg Loc => x + "orzu";
      SF Sg Voc => x + "orze";
      SF Pl Nom => x + "orza";
      SF Pl Gen => x + "órz";
      SF Pl Dat => x + "orzom";
      SF Pl Acc => x + "orza";
      SF Pl Instr => x + "orzami";
      SF Pl Loc => x + "orzach";
      SF Pl Voc => x + "orza"
    };

    oper mkNTable0863: Str -> SubstForm => Str; --%
    oper mkNTable0863 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "łła";
      SF Sg Gen => x + "łły";
      SF Sg Dat => x + "lle";
      SF Sg Acc => x + "łłę";
      SF Sg Instr => x + "łłą";
      SF Sg Loc => x + "lle";
      SF Sg Voc => x + "łło";
      SF Pl Nom => x + "łłowie";
      SF Pl Gen => x + "łłów";
      SF Pl Dat => x + "łłom";
      SF Pl Acc => x + "łłów";
      SF Pl Instr => x + "łłami";
      SF Pl Loc => x + "łłach";
      SF Pl Voc => x + "łłowie"
    };

    oper mkNTable0868: Str -> SubstForm => Str; --%
    oper mkNTable0868 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0869: Str -> SubstForm => Str; --%
    oper mkNTable0869 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "i";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0870: Str -> SubstForm => Str; --%
    oper mkNTable0870 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąż";
      SF Sg Gen => x + "ęża";
      SF Sg Dat => x + "ężowi";
      SF Sg Acc => x + "ęża";
      SF Sg Instr => x + "ężem";
      SF Sg Loc => x + "ężu";
      SF Sg Voc => x + "ężu";
      SF Pl Nom => x + "ężowie";
      SF Pl Gen => x + "ężów";
      SF Pl Dat => x + "ężom";
      SF Pl Acc => x + "ężów";
      SF Pl Instr => x + "ężami";
      SF Pl Loc => x + "ężach";
      SF Pl Voc => x + "ężowie"
    };

    oper mkNTable0873: Str -> SubstForm => Str; --%
    oper mkNTable0873 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zna";
      SF Sg Gen => x + "zny";
      SF Sg Dat => x + "źnie";
      SF Sg Acc => x + "znę";
      SF Sg Instr => x + "zną";
      SF Sg Loc => x + "źnie";
      SF Sg Voc => x + "zno";
      SF Pl Nom => x + "źni";
      SF Pl Gen => x + "zn";
      SF Pl Dat => x + "znom";
      SF Pl Acc => x + "zn";
      SF Pl Instr => x + "znami";
      SF Pl Loc => x + "znach";
      SF Pl Voc => x + "źni"
    };

    oper mkNTable0874: Str -> SubstForm => Str; --%
    oper mkNTable0874 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ól";
      SF Sg Gen => x + "ola";
      SF Sg Dat => x + "olowi";
      SF Sg Acc => x + "ola";
      SF Sg Instr => x + "olem";
      SF Sg Loc => x + "olu";
      SF Sg Voc => x + "olu";
      SF Pl Nom => x + "ole";
      SF Pl Gen => x + "oli";
      SF Pl Dat => x + "olom";
      SF Pl Acc => x + "ole";
      SF Pl Instr => x + "olami";
      SF Pl Loc => x + "olach";
      SF Pl Voc => x + "ole"
    };

    oper mkNTable0875: Str -> SubstForm => Str; --%
    oper mkNTable0875 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "órg";
      SF Sg Gen => x + "orga";
      SF Sg Dat => x + "orgowi";
      SF Sg Acc => x + "órg";
      SF Sg Instr => x + "orgiem";
      SF Sg Loc => x + "orgu";
      SF Sg Voc => x + "orgu";
      SF Pl Nom => x + "orgi";
      SF Pl Gen => x + "orgów";
      SF Pl Dat => x + "orgom";
      SF Pl Acc => x + "orgi";
      SF Pl Instr => x + "orgami";
      SF Pl Loc => x + "orgach";
      SF Pl Voc => x + "orgi"
    };

    oper mkNTable0876: Str -> SubstForm => Str; --%
    oper mkNTable0876 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ńko";
      SF Sg Gen => x + "ńka";
      SF Sg Dat => x + "ńku";
      SF Sg Acc => x + "ńko";
      SF Sg Instr => x + "ńkiem";
      SF Sg Loc => x + "ńku";
      SF Sg Voc => x + "ńko";
      SF Pl Nom => x + "ńka";
      SF Pl Gen => x + "niek";
      SF Pl Dat => x + "ńkom";
      SF Pl Acc => x + "ńka";
      SF Pl Instr => x + "ńkami";
      SF Pl Loc => x + "ńkach";
      SF Pl Voc => x + "ńka"
    };

    oper mkNTable0877: Str -> SubstForm => Str; --%
    oper mkNTable0877 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "em";
      SF Sg Gen => x + "mu";
      SF Sg Dat => x + "mowi";
      SF Sg Acc => x + "em";
      SF Sg Instr => x + "mem";
      SF Sg Loc => x + "mie";
      SF Sg Voc => x + "mie";
      SF Pl Nom => x + "my";
      SF Pl Gen => x + "mów";
      SF Pl Dat => x + "mom";
      SF Pl Acc => x + "my";
      SF Pl Instr => x + "mami";
      SF Pl Loc => x + "mach";
      SF Pl Voc => x + "my"
    };

    oper mkNTable0878: Str -> SubstForm => Str; --%
    oper mkNTable0878 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "enie";
      SF Sg Gen => x + "enia";
      SF Sg Dat => x + "eniu";
      SF Sg Acc => x + "enie";
      SF Sg Instr => x + "eniem";
      SF Sg Loc => x + "eniu";
      SF Sg Voc => x + "enie";
      SF Pl Nom => x + "ona";
      SF Pl Gen => x + "on";
      SF Pl Dat => x + "onom";
      SF Pl Acc => x + "ona";
      SF Pl Instr => x + "onami";
      SF Pl Loc => x + "onach";
      SF Pl Voc => x + "ona"
    };

    oper mkNTable0879: Str -> SubstForm => Str; --%
    oper mkNTable0879 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ca";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "cę";
      SF Sg Instr => x + "cą";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "co";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ec";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0881: Str -> SubstForm => Str; --%
    oper mkNTable0881 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "ela";
      SF Sg Dat => x + "elowi";
      SF Sg Acc => x + "ela";
      SF Sg Instr => x + "elem";
      SF Sg Loc => x + "elu";
      SF Sg Voc => x + "elu";
      SF Pl Nom => x + "ele";
      SF Pl Gen => x + "ół";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "ół";
      SF Pl Instr => x + "ółmi";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "ele"
    };

    oper mkNTable0882: Str -> SubstForm => Str; --%
    oper mkNTable0882 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "asta";
      SF Sg Gen => x + "asty";
      SF Sg Dat => x + "eście";
      SF Sg Acc => x + "astę";
      SF Sg Instr => x + "astą";
      SF Sg Loc => x + "eście";
      SF Sg Voc => x + "asto";
      SF Pl Nom => x + "asty";
      SF Pl Gen => x + "ast";
      SF Pl Dat => x + "astom";
      SF Pl Acc => x + "asty";
      SF Pl Instr => x + "astami";
      SF Pl Loc => x + "astach";
      SF Pl Voc => x + "asty"
    };

    oper mkNTable0887: Str -> SubstForm => Str; --%
    oper mkNTable0887 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "si";
      SF Sg Dat => x + "si";
      SF Sg Acc => x + "ś";
      SF Sg Instr => x + "sią";
      SF Sg Loc => x + "si";
      SF Sg Voc => x + "si";
      SF Pl Nom => x + "si";
      SF Pl Gen => x + "si";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "si";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "si"
    };

    oper mkNTable0888: Str -> SubstForm => Str; --%
    oper mkNTable0888 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owiu";
      SF Sg Dat => x + "owiowi";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "owiem";
      SF Sg Loc => x + "owiu";
      SF Sg Voc => x + "owiu";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "owiów";
      SF Pl Dat => x + "owiom";
      SF Pl Acc => x + "owie";
      SF Pl Instr => x + "owiami";
      SF Pl Loc => x + "owiach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0889: Str -> SubstForm => Str; --%
    oper mkNTable0889 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "óż";
      SF Sg Gen => x + "oża";
      SF Sg Dat => x + "ożowi";
      SF Sg Acc => x + "óż";
      SF Sg Instr => x + "ożem";
      SF Sg Loc => x + "ożu";
      SF Sg Voc => x + "ożu";
      SF Pl Nom => x + "oże";
      SF Pl Gen => x + "oży";
      SF Pl Dat => x + "ożom";
      SF Pl Acc => x + "oże";
      SF Pl Instr => x + "ożami";
      SF Pl Loc => x + "ożach";
      SF Pl Voc => x + "oże"
    };

    oper mkNTable0890: Str -> SubstForm => Str; --%
    oper mkNTable0890 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ad";
      SF Sg Gen => x + "adu";
      SF Sg Dat => x + "adowi";
      SF Sg Acc => x + "ad";
      SF Sg Instr => x + "adem";
      SF Sg Loc => x + "edzie";
      SF Sg Voc => x + "edzie";
      SF Pl Nom => x + "ady";
      SF Pl Gen => x + "adów";
      SF Pl Dat => x + "adom";
      SF Pl Acc => x + "ady";
      SF Pl Instr => x + "adami";
      SF Pl Loc => x + "adach";
      SF Pl Voc => x + "ady"
    };

    oper mkNTable0894: Str -> SubstForm => Str; --%
    oper mkNTable0894 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "et";
      SF Sg Gen => x + "tu";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "et";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => x + "ty";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ty";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ty"
    };

    oper mkNTable0895: Str -> SubstForm => Str; --%
    oper mkNTable0895 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "atr";
      SF Sg Gen => x + "atru";
      SF Sg Dat => x + "atrowi";
      SF Sg Acc => x + "atr";
      SF Sg Instr => x + "atrem";
      SF Sg Loc => x + "etrze";
      SF Sg Voc => x + "etrze";
      SF Pl Nom => x + "atry";
      SF Pl Gen => x + "atrów";
      SF Pl Dat => x + "atrom";
      SF Pl Acc => x + "atry";
      SF Pl Instr => x + "atrami";
      SF Pl Loc => x + "atrach";
      SF Pl Voc => x + "atry"
    };

    oper mkNTable0896: Str -> SubstForm => Str; --%
    oper mkNTable0896 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niek";
      SF Sg Gen => x + "ńka";
      SF Sg Dat => x + "ńkowi";
      SF Sg Acc => x + "niek";
      SF Sg Instr => x + "ńkiem";
      SF Sg Loc => x + "ńku";
      SF Sg Voc => x + "ńku";
      SF Pl Nom => x + "ńki";
      SF Pl Gen => x + "ńków";
      SF Pl Dat => x + "ńkom";
      SF Pl Acc => x + "ńki";
      SF Pl Instr => x + "ńkami";
      SF Pl Loc => x + "ńkach";
      SF Pl Voc => x + "ńki"
    };

    oper mkNTable0897: Str -> SubstForm => Str; --%
    oper mkNTable0897 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0898: Str -> SubstForm => Str; --%
    oper mkNTable0898 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oko";
      SF Sg Gen => x + "oka";
      SF Sg Dat => x + "oku";
      SF Sg Acc => x + "oko";
      SF Sg Instr => x + "okiem";
      SF Sg Loc => x + "oku";
      SF Sg Voc => x + "oko";
      SF Pl Nom => x + "oczy";
      SF Pl Gen => x + "ócz";
      SF Pl Dat => x + "oczom";
      SF Pl Acc => x + "oczy";
      SF Pl Instr => x + "oczyma";
      SF Pl Loc => x + "oczach";
      SF Pl Voc => x + "oczy"
    };

    oper mkNTable0899: Str -> SubstForm => Str; --%
    oper mkNTable0899 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niek";
      SF Sg Gen => x + "ńka";
      SF Sg Dat => x + "ńkowi";
      SF Sg Acc => x + "ńka";
      SF Sg Instr => x + "ńkiem";
      SF Sg Loc => x + "ńku";
      SF Sg Voc => x + "ńku";
      SF Pl Nom => x + "ńki";
      SF Pl Gen => x + "ńków";
      SF Pl Dat => x + "ńkom";
      SF Pl Acc => x + "ńki";
      SF Pl Instr => x + "ńkami";
      SF Pl Loc => x + "ńkach";
      SF Pl Voc => x + "ńki"
    };

    oper mkNTable0900: Str -> SubstForm => Str; --%
    oper mkNTable0900 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0902: Str -> SubstForm => Str; --%
    oper mkNTable0902 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ół";
      SF Sg Gen => x + "oła";
      SF Sg Dat => x + "ołowi";
      SF Sg Acc => x + "ół";
      SF Sg Instr => x + "ołem";
      SF Sg Loc => x + "ole";
      SF Sg Voc => x + "ole";
      SF Pl Nom => x + "oły";
      SF Pl Gen => x + "ołów";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oły";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oły"
    };

    oper mkNTable0903: Str -> SubstForm => Str; --%
    oper mkNTable0903 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zeł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łu";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "łowie";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "łów";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "łowie"
    };

    oper mkNTable0904: Str -> SubstForm => Str; --%
    oper mkNTable0904 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zeł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łu";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable0905: Str -> SubstForm => Str; --%
    oper mkNTable0905 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ep";
      SF Sg Gen => x + "pu";
      SF Sg Dat => x + "powi";
      SF Sg Acc => x + "ep";
      SF Sg Instr => x + "pem";
      SF Sg Loc => x + "pie";
      SF Sg Voc => x + "pie";
      SF Pl Nom => x + "py";
      SF Pl Gen => x + "pów";
      SF Pl Dat => x + "pom";
      SF Pl Acc => x + "py";
      SF Pl Instr => x + "pami";
      SF Pl Loc => x + "pach";
      SF Pl Voc => x + "py"
    };

    oper mkNTable0906: Str -> SubstForm => Str; --%
    oper mkNTable0906 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "set";
      SF Sg Gen => x + "stu";
      SF Sg Dat => x + "stowi";
      SF Sg Acc => x + "set";
      SF Sg Instr => x + "stem";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "ście";
      SF Pl Nom => x + "sty";
      SF Pl Gen => x + "stów";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "sty";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "sty"
    };

    oper mkNTable0907: Str -> SubstForm => Str; --%
    oper mkNTable0907 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "siec";
      SF Sg Gen => x + "śca";
      SF Sg Dat => x + "ścowi";
      SF Sg Acc => x + "śca";
      SF Sg Instr => x + "ścem";
      SF Sg Loc => x + "ścu";
      SF Sg Voc => x + "ścu";
      SF Pl Nom => x + "śce";
      SF Pl Gen => x + "śców";
      SF Pl Dat => x + "ścom";
      SF Pl Acc => x + "śce";
      SF Pl Instr => x + "ścami";
      SF Pl Loc => x + "ścach";
      SF Pl Voc => x + "śce"
    };

    oper mkNTable0909: Str -> SubstForm => Str; --%
    oper mkNTable0909 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "sioł";
      SF Sg Gen => x + "sła";
      SF Sg Dat => x + "słu";
      SF Sg Acc => x + "sła";
      SF Sg Instr => x + "słem";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "śle";
      SF Pl Nom => x + "sły";
      SF Pl Gen => x + "słów";
      SF Pl Dat => x + "słom";
      SF Pl Acc => x + "sły";
      SF Pl Instr => x + "słami";
      SF Pl Loc => x + "słach";
      SF Pl Voc => x + "sły"
    };

    oper mkNTable0910: Str -> SubstForm => Str; --%
    oper mkNTable0910 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oła";
      SF Sg Gen => x + "oły";
      SF Sg Dat => x + "ole";
      SF Sg Acc => x + "ołę";
      SF Sg Instr => x + "ołą";
      SF Sg Loc => x + "ole";
      SF Sg Voc => x + "oło";
      SF Pl Nom => x + "oły";
      SF Pl Gen => x + "ół";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oły";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oły"
    };

    oper mkNTable0911: Str -> SubstForm => Str; --%
    oper mkNTable0911 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "eń";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0912: Str -> SubstForm => Str; --%
    oper mkNTable0912 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ca";
      SF Sg Gen => x + "cy";
      SF Sg Dat => x + "cy";
      SF Sg Acc => x + "cę";
      SF Sg Instr => x + "cą";
      SF Sg Loc => x + "cy";
      SF Sg Voc => x + "co";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "iec";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0913: Str -> SubstForm => Str; --%
    oper mkNTable0913 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ies";
      SF Sg Gen => x + "sa";
      SF Sg Dat => x + "sowi";
      SF Sg Acc => x + "ies";
      SF Sg Instr => x + "sem";
      SF Sg Loc => x + "sie";
      SF Sg Voc => x + "sie";
      SF Pl Nom => x + "sy";
      SF Pl Gen => x + "sów";
      SF Pl Dat => x + "som";
      SF Pl Acc => x + "sy";
      SF Pl Instr => x + "sami";
      SF Pl Loc => x + "sach";
      SF Pl Voc => x + "sy"
    };

    oper mkNTable0915: Str -> SubstForm => Str; --%
    oper mkNTable0915 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ór";
      SF Sg Gen => x + "ora";
      SF Sg Dat => x + "orowi";
      SF Sg Acc => x + "ór";
      SF Sg Instr => x + "orem";
      SF Sg Loc => x + "orze";
      SF Sg Voc => x + "orze";
      SF Pl Nom => x + "ory";
      SF Pl Gen => x + "orów";
      SF Pl Dat => x + "orom";
      SF Pl Acc => x + "ory";
      SF Pl Instr => x + "orami";
      SF Pl Loc => x + "orach";
      SF Pl Voc => x + "ory"
    };

    oper mkNTable0916: Str -> SubstForm => Str; --%
    oper mkNTable0916 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "si";
      SF Sg Dat => x + "si";
      SF Sg Acc => x + "ś";
      SF Sg Instr => x + "sią";
      SF Sg Loc => x + "si";
      SF Sg Voc => x + "si";
      SF Pl Nom => x + "sie";
      SF Pl Gen => x + "si";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "sie";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "sie"
    };

    oper mkNTable0918: Str -> SubstForm => Str; --%
    oper mkNTable0918 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "o";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "o";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "o"
    };

    oper mkNTable0919: Str -> SubstForm => Str; --%
    oper mkNTable0919 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "c";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "c";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ców";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0921: Str -> SubstForm => Str; --%
    oper mkNTable0921 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0922: Str -> SubstForm => Str; --%
    oper mkNTable0922 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0923: Str -> SubstForm => Str; --%
    oper mkNTable0923 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0925: Str -> SubstForm => Str; --%
    oper mkNTable0925 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąz";
      SF Sg Gen => x + "ęzu";
      SF Sg Dat => x + "ęzowi";
      SF Sg Acc => x + "ąz";
      SF Sg Instr => x + "ęzem";
      SF Sg Loc => x + "ęzie";
      SF Sg Voc => x + "ęzie";
      SF Pl Nom => x + "ęzy";
      SF Pl Gen => x + "ęzów";
      SF Pl Dat => x + "ęzom";
      SF Pl Acc => x + "ęzy";
      SF Pl Instr => x + "ęzami";
      SF Pl Loc => x + "ęzach";
      SF Pl Voc => x + "ęzy"
    };

    oper mkNTable0926: Str -> SubstForm => Str; --%
    oper mkNTable0926 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ieć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0927: Str -> SubstForm => Str; --%
    oper mkNTable0927 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ieć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "ieć";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0929: Str -> SubstForm => Str; --%
    oper mkNTable0929 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ćka";
      SF Sg Gen => x + "ćki";
      SF Sg Dat => x + "ćce";
      SF Sg Acc => x + "ćkę";
      SF Sg Instr => x + "ćką";
      SF Sg Loc => x + "ćce";
      SF Sg Voc => x + "ćko";
      SF Pl Nom => x + "ćki";
      SF Pl Gen => x + "ciek";
      SF Pl Dat => x + "ćkom";
      SF Pl Acc => x + "ćki";
      SF Pl Instr => x + "ćkami";
      SF Pl Loc => x + "ćkach";
      SF Pl Voc => x + "ćki"
    };

    oper mkNTable0931: Str -> SubstForm => Str; --%
    oper mkNTable0931 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ądz";
      SF Sg Gen => x + "ądza";
      SF Sg Dat => x + "ądzowi";
      SF Sg Acc => x + "ądz";
      SF Sg Instr => x + "ądzem";
      SF Sg Loc => x + "ądzu";
      SF Sg Voc => x + "ądzu";
      SF Pl Nom => x + "ądze";
      SF Pl Gen => x + "ędzy";
      SF Pl Dat => x + "ądzom";
      SF Pl Acc => x + "ądze";
      SF Pl Instr => x + "ędzmi";
      SF Pl Loc => x + "ądzach";
      SF Pl Voc => x + "ądze"
    };

    oper mkNTable0934: Str -> SubstForm => Str; --%
    oper mkNTable0934 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ies";
      SF Sg Gen => x + "sa";
      SF Sg Dat => x + "su";
      SF Sg Acc => x + "sa";
      SF Sg Instr => x + "sem";
      SF Sg Loc => x + "sie";
      SF Sg Voc => x + "sie";
      SF Pl Nom => x + "sy";
      SF Pl Gen => x + "sów";
      SF Pl Dat => x + "som";
      SF Pl Acc => x + "sy";
      SF Pl Instr => x + "sami";
      SF Pl Loc => x + "sach";
      SF Pl Voc => x + "sy"
    };

    oper mkNTable0935: Str -> SubstForm => Str; --%
    oper mkNTable0935 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "ni";
      SF Pl Nom => x + "ni";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "ni";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "ni"
    };

    oper mkNTable0936: Str -> SubstForm => Str; --%
    oper mkNTable0936 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "wa";
      SF Sg Gen => x + "wy";
      SF Sg Dat => x + "wie";
      SF Sg Acc => x + "wę";
      SF Sg Instr => x + "wą";
      SF Sg Loc => x + "wie";
      SF Sg Voc => x + "wo";
      SF Pl Nom => x + "wy";
      SF Pl Gen => x + "iew";
      SF Pl Dat => x + "wom";
      SF Pl Acc => x + "wy";
      SF Pl Instr => x + "wami";
      SF Pl Loc => x + "wach";
      SF Pl Voc => x + "wy"
    };

    oper mkNTable0938: Str -> SubstForm => Str; --%
    oper mkNTable0938 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ój";
      SF Sg Gen => x + "oja";
      SF Sg Dat => x + "ojowi";
      SF Sg Acc => x + "oja";
      SF Sg Instr => x + "ojem";
      SF Sg Loc => x + "oju";
      SF Sg Voc => x + "oju";
      SF Pl Nom => x + "oje";
      SF Pl Gen => x + "oi";
      SF Pl Dat => x + "ojom";
      SF Pl Acc => x + "oje";
      SF Pl Instr => x + "ojami";
      SF Pl Loc => x + "ojach";
      SF Pl Voc => x + "oje"
    };

    oper mkNTable0939: Str -> SubstForm => Str; --%
    oper mkNTable0939 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ół";
      SF Sg Gen => x + "ołu";
      SF Sg Dat => x + "ołowi";
      SF Sg Acc => x + "ół";
      SF Sg Instr => x + "ołem";
      SF Sg Loc => x + "ele";
      SF Sg Voc => x + "ele";
      SF Pl Nom => x + "oły";
      SF Pl Gen => x + "ołów";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oły";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oły"
    };

    oper mkNTable0940: Str -> SubstForm => Str; --%
    oper mkNTable0940 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "seł";
      SF Sg Gen => x + "sła";
      SF Sg Dat => x + "słowi";
      SF Sg Acc => x + "sła";
      SF Sg Instr => x + "słem";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "śle";
      SF Pl Nom => x + "słowie";
      SF Pl Gen => x + "słów";
      SF Pl Dat => x + "słom";
      SF Pl Acc => x + "słów";
      SF Pl Instr => x + "słami";
      SF Pl Loc => x + "słach";
      SF Pl Voc => x + "słowie"
    };

    oper mkNTable0942: Str -> SubstForm => Str; --%
    oper mkNTable0942 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ód";
      SF Sg Gen => x + "oda";
      SF Sg Dat => x + "odowi";
      SF Sg Acc => x + "oda";
      SF Sg Instr => x + "odem";
      SF Sg Loc => x + "odzie";
      SF Sg Voc => x + "odzie";
      SF Pl Nom => x + "odowie";
      SF Pl Gen => x + "odów";
      SF Pl Dat => x + "odom";
      SF Pl Acc => x + "odów";
      SF Pl Instr => x + "odami";
      SF Pl Loc => x + "odach";
      SF Pl Voc => x + "odowie"
    };

    oper mkNTable0943: Str -> SubstForm => Str; --%
    oper mkNTable0943 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ew";
      SF Sg Gen => x + "wu";
      SF Sg Dat => x + "wowi";
      SF Sg Acc => x + "ew";
      SF Sg Instr => x + "wem";
      SF Sg Loc => x + "wie";
      SF Sg Voc => x + "wie";
      SF Pl Nom => x + "wy";
      SF Pl Gen => x + "wów";
      SF Pl Dat => x + "wom";
      SF Pl Acc => x + "wy";
      SF Pl Instr => x + "wami";
      SF Pl Loc => x + "wach";
      SF Pl Voc => x + "wy"
    };

    oper mkNTable0944: Str -> SubstForm => Str; --%
    oper mkNTable0944 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0945: Str -> SubstForm => Str; --%
    oper mkNTable0945 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "ośba";
      SF Sg Gen => x + "ośby";
      SF Sg Dat => x + "ośbie";
      SF Sg Acc => x + "ośbę";
      SF Sg Instr => x + "ośbą";
      SF Sg Loc => x + "ośbie";
      SF Sg Voc => x + "ośbo";
      SF Pl Nom => x + "ośby";
      SF Pl Gen => x + "óśb";
      SF Pl Dat => x + "ośbom";
      SF Pl Acc => x + "ośby";
      SF Pl Instr => x + "ośbami";
      SF Pl Loc => x + "ośbach";
      SF Pl Voc => x + "ośby"
    };

    oper mkNTable0946: Str -> SubstForm => Str; --%
    oper mkNTable0946 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "zień";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "niów";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0947: Str -> SubstForm => Str; --%
    oper mkNTable0947 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ień";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "niów";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0948: Str -> SubstForm => Str; --%
    oper mkNTable0948 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ień";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0950: Str -> SubstForm => Str; --%
    oper mkNTable0950 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0951: Str -> SubstForm => Str; --%
    oper mkNTable0951 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "owie";
      SF Sg Gen => x + "owia";
      SF Sg Dat => x + "owiu";
      SF Sg Acc => x + "owie";
      SF Sg Instr => x + "owiem";
      SF Sg Loc => x + "owiu";
      SF Sg Voc => x + "owie";
      SF Pl Nom => x + "owia";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "owiom";
      SF Pl Acc => x + "owia";
      SF Pl Instr => x + "owiami";
      SF Pl Loc => x + "owiach";
      SF Pl Voc => x + "owia"
    };

    oper mkNTable0953: Str -> SubstForm => Str; --%
    oper mkNTable0953 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "sia";
      SF Sg Dat => x + "siowi";
      SF Sg Acc => x + "ś";
      SF Sg Instr => x + "siem";
      SF Sg Loc => x + "siu";
      SF Sg Voc => x + "siu";
      SF Pl Nom => x + "sie";
      SF Pl Gen => x + "si";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "sie";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "sie"
    };

    oper mkNTable0955: Str -> SubstForm => Str; --%
    oper mkNTable0955 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "to";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "tu";
      SF Sg Acc => x + "to";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => x + "ta";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "ta";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ta"
    };

    oper mkNTable0956: Str -> SubstForm => Str; --%
    oper mkNTable0956 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ciów";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0957: Str -> SubstForm => Str; --%
    oper mkNTable0957 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eć";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "eć";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cie";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable0958: Str -> SubstForm => Str; --%
    oper mkNTable0958 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "tno";
      SF Sg Gen => x + "tna";
      SF Sg Dat => x + "tnu";
      SF Sg Acc => x + "tno";
      SF Sg Instr => x + "tnem";
      SF Sg Loc => x + "tnie";
      SF Sg Voc => x + "tno";
      SF Pl Nom => x + "tna";
      SF Pl Gen => x + "cien";
      SF Pl Dat => x + "tnom";
      SF Pl Acc => x + "tna";
      SF Pl Instr => x + "tnami";
      SF Pl Loc => x + "tnach";
      SF Pl Voc => x + "tna"
    };

    oper mkNTable0959: Str -> SubstForm => Str; --%
    oper mkNTable0959 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sen";
      SF Sg Gen => x + "snu";
      SF Sg Dat => x + "snowi";
      SF Sg Acc => x + "sen";
      SF Sg Instr => x + "snem";
      SF Sg Loc => x + "śnie";
      SF Sg Voc => x + "śnie";
      SF Pl Nom => x + "sny";
      SF Pl Gen => x + "snów";
      SF Pl Dat => x + "snom";
      SF Pl Acc => x + "sny";
      SF Pl Instr => x + "snami";
      SF Pl Loc => x + "snach";
      SF Pl Voc => x + "sny"
    };

    oper mkNTable0960: Str -> SubstForm => Str; --%
    oper mkNTable0960 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ieś";
      SF Sg Gen => x + "si";
      SF Sg Dat => x + "si";
      SF Sg Acc => x + "ieś";
      SF Sg Instr => x + "sią";
      SF Sg Loc => x + "si";
      SF Sg Voc => x + "si";
      SF Pl Nom => x + "sie";
      SF Pl Gen => x + "si";
      SF Pl Dat => x + "siom";
      SF Pl Acc => x + "sie";
      SF Pl Instr => x + "siami";
      SF Pl Loc => x + "siach";
      SF Pl Voc => x + "sie"
    };

    oper mkNTable0961: Str -> SubstForm => Str; --%
    oper mkNTable0961 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "atło";
      SF Sg Gen => x + "atła";
      SF Sg Dat => x + "atłu";
      SF Sg Acc => x + "atło";
      SF Sg Instr => x + "atłem";
      SF Sg Loc => x + "etle";
      SF Sg Voc => x + "atło";
      SF Pl Nom => x + "atła";
      SF Pl Gen => x + "ateł";
      SF Pl Dat => x + "atłom";
      SF Pl Acc => x + "atła";
      SF Pl Instr => x + "atłami";
      SF Pl Loc => x + "atłach";
      SF Pl Voc => x + "atła"
    };

    oper mkNTable0962: Str -> SubstForm => Str; --%
    oper mkNTable0962 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "o";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "o";
      SF Sg Loc => x + "o";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "o";
      SF Pl Gen => x + "o";
      SF Pl Dat => x + "o";
      SF Pl Acc => x + "o";
      SF Pl Instr => x + "o";
      SF Pl Loc => x + "o";
      SF Pl Voc => x + "o"
    };

    oper mkNTable0963: Str -> SubstForm => Str; --%
    oper mkNTable0963 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "e";
      SF Sg Dat => x + "e";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "e";
      SF Sg Loc => x + "e";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "ia";
      SF Pl Gen => x + "iów";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "ia";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ia"
    };

    oper mkNTable0964: Str -> SubstForm => Str; --%
    oper mkNTable0964 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0965: Str -> SubstForm => Str; --%
    oper mkNTable0965 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0966: Str -> SubstForm => Str; --%
    oper mkNTable0966 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "m";
      SF Sg Loc => x + "m";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ch";
      SF Pl Dat => x + "m";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "mi";
      SF Pl Loc => x + "ch";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0970: Str -> SubstForm => Str; --%
    oper mkNTable0970 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "u";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0971: Str -> SubstForm => Str; --%
    oper mkNTable0971 lexem = 
      let x = Predef.tk 9 lexem in
    table { 
      SF Sg Nom => x + "pospolita";
      SF Sg Gen => x + "ypospolitej";
      SF Sg Dat => x + "ypospolitej";
      SF Sg Acc => x + "ąpospolitą";
      SF Sg Instr => x + "ąpospolitą";
      SF Sg Loc => x + "ypospolitej";
      SF Sg Voc => x + "ypospolita";
      SF Pl Nom => x + "ypospolite";
      SF Pl Gen => x + "pospolitych";
      SF Pl Dat => x + "pospolitym";
      SF Pl Acc => x + "ypospolite";
      SF Pl Instr => x + "pospolitymi";
      SF Pl Loc => x + "pospolitych";
      SF Pl Voc => x + "ypospolite"
    };

    oper mkNTable0972: Str -> SubstForm => Str; --%
    oper mkNTable0972 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sło";
      SF Sg Gen => x + "sła";
      SF Sg Dat => x + "słu";
      SF Sg Acc => x + "sło";
      SF Sg Instr => x + "słem";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "sło";
      SF Pl Nom => x + "sła";
      SF Pl Gen => x + "sł";
      SF Pl Dat => x + "słom";
      SF Pl Acc => x + "sła";
      SF Pl Instr => x + "słami";
      SF Pl Loc => x + "słach";
      SF Pl Voc => x + "sła"
    };

    oper mkNTable0974: Str -> SubstForm => Str; --%
    oper mkNTable0974 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ęka";
      SF Sg Gen => x + "ęki";
      SF Sg Dat => x + "ęce";
      SF Sg Acc => x + "ękę";
      SF Sg Instr => x + "ęką";
      SF Sg Loc => x + "ęce";
      SF Sg Voc => x + "ęko";
      SF Pl Nom => x + "ęce";
      SF Pl Gen => x + "ąk";
      SF Pl Dat => x + "ękom";
      SF Pl Acc => x + "ęce";
      SF Pl Instr => x + "ękoma";
      SF Pl Loc => x + "ęku";
      SF Pl Voc => x + "ęce"
    };

    oper mkNTable0976: Str -> SubstForm => Str; --%
    oper mkNTable0976 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ień";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "ień";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0977: Str -> SubstForm => Str; --%
    oper mkNTable0977 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => x + "le";
      SF Pl Gen => x + "lów";
      SF Pl Dat => x + "lom";
      SF Pl Acc => x + "lów";
      SF Pl Instr => x + "lami";
      SF Pl Loc => x + "lach";
      SF Pl Voc => x + "le"
    };

    oper mkNTable0978: Str -> SubstForm => Str; --%
    oper mkNTable0978 lexem = 
      let x = Predef.tk 5 lexem in
    table { 
      SF Sg Nom => x + "ostra";
      SF Sg Gen => x + "ostry";
      SF Sg Dat => x + "ostrze";
      SF Sg Acc => x + "ostrę";
      SF Sg Instr => x + "ostrą";
      SF Sg Loc => x + "ostrze";
      SF Sg Voc => x + "ostro";
      SF Pl Nom => x + "ostry";
      SF Pl Gen => x + "óstr";
      SF Pl Dat => x + "ostrom";
      SF Pl Acc => x + "ostry";
      SF Pl Instr => x + "ostrami";
      SF Pl Loc => x + "ostrach";
      SF Pl Voc => x + "ostry"
    };

    oper mkNTable0980: Str -> SubstForm => Str; --%
    oper mkNTable0980 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cco";
      SF Sg Gen => x + "cco";
      SF Sg Dat => x + "ccu";
      SF Sg Acc => x + "cco";
      SF Sg Instr => x + "kkiem";
      SF Sg Loc => x + "ccu";
      SF Sg Voc => x + "cco";
      SF Pl Nom => x + "cco";
      SF Pl Gen => x + "cco";
      SF Pl Dat => x + "ccom";
      SF Pl Acc => x + "cco";
      SF Pl Instr => x + "cco";
      SF Pl Loc => x + "cco";
      SF Pl Voc => x + "cco"
    };

    oper mkNTable0981: Str -> SubstForm => Str; --%
    oper mkNTable0981 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0983: Str -> SubstForm => Str; --%
    oper mkNTable0983 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sna";
      SF Sg Gen => x + "sny";
      SF Sg Dat => x + "śnie";
      SF Sg Acc => x + "snę";
      SF Sg Instr => x + "sną";
      SF Sg Loc => x + "śnie";
      SF Sg Voc => x + "sno";
      SF Pl Nom => x + "sny";
      SF Pl Gen => x + "sen";
      SF Pl Dat => x + "snom";
      SF Pl Acc => x + "sny";
      SF Pl Instr => x + "snami";
      SF Pl Loc => x + "snach";
      SF Pl Voc => x + "sny"
    };

    oper mkNTable0984: Str -> SubstForm => Str; --%
    oper mkNTable0984 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sta";
      SF Sg Gen => x + "sty";
      SF Sg Dat => x + "ście";
      SF Sg Acc => x + "stę";
      SF Sg Instr => x + "stą";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "sto";
      SF Pl Nom => x + "stowie";
      SF Pl Gen => x + "stów";
      SF Pl Dat => x + "stom";
      SF Pl Acc => x + "stów";
      SF Pl Instr => x + "stami";
      SF Pl Loc => x + "stach";
      SF Pl Voc => x + "stowie"
    };

    oper mkNTable0985: Str -> SubstForm => Str; --%
    oper mkNTable0985 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "opa";
      SF Sg Gen => x + "opy";
      SF Sg Dat => x + "opie";
      SF Sg Acc => x + "opę";
      SF Sg Instr => x + "opą";
      SF Sg Loc => x + "opie";
      SF Sg Voc => x + "opo";
      SF Pl Nom => x + "opy";
      SF Pl Gen => x + "óp";
      SF Pl Dat => x + "opom";
      SF Pl Acc => x + "opy";
      SF Pl Instr => x + "opami";
      SF Pl Loc => x + "opach";
      SF Pl Voc => x + "opy"
    };

    oper mkNTable0986: Str -> SubstForm => Str; --%
    oper mkNTable0986 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "nia";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "nię";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "nio";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "zien";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0988: Str -> SubstForm => Str; --%
    oper mkNTable0988 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "eń";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0989: Str -> SubstForm => Str; --%
    oper mkNTable0989 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "seł";
      SF Sg Gen => x + "sła";
      SF Sg Dat => x + "słowi";
      SF Sg Acc => x + "sła";
      SF Sg Instr => x + "słem";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "śle";
      SF Pl Nom => x + "sły";
      SF Pl Gen => x + "słów";
      SF Pl Dat => x + "słom";
      SF Pl Acc => x + "sły";
      SF Pl Instr => x + "słami";
      SF Pl Loc => x + "słach";
      SF Pl Voc => x + "sły"
    };

    oper mkNTable0990: Str -> SubstForm => Str; --%
    oper mkNTable0990 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0991: Str -> SubstForm => Str; --%
    oper mkNTable0991 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "ze";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0993: Str -> SubstForm => Str; --%
    oper mkNTable0993 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ier";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "rowie";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "rów";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "rowie"
    };

    oper mkNTable0995: Str -> SubstForm => Str; --%
    oper mkNTable0995 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ią";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "i";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "iom";
      SF Pl Acc => x + "ie";
      SF Pl Instr => x + "iami";
      SF Pl Loc => x + "iach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0996: Str -> SubstForm => Str; --%
    oper mkNTable0996 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ad";
      SF Sg Gen => x + "ada";
      SF Sg Dat => x + "adowi";
      SF Sg Acc => x + "ada";
      SF Sg Instr => x + "adem";
      SF Sg Loc => x + "edzie";
      SF Sg Voc => x + "edzie";
      SF Pl Nom => x + "edzi";
      SF Pl Gen => x + "adów";
      SF Pl Dat => x + "adom";
      SF Pl Acc => x + "adów";
      SF Pl Instr => x + "adami";
      SF Pl Loc => x + "adach";
      SF Pl Voc => x + "edzi"
    };

    oper mkNTable0997: Str -> SubstForm => Str; --%
    oper mkNTable0997 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ój";
      SF Sg Gen => x + "oja";
      SF Sg Dat => x + "ojowi";
      SF Sg Acc => x + "ój";
      SF Sg Instr => x + "ojem";
      SF Sg Loc => x + "oju";
      SF Sg Voc => x + "oju";
      SF Pl Nom => x + "oje";
      SF Pl Gen => x + "ojów";
      SF Pl Dat => x + "ojom";
      SF Pl Acc => x + "oje";
      SF Pl Instr => x + "ojami";
      SF Pl Loc => x + "ojach";
      SF Pl Voc => x + "oje"
    };

    oper mkNTable0998: Str -> SubstForm => Str; --%
    oper mkNTable0998 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ień";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0999: Str -> SubstForm => Str; --%
    oper mkNTable0999 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ba";
      SF Sg Gen => x + "by";
      SF Sg Dat => x + "bie";
      SF Sg Acc => x + "bę";
      SF Sg Instr => x + "bą";
      SF Sg Loc => x + "bie";
      SF Sg Voc => x + "bo";
      SF Pl Nom => x + "by";
      SF Pl Gen => x + "eb";
      SF Pl Dat => x + "bom";
      SF Pl Acc => x + "by";
      SF Pl Instr => x + "bami";
      SF Pl Loc => x + "bach";
      SF Pl Voc => x + "by"
    };

    oper mkNTable1001: Str -> SubstForm => Str; --%
    oper mkNTable1001 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ni";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable1003: Str -> SubstForm => Str; --%
    oper mkNTable1003 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ele";
      SF Sg Gen => x + "ela";
      SF Sg Dat => x + "elu";
      SF Sg Acc => x + "ele";
      SF Sg Instr => x + "elem";
      SF Sg Loc => x + "elu";
      SF Sg Voc => x + "ele";
      SF Pl Nom => x + "oła";
      SF Pl Gen => x + "ół";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oła";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oła"
    };

    oper mkNTable1004: Str -> SubstForm => Str; --%
    oper mkNTable1004 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable1005: Str -> SubstForm => Str; --%
    oper mkNTable1005 lexem = 
      let x = Predef.tk 5 lexem in
    table { 
      SF Sg Nom => x + "dzień";
      SF Sg Gen => x + "godnia";
      SF Sg Dat => x + "godniowi";
      SF Sg Acc => x + "dzień";
      SF Sg Instr => x + "godniem";
      SF Sg Loc => x + "godniu";
      SF Sg Voc => x + "godniu";
      SF Pl Nom => x + "godnie";
      SF Pl Gen => x + "godni";
      SF Pl Dat => x + "godniom";
      SF Pl Acc => x + "godnie";
      SF Pl Instr => x + "godniami";
      SF Pl Loc => x + "godniach";
      SF Pl Voc => x + "godnie"
    };

    oper mkNTable1006: Str -> SubstForm => Str; --%
    oper mkNTable1006 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąc";
      SF Sg Gen => x + "ąca";
      SF Sg Dat => x + "ącowi";
      SF Sg Acc => x + "ąca";
      SF Sg Instr => x + "ącem";
      SF Sg Loc => x + "ącu";
      SF Sg Voc => x + "ącu";
      SF Pl Nom => x + "ące";
      SF Pl Gen => x + "ęcy";
      SF Pl Dat => x + "ącom";
      SF Pl Acc => x + "ące";
      SF Pl Instr => x + "ącami";
      SF Pl Loc => x + "ącach";
      SF Pl Voc => x + "ące"
    };

    oper mkNTable1007: Str -> SubstForm => Str; --%
    oper mkNTable1007 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cho";
      SF Sg Gen => x + "cha";
      SF Sg Dat => x + "chu";
      SF Sg Acc => x + "cho";
      SF Sg Instr => x + "chem";
      SF Sg Loc => x + "chu";
      SF Sg Voc => x + "cho";
      SF Pl Nom => x + "szy";
      SF Pl Gen => x + "szów";
      SF Pl Dat => x + "szom";
      SF Pl Acc => x + "szy";
      SF Pl Instr => x + "szyma";
      SF Pl Loc => x + "szach";
      SF Pl Voc => x + "szy"
    };

    oper mkNTable1008: Str -> SubstForm => Str; --%
    oper mkNTable1008 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => x + "niowie";
      SF Pl Gen => x + "niów";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "niów";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "niowie"
    };

    oper mkNTable1009: Str -> SubstForm => Str; --%
    oper mkNTable1009 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "er";
      SF Sg Gen => x + "eru";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "er";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => x + "ry";
      SF Pl Gen => x + "rów";
      SF Pl Dat => x + "rom";
      SF Pl Acc => x + "ry";
      SF Pl Instr => x + "rami";
      SF Pl Loc => x + "rach";
      SF Pl Voc => x + "ry"
    };

    oper mkNTable1010: Str -> SubstForm => Str; --%
    oper mkNTable1010 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąż";
      SF Sg Gen => x + "ęży";
      SF Sg Dat => x + "ęży";
      SF Sg Acc => x + "ąż";
      SF Sg Instr => x + "ężą";
      SF Sg Loc => x + "ęży";
      SF Sg Voc => x + "ęży";
      SF Pl Nom => x + "ęże";
      SF Pl Gen => x + "ęży";
      SF Pl Dat => x + "ężom";
      SF Pl Acc => x + "ęże";
      SF Pl Instr => x + "ężami";
      SF Pl Loc => x + "ężach";
      SF Pl Voc => x + "ęże"
    };

    oper mkNTable1011: Str -> SubstForm => Str; --%
    oper mkNTable1011 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => x + "cie";
      SF Pl Gen => x + "ciów";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ciów";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cie"
    };

    oper mkNTable1012: Str -> SubstForm => Str; --%
    oper mkNTable1012 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "o";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable1013: Str -> SubstForm => Str; --%
    oper mkNTable1013 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable1014: Str -> SubstForm => Str; --%
    oper mkNTable1014 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "ci";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => x + "ciowie";
      SF Pl Gen => x + "ciów";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ciów";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "ciowie"
    };

    oper mkNTable1016: Str -> SubstForm => Str; --%
    oper mkNTable1016 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "esz";
      SF Sg Gen => x + "szy";
      SF Sg Dat => x + "szy";
      SF Sg Acc => x + "esz";
      SF Sg Instr => x + "szą";
      SF Sg Loc => x + "szy";
      SF Sg Voc => x + "szy";
      SF Pl Nom => x + "szy";
      SF Pl Gen => x + "szy";
      SF Pl Dat => x + "szom";
      SF Pl Acc => x + "szy";
      SF Pl Instr => x + "szami";
      SF Pl Loc => x + "szach";
      SF Pl Voc => x + "szy"
    };

    oper mkNTable1020: Str -> SubstForm => Str; --%
    oper mkNTable1020 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "ym";
      SF Sg Loc => x + "ym";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "zy";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "ych";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "zy"
    };

    oper mkNTable1022: Str -> SubstForm => Str; --%
    oper mkNTable1022 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + ""
    };

    oper mkNTable1023: Str -> SubstForm => Str; --%
    oper mkNTable1023 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "zień";
      SF Sg Gen => x + "źnia";
      SF Sg Dat => x + "źniowi";
      SF Sg Acc => x + "źnia";
      SF Sg Instr => x + "źniem";
      SF Sg Loc => x + "źniu";
      SF Sg Voc => x + "źniu";
      SF Pl Nom => x + "źniowie";
      SF Pl Gen => x + "źniów";
      SF Pl Dat => x + "źniom";
      SF Pl Acc => x + "źniów";
      SF Pl Instr => x + "źniami";
      SF Pl Loc => x + "źniach";
      SF Pl Voc => x + "źniowie"
    };

    oper mkNTable1025: Str -> SubstForm => Str; --%
    oper mkNTable1025 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "sień";
      SF Sg Gen => x + "śnia";
      SF Sg Dat => x + "śniowi";
      SF Sg Acc => x + "sień";
      SF Sg Instr => x + "śniem";
      SF Sg Loc => x + "śniu";
      SF Sg Voc => x + "śniu";
      SF Pl Nom => x + "śnie";
      SF Pl Gen => x + "śniów";
      SF Pl Dat => x + "śniom";
      SF Pl Acc => x + "śnie";
      SF Pl Instr => x + "śniami";
      SF Pl Loc => x + "śniach";
      SF Pl Voc => x + "śnie"
    };

    oper mkNTable1027: Str -> SubstForm => Str; --%
    oper mkNTable1027 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "at";
      SF Sg Gen => x + "ata";
      SF Sg Dat => x + "atowi";
      SF Sg Acc => x + "at";
      SF Sg Instr => x + "atem";
      SF Sg Loc => x + "ecie";
      SF Sg Voc => x + "ecie";
      SF Pl Nom => x + "aty";
      SF Pl Gen => x + "atów";
      SF Pl Dat => x + "atom";
      SF Pl Acc => x + "aty";
      SF Pl Instr => x + "atami";
      SF Pl Loc => x + "atach";
      SF Pl Voc => x + "aty"
    };

    oper mkNTable1028: Str -> SubstForm => Str; --%
    oper mkNTable1028 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "łów";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable1029: Str -> SubstForm => Str; --%
    oper mkNTable1029 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąż";
      SF Sg Gen => x + "ęża";
      SF Sg Dat => x + "ężowi";
      SF Sg Acc => x + "ęża";
      SF Sg Instr => x + "ężem";
      SF Sg Loc => x + "ężu";
      SF Sg Voc => x + "ężu";
      SF Pl Nom => x + "ęże";
      SF Pl Gen => x + "ężów";
      SF Pl Dat => x + "ężom";
      SF Pl Acc => x + "ęże";
      SF Pl Instr => x + "ężami";
      SF Pl Loc => x + "ężach";
      SF Pl Voc => x + "ęże"
    };

    oper mkNTable1030: Str -> SubstForm => Str; --%
    oper mkNTable1030 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąż";
      SF Sg Gen => x + "ęża";
      SF Sg Dat => x + "ężowi";
      SF Sg Acc => x + "ąż";
      SF Sg Instr => x + "ężem";
      SF Sg Loc => x + "ężu";
      SF Sg Voc => x + "ężu";
      SF Pl Nom => x + "ęże";
      SF Pl Gen => x + "ężów";
      SF Pl Dat => x + "ężom";
      SF Pl Acc => x + "ęże";
      SF Pl Instr => x + "ężami";
      SF Pl Loc => x + "ężach";
      SF Pl Voc => x + "ęże"
    };

    oper mkNTable1031: Str -> SubstForm => Str; --%
    oper mkNTable1031 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "sień";
      SF Sg Gen => x + "śnia";
      SF Sg Dat => x + "śniowi";
      SF Sg Acc => x + "śnia";
      SF Sg Instr => x + "śniem";
      SF Sg Loc => x + "śniu";
      SF Sg Voc => x + "śniu";
      SF Pl Nom => x + "śnie";
      SF Pl Gen => x + "śni";
      SF Pl Dat => x + "śniom";
      SF Pl Acc => x + "śnie";
      SF Pl Instr => x + "śniami";
      SF Pl Loc => x + "śniach";
      SF Pl Voc => x + "śnie"
    };

    oper mkNTable1032: Str -> SubstForm => Str; --%
    oper mkNTable1032 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ódz";
      SF Sg Gen => x + "odza";
      SF Sg Dat => x + "odzowi";
      SF Sg Acc => x + "odza";
      SF Sg Instr => x + "odzem";
      SF Sg Loc => x + "odzu";
      SF Sg Voc => x + "odzu";
      SF Pl Nom => x + "odzowie";
      SF Pl Gen => x + "odzów";
      SF Pl Dat => x + "odzom";
      SF Pl Acc => x + "odzów";
      SF Pl Instr => x + "odzami";
      SF Pl Loc => x + "odzach";
      SF Pl Voc => x + "odzowie"
    };

    oper mkNTable1034: Str -> SubstForm => Str; --%
    oper mkNTable1034 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oże";
      SF Sg Gen => x + "oża";
      SF Sg Dat => x + "ożu";
      SF Sg Acc => x + "oże";
      SF Sg Instr => x + "ożem";
      SF Sg Loc => x + "ożu";
      SF Sg Voc => x + "oże";
      SF Pl Nom => x + "oża";
      SF Pl Gen => x + "óż";
      SF Pl Dat => x + "ożom";
      SF Pl Acc => x + "oża";
      SF Pl Instr => x + "ożami";
      SF Pl Loc => x + "ożach";
      SF Pl Voc => x + "oża"
    };

    oper mkNTable1035: Str -> SubstForm => Str; --%
    oper mkNTable1035 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oja";
      SF Sg Gen => x + "oi";
      SF Sg Dat => x + "oi";
      SF Sg Acc => x + "oję";
      SF Sg Instr => x + "oją";
      SF Sg Loc => x + "oi";
      SF Sg Voc => x + "ojo";
      SF Pl Nom => x + "oje";
      SF Pl Gen => x + "ój";
      SF Pl Dat => x + "ojom";
      SF Pl Acc => x + "oje";
      SF Pl Instr => x + "ojami";
      SF Pl Loc => x + "ojach";
      SF Pl Voc => x + "oje"
    };

    oper mkNTable1038: Str -> SubstForm => Str; --%
    oper mkNTable1038 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "orza";
      SF Sg Gen => x + "orzy";
      SF Sg Dat => x + "orzy";
      SF Sg Acc => x + "orzę";
      SF Sg Instr => x + "orzą";
      SF Sg Loc => x + "orzy";
      SF Sg Voc => x + "orzo";
      SF Pl Nom => x + "orze";
      SF Pl Gen => x + "órz";
      SF Pl Dat => x + "orzom";
      SF Pl Acc => x + "orze";
      SF Pl Instr => x + "orzami";
      SF Pl Loc => x + "orzach";
      SF Pl Voc => x + "orze"
    };

    oper mkNTable1039: Str -> SubstForm => Str; --%
    oper mkNTable1039 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ło";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łu";
      SF Sg Acc => x + "ło";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "łu";
      SF Sg Voc => x + "ło";
      SF Pl Nom => x + "ła";
      SF Pl Gen => x + "eł";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ła";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ła"
    };

    oper mkNTable1040: Str -> SubstForm => Str; --%
    oper mkNTable1040 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owu";
      SF Sg Dat => x + "owowi";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "owiem";
      SF Sg Loc => x + "owiu";
      SF Sg Voc => x + "owiu";
      SF Pl Nom => x + "owy";
      SF Pl Gen => x + "owów";
      SF Pl Dat => x + "owom";
      SF Pl Acc => x + "owy";
      SF Pl Instr => x + "owiami";
      SF Pl Loc => x + "owiach";
      SF Pl Voc => x + "owy"
    };

    oper mkNTable1045: Str -> SubstForm => Str; --%
    oper mkNTable1045 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "a";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "a";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "a";
      SF Pl Dat => x + "a";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "a";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable1046: Str -> SubstForm => Str; --%
    oper mkNTable1046 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eb";
      SF Sg Gen => x + "ba";
      SF Sg Dat => x + "bu";
      SF Sg Acc => x + "ba";
      SF Sg Instr => x + "bem";
      SF Sg Loc => x + "bie";
      SF Sg Voc => x + "bie";
      SF Pl Nom => x + "by";
      SF Pl Gen => x + "bów";
      SF Pl Dat => x + "bom";
      SF Pl Acc => x + "by";
      SF Pl Instr => x + "bami";
      SF Pl Loc => x + "bach";
      SF Pl Voc => x + "by"
    };

    oper mkNTable1047: Str -> SubstForm => Str; --%
    oper mkNTable1047 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eb";
      SF Sg Gen => x + "ba";
      SF Sg Dat => x + "bu";
      SF Sg Acc => x + "eb";
      SF Sg Instr => x + "bem";
      SF Sg Loc => x + "bie";
      SF Sg Voc => x + "bie";
      SF Pl Nom => x + "by";
      SF Pl Gen => x + "bów";
      SF Pl Dat => x + "bom";
      SF Pl Acc => x + "by";
      SF Pl Instr => x + "bami";
      SF Pl Loc => x + "bach";
      SF Pl Voc => x + "by"
    };

    oper mkNTable1048: Str -> SubstForm => Str; --%
    oper mkNTable1048 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "za";
      SF Sg Gen => x + "zy";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "zę";
      SF Sg Instr => x + "zą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zo";
      SF Pl Nom => x + "zy";
      SF Pl Gen => x + "ez";
      SF Pl Dat => x + "zom";
      SF Pl Acc => x + "zy";
      SF Pl Instr => x + "zami";
      SF Pl Loc => x + "zach";
      SF Pl Voc => x + "zy"
    };

    oper mkNTable1051: Str -> SubstForm => Str; --%
    oper mkNTable1051 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ęto";
      SF Sg Gen => x + "ęta";
      SF Sg Dat => x + "ętu";
      SF Sg Acc => x + "ęto";
      SF Sg Instr => x + "ętem";
      SF Sg Loc => x + "ęcie";
      SF Sg Voc => x + "ęto";
      SF Pl Nom => x + "ęta";
      SF Pl Gen => x + "ąt";
      SF Pl Dat => x + "ętom";
      SF Pl Acc => x + "ęta";
      SF Pl Instr => x + "ętami";
      SF Pl Loc => x + "ętach";
      SF Pl Voc => x + "ęta"
    };

    oper mkNTable1052: Str -> SubstForm => Str; --%
    oper mkNTable1052 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "źce";
      SF Sg Gen => x + "źca";
      SF Sg Dat => x + "źcu";
      SF Sg Acc => x + "źce";
      SF Sg Instr => x + "źcem";
      SF Sg Loc => x + "źcu";
      SF Sg Voc => x + "źce";
      SF Pl Nom => x + "źca";
      SF Pl Gen => x + "ziec";
      SF Pl Dat => x + "źcom";
      SF Pl Acc => x + "źca";
      SF Pl Instr => x + "źcami";
      SF Pl Loc => x + "źcach";
      SF Pl Voc => x + "źca"
    };

    oper mkNTable1053: Str -> SubstForm => Str; --%
    oper mkNTable1053 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ądź";
      SF Sg Gen => x + "ędzi";
      SF Sg Dat => x + "ędzi";
      SF Sg Acc => x + "ądź";
      SF Sg Instr => x + "ędzią";
      SF Sg Loc => x + "ędzi";
      SF Sg Voc => x + "ędzi";
      SF Pl Nom => x + "ędzie";
      SF Pl Gen => x + "ędzi";
      SF Pl Dat => x + "ędziom";
      SF Pl Acc => x + "ędzie";
      SF Pl Instr => x + "ędziami";
      SF Pl Loc => x + "ędziach";
      SF Pl Voc => x + "ędzie"
    };

    oper mkNTable1054: Str -> SubstForm => Str; --%
    oper mkNTable1054 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ądź";
      SF Sg Gen => x + "ędzia";
      SF Sg Dat => x + "ędziowi";
      SF Sg Acc => x + "ędzia";
      SF Sg Instr => x + "ędziem";
      SF Sg Loc => x + "ędziu";
      SF Sg Voc => x + "ędziu";
      SF Pl Nom => x + "ędzie";
      SF Pl Gen => x + "ędzi";
      SF Pl Dat => x + "ędziom";
      SF Pl Acc => x + "ędzie";
      SF Pl Instr => x + "ędziami";
      SF Pl Loc => x + "ędziach";
      SF Pl Voc => x + "ędzie"
    };

    oper mkNTable1055: Str -> SubstForm => Str; --%
    oper mkNTable1055 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ądź";
      SF Sg Gen => x + "ędzia";
      SF Sg Dat => x + "ędziowi";
      SF Sg Acc => x + "ądź";
      SF Sg Instr => x + "ędziem";
      SF Sg Loc => x + "ędziu";
      SF Sg Voc => x + "ędziu";
      SF Pl Nom => x + "ędzie";
      SF Pl Gen => x + "ędzi";
      SF Pl Dat => x + "ędziom";
      SF Pl Acc => x + "ędzie";
      SF Pl Instr => x + "ędziami";
      SF Pl Loc => x + "ędziach";
      SF Pl Voc => x + "ędzie"
    };

    oper mkNTable1057: Str -> SubstForm => Str; --%
    oper mkNTable1057 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ćma";
      SF Sg Gen => x + "ćmy";
      SF Sg Dat => x + "ćmie";
      SF Sg Acc => x + "ćmę";
      SF Sg Instr => x + "ćmą";
      SF Sg Loc => x + "ćmie";
      SF Sg Voc => x + "ćmo";
      SF Pl Nom => x + "ćmy";
      SF Pl Gen => x + "ciem";
      SF Pl Dat => x + "ćmom";
      SF Pl Acc => x + "ćmy";
      SF Pl Instr => x + "ćmami";
      SF Pl Loc => x + "ćmach";
      SF Pl Voc => x + "ćmy"
    };

    oper mkNTable0004: Str -> SubstForm => Str; --%
    oper mkNTable0004 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0005: Str -> SubstForm => Str; --%
    oper mkNTable0005 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0007: Str -> SubstForm => Str; --%
    oper mkNTable0007 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0008: Str -> SubstForm => Str; --%
    oper mkNTable0008 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0017: Str -> SubstForm => Str; --%
    oper mkNTable0017 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owu";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0018: Str -> SubstForm => Str; --%
    oper mkNTable0018 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0023: Str -> SubstForm => Str; --%
    oper mkNTable0023 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0024: Str -> SubstForm => Str; --%
    oper mkNTable0024 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0031: Str -> SubstForm => Str; --%
    oper mkNTable0031 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0032: Str -> SubstForm => Str; --%
    oper mkNTable0032 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0034: Str -> SubstForm => Str; --%
    oper mkNTable0034 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0039: Str -> SubstForm => Str; --%
    oper mkNTable0039 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0040: Str -> SubstForm => Str; --%
    oper mkNTable0040 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0041: Str -> SubstForm => Str; --%
    oper mkNTable0041 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0045: Str -> SubstForm => Str; --%
    oper mkNTable0045 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0052: Str -> SubstForm => Str; --%
    oper mkNTable0052 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0056: Str -> SubstForm => Str; --%
    oper mkNTable0056 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0057: Str -> SubstForm => Str; --%
    oper mkNTable0057 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0062: Str -> SubstForm => Str; --%
    oper mkNTable0062 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ga";
      SF Sg Gen => x + "gi";
      SF Sg Dat => x + "dze";
      SF Sg Acc => x + "gę";
      SF Sg Instr => x + "gą";
      SF Sg Loc => x + "dze";
      SF Sg Voc => x + "go";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0063: Str -> SubstForm => Str; --%
    oper mkNTable0063 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0065: Str -> SubstForm => Str; --%
    oper mkNTable0065 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0066: Str -> SubstForm => Str; --%
    oper mkNTable0066 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0070: Str -> SubstForm => Str; --%
    oper mkNTable0070 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cha";
      SF Sg Gen => x + "chy";
      SF Sg Dat => x + "sze";
      SF Sg Acc => x + "chę";
      SF Sg Instr => x + "chą";
      SF Sg Loc => x + "sze";
      SF Sg Voc => x + "cho";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0071: Str -> SubstForm => Str; --%
    oper mkNTable0071 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owowi";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0074: Str -> SubstForm => Str; --%
    oper mkNTable0074 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0076: Str -> SubstForm => Str; --%
    oper mkNTable0076 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0078: Str -> SubstForm => Str; --%
    oper mkNTable0078 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0082: Str -> SubstForm => Str; --%
    oper mkNTable0082 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0084: Str -> SubstForm => Str; --%
    oper mkNTable0084 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "tu";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "t";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0085: Str -> SubstForm => Str; --%
    oper mkNTable0085 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0086: Str -> SubstForm => Str; --%
    oper mkNTable0086 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0090: Str -> SubstForm => Str; --%
    oper mkNTable0090 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0092: Str -> SubstForm => Str; --%
    oper mkNTable0092 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "x";
      SF Sg Gen => x + "ksa";
      SF Sg Dat => x + "ksowi";
      SF Sg Acc => x + "ksa";
      SF Sg Instr => x + "ksem";
      SF Sg Loc => x + "ksie";
      SF Sg Voc => x + "ksie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0093: Str -> SubstForm => Str; --%
    oper mkNTable0093 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0101: Str -> SubstForm => Str; --%
    oper mkNTable0101 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0106: Str -> SubstForm => Str; --%
    oper mkNTable0106 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "x";
      SF Sg Gen => x + "ksu";
      SF Sg Dat => x + "ksowi";
      SF Sg Acc => x + "x";
      SF Sg Instr => x + "ksem";
      SF Sg Loc => x + "ksie";
      SF Sg Voc => x + "ksie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0108: Str -> SubstForm => Str; --%
    oper mkNTable0108 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "st";
      SF Sg Gen => x + "stu";
      SF Sg Dat => x + "stowi";
      SF Sg Acc => x + "st";
      SF Sg Instr => x + "stem";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "ście";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0109: Str -> SubstForm => Str; --%
    oper mkNTable0109 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0112: Str -> SubstForm => Str; --%
    oper mkNTable0112 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0113: Str -> SubstForm => Str; --%
    oper mkNTable0113 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ł";
      SF Sg Gen => x + "łu";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ł";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0115: Str -> SubstForm => Str; --%
    oper mkNTable0115 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0116: Str -> SubstForm => Str; --%
    oper mkNTable0116 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sta";
      SF Sg Gen => x + "sty";
      SF Sg Dat => x + "ście";
      SF Sg Acc => x + "stę";
      SF Sg Instr => x + "stą";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "sto";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0120: Str -> SubstForm => Str; --%
    oper mkNTable0120 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0122: Str -> SubstForm => Str; --%
    oper mkNTable0122 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0124: Str -> SubstForm => Str; --%
    oper mkNTable0124 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ja";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ję";
      SF Sg Instr => x + "ją";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "jo";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0125: Str -> SubstForm => Str; --%
    oper mkNTable0125 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0127: Str -> SubstForm => Str; --%
    oper mkNTable0127 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "owo";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owu";
      SF Sg Acc => x + "owo";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owo";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0128: Str -> SubstForm => Str; --%
    oper mkNTable0128 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0130: Str -> SubstForm => Str; --%
    oper mkNTable0130 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0132: Str -> SubstForm => Str; --%
    oper mkNTable0132 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ec";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0135: Str -> SubstForm => Str; --%
    oper mkNTable0135 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "si";
      SF Sg Dat => x + "si";
      SF Sg Acc => x + "ś";
      SF Sg Instr => x + "sią";
      SF Sg Loc => x + "si";
      SF Sg Voc => x + "si";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0136: Str -> SubstForm => Str; --%
    oper mkNTable0136 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zna";
      SF Sg Gen => x + "zny";
      SF Sg Dat => x + "źnie";
      SF Sg Acc => x + "znę";
      SF Sg Instr => x + "zną";
      SF Sg Loc => x + "źnie";
      SF Sg Voc => x + "zno";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0137: Str -> SubstForm => Str; --%
    oper mkNTable0137 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0138: Str -> SubstForm => Str; --%
    oper mkNTable0138 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0139: Str -> SubstForm => Str; --%
    oper mkNTable0139 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0141: Str -> SubstForm => Str; --%
    oper mkNTable0141 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0143: Str -> SubstForm => Str; --%
    oper mkNTable0143 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0148: Str -> SubstForm => Str; --%
    oper mkNTable0148 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0149: Str -> SubstForm => Str; --%
    oper mkNTable0149 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0150: Str -> SubstForm => Str; --%
    oper mkNTable0150 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niec";
      SF Sg Gen => x + "ńca";
      SF Sg Dat => x + "ńcowi";
      SF Sg Acc => x + "niec";
      SF Sg Instr => x + "ńcem";
      SF Sg Loc => x + "ńcu";
      SF Sg Voc => x + "ńcu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0156: Str -> SubstForm => Str; --%
    oper mkNTable0156 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ia";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0160: Str -> SubstForm => Str; --%
    oper mkNTable0160 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niek";
      SF Sg Gen => x + "ńka";
      SF Sg Dat => x + "ńkowi";
      SF Sg Acc => x + "ńka";
      SF Sg Instr => x + "ńkiem";
      SF Sg Loc => x + "ńku";
      SF Sg Voc => x + "ńku";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0163: Str -> SubstForm => Str; --%
    oper mkNTable0163 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ta";
      SF Sg Gen => x + "ty";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "tę";
      SF Sg Instr => x + "tą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0165: Str -> SubstForm => Str; --%
    oper mkNTable0165 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0166: Str -> SubstForm => Str; --%
    oper mkNTable0166 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0170: Str -> SubstForm => Str; --%
    oper mkNTable0170 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0172: Str -> SubstForm => Str; --%
    oper mkNTable0172 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "y";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0174: Str -> SubstForm => Str; --%
    oper mkNTable0174 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0177: Str -> SubstForm => Str; --%
    oper mkNTable0177 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "en";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "nowi";
      SF Sg Acc => x + "na";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "nie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0180: Str -> SubstForm => Str; --%
    oper mkNTable0180 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ra";
      SF Sg Gen => x + "ry";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "rę";
      SF Sg Instr => x + "rą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ro";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0183: Str -> SubstForm => Str; --%
    oper mkNTable0183 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0184: Str -> SubstForm => Str; --%
    oper mkNTable0184 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0185: Str -> SubstForm => Str; --%
    oper mkNTable0185 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0187: Str -> SubstForm => Str; --%
    oper mkNTable0187 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "ka";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ek";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0188: Str -> SubstForm => Str; --%
    oper mkNTable0188 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zna";
      SF Sg Gen => x + "zny";
      SF Sg Dat => x + "źnie";
      SF Sg Acc => x + "znę";
      SF Sg Instr => x + "zną";
      SF Sg Loc => x + "źnie";
      SF Sg Voc => x + "zno";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0194: Str -> SubstForm => Str; --%
    oper mkNTable0194 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0196: Str -> SubstForm => Str; --%
    oper mkNTable0196 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "nowi";
      SF Sg Acc => x + "na";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0202: Str -> SubstForm => Str; --%
    oper mkNTable0202 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owowi";
      SF Sg Acc => x + "owa";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0206: Str -> SubstForm => Str; --%
    oper mkNTable0206 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0207: Str -> SubstForm => Str; --%
    oper mkNTable0207 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ta";
      SF Sg Gen => x + "ty";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "tę";
      SF Sg Instr => x + "tą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0209: Str -> SubstForm => Str; --%
    oper mkNTable0209 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "ku";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ek";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0211: Str -> SubstForm => Str; --%
    oper mkNTable0211 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ha";
      SF Sg Gen => x + "hy";
      SF Sg Dat => x + "że";
      SF Sg Acc => x + "hę";
      SF Sg Instr => x + "hą";
      SF Sg Loc => x + "że";
      SF Sg Voc => x + "ho";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0212: Str -> SubstForm => Str; --%
    oper mkNTable0212 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0215: Str -> SubstForm => Str; --%
    oper mkNTable0215 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "ka";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ka";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0216: Str -> SubstForm => Str; --%
    oper mkNTable0216 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0220: Str -> SubstForm => Str; --%
    oper mkNTable0220 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0221: Str -> SubstForm => Str; --%
    oper mkNTable0221 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zno";
      SF Sg Gen => x + "zna";
      SF Sg Dat => x + "znu";
      SF Sg Acc => x + "zno";
      SF Sg Instr => x + "znem";
      SF Sg Loc => x + "źnie";
      SF Sg Voc => x + "zno";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0223: Str -> SubstForm => Str; --%
    oper mkNTable0223 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0224: Str -> SubstForm => Str; --%
    oper mkNTable0224 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0225: Str -> SubstForm => Str; --%
    oper mkNTable0225 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "iec";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0226: Str -> SubstForm => Str; --%
    oper mkNTable0226 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0227: Str -> SubstForm => Str; --%
    oper mkNTable0227 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ta";
      SF Sg Gen => x + "ty";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "tę";
      SF Sg Instr => x + "tą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0228: Str -> SubstForm => Str; --%
    oper mkNTable0228 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0229: Str -> SubstForm => Str; --%
    oper mkNTable0229 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0234: Str -> SubstForm => Str; --%
    oper mkNTable0234 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ga";
      SF Sg Gen => x + "gi";
      SF Sg Dat => x + "dze";
      SF Sg Acc => x + "gę";
      SF Sg Instr => x + "gą";
      SF Sg Loc => x + "dze";
      SF Sg Voc => x + "go";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0235: Str -> SubstForm => Str; --%
    oper mkNTable0235 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "st";
      SF Sg Gen => x + "sta";
      SF Sg Dat => x + "stowi";
      SF Sg Acc => x + "sta";
      SF Sg Instr => x + "stem";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "ście";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0236: Str -> SubstForm => Str; --%
    oper mkNTable0236 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0240: Str -> SubstForm => Str; --%
    oper mkNTable0240 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0242: Str -> SubstForm => Str; --%
    oper mkNTable0242 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0245: Str -> SubstForm => Str; --%
    oper mkNTable0245 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0249: Str -> SubstForm => Str; --%
    oper mkNTable0249 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0251: Str -> SubstForm => Str; --%
    oper mkNTable0251 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ia";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0252: Str -> SubstForm => Str; --%
    oper mkNTable0252 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0255: Str -> SubstForm => Str; --%
    oper mkNTable0255 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ga";
      SF Sg Gen => x + "gi";
      SF Sg Dat => x + "dze";
      SF Sg Acc => x + "gę";
      SF Sg Instr => x + "gą";
      SF Sg Loc => x + "dze";
      SF Sg Voc => x + "go";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0264: Str -> SubstForm => Str; --%
    oper mkNTable0264 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0267: Str -> SubstForm => Str; --%
    oper mkNTable0267 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zeł";
      SF Sg Gen => x + "zła";
      SF Sg Dat => x + "złowi";
      SF Sg Acc => x + "zła";
      SF Sg Instr => x + "złem";
      SF Sg Loc => x + "źle";
      SF Sg Voc => x + "źle";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0269: Str -> SubstForm => Str; --%
    oper mkNTable0269 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owowi";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0270: Str -> SubstForm => Str; --%
    oper mkNTable0270 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0272: Str -> SubstForm => Str; --%
    oper mkNTable0272 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "ły";
      SF Sg Dat => x + "le";
      SF Sg Acc => x + "łę";
      SF Sg Instr => x + "łą";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0273: Str -> SubstForm => Str; --%
    oper mkNTable0273 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0276: Str -> SubstForm => Str; --%
    oper mkNTable0276 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0277: Str -> SubstForm => Str; --%
    oper mkNTable0277 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "m";
      SF Sg Loc => x + "m";
      SF Sg Voc => x + "";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0279: Str -> SubstForm => Str; --%
    oper mkNTable0279 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0284: Str -> SubstForm => Str; --%
    oper mkNTable0284 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "m";
      SF Sg Loc => x + "m";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0285: Str -> SubstForm => Str; --%
    oper mkNTable0285 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ódz";
      SF Sg Gen => x + "odza";
      SF Sg Dat => x + "odzowi";
      SF Sg Acc => x + "ódz";
      SF Sg Instr => x + "odzem";
      SF Sg Loc => x + "odzu";
      SF Sg Voc => x + "odzu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0288: Str -> SubstForm => Str; --%
    oper mkNTable0288 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "owo";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owu";
      SF Sg Acc => x + "owo";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owo";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0289: Str -> SubstForm => Str; --%
    oper mkNTable0289 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owu";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0294: Str -> SubstForm => Str; --%
    oper mkNTable0294 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "em";
      SF Sg Voc => x + "e";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0296: Str -> SubstForm => Str; --%
    oper mkNTable0296 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0298: Str -> SubstForm => Str; --%
    oper mkNTable0298 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąb";
      SF Sg Gen => x + "ębia";
      SF Sg Dat => x + "ębiowi";
      SF Sg Acc => x + "ębia";
      SF Sg Instr => x + "ębiem";
      SF Sg Loc => x + "ębiu";
      SF Sg Voc => x + "ębiu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0303: Str -> SubstForm => Str; --%
    oper mkNTable0303 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0306: Str -> SubstForm => Str; --%
    oper mkNTable0306 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0307: Str -> SubstForm => Str; --%
    oper mkNTable0307 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0310: Str -> SubstForm => Str; --%
    oper mkNTable0310 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "sia";
      SF Sg Dat => x + "siowi";
      SF Sg Acc => x + "sia";
      SF Sg Instr => x + "siem";
      SF Sg Loc => x + "siu";
      SF Sg Voc => x + "siu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0314: Str -> SubstForm => Str; --%
    oper mkNTable0314 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0318: Str -> SubstForm => Str; --%
    oper mkNTable0318 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "e";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0319: Str -> SubstForm => Str; --%
    oper mkNTable0319 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0320: Str -> SubstForm => Str; --%
    oper mkNTable0320 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ga";
      SF Sg Gen => x + "gi";
      SF Sg Dat => x + "dze";
      SF Sg Acc => x + "gę";
      SF Sg Instr => x + "gą";
      SF Sg Loc => x + "dze";
      SF Sg Voc => x + "go";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0321: Str -> SubstForm => Str; --%
    oper mkNTable0321 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "er";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0322: Str -> SubstForm => Str; --%
    oper mkNTable0322 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "eć";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciowi";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "ciu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0323: Str -> SubstForm => Str; --%
    oper mkNTable0323 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0325: Str -> SubstForm => Str; --%
    oper mkNTable0325 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "in";
      SF Sg Gen => x + "ina";
      SF Sg Dat => x + "inowi";
      SF Sg Acc => x + "ina";
      SF Sg Instr => x + "inem";
      SF Sg Loc => x + "inie";
      SF Sg Voc => x + "inie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0326: Str -> SubstForm => Str; --%
    oper mkNTable0326 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "siec";
      SF Sg Gen => x + "śca";
      SF Sg Dat => x + "ścowi";
      SF Sg Acc => x + "śca";
      SF Sg Instr => x + "ścem";
      SF Sg Loc => x + "ścu";
      SF Sg Voc => x + "ścu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0327: Str -> SubstForm => Str; --%
    oper mkNTable0327 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0329: Str -> SubstForm => Str; --%
    oper mkNTable0329 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0331: Str -> SubstForm => Str; --%
    oper mkNTable0331 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0336: Str -> SubstForm => Str; --%
    oper mkNTable0336 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ta";
      SF Sg Gen => x + "ty";
      SF Sg Dat => x + "cie";
      SF Sg Acc => x + "tę";
      SF Sg Instr => x + "tą";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0340: Str -> SubstForm => Str; --%
    oper mkNTable0340 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0341: Str -> SubstForm => Str; --%
    oper mkNTable0341 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0344: Str -> SubstForm => Str; --%
    oper mkNTable0344 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0346: Str -> SubstForm => Str; --%
    oper mkNTable0346 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ca";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "cę";
      SF Sg Instr => x + "cą";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "co";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0347: Str -> SubstForm => Str; --%
    oper mkNTable0347 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0351: Str -> SubstForm => Str; --%
    oper mkNTable0351 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0354: Str -> SubstForm => Str; --%
    oper mkNTable0354 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "towi";
      SF Sg Acc => x + "t";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0355: Str -> SubstForm => Str; --%
    oper mkNTable0355 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ja";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ję";
      SF Sg Instr => x + "ją";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "jo";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0357: Str -> SubstForm => Str; --%
    oper mkNTable0357 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "e";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0358: Str -> SubstForm => Str; --%
    oper mkNTable0358 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0359: Str -> SubstForm => Str; --%
    oper mkNTable0359 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cha";
      SF Sg Gen => x + "chy";
      SF Sg Dat => x + "sze";
      SF Sg Acc => x + "chę";
      SF Sg Instr => x + "chą";
      SF Sg Loc => x + "sze";
      SF Sg Voc => x + "cho";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0361: Str -> SubstForm => Str; --%
    oper mkNTable0361 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0362: Str -> SubstForm => Str; --%
    oper mkNTable0362 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0363: Str -> SubstForm => Str; --%
    oper mkNTable0363 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0367: Str -> SubstForm => Str; --%
    oper mkNTable0367 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0368: Str -> SubstForm => Str; --%
    oper mkNTable0368 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "h";
      SF Sg Gen => x + "ha";
      SF Sg Dat => x + "howi";
      SF Sg Acc => x + "ha";
      SF Sg Instr => x + "hem";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0369: Str -> SubstForm => Str; --%
    oper mkNTable0369 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "h";
      SF Sg Gen => x + "hu";
      SF Sg Dat => x + "howi";
      SF Sg Acc => x + "h";
      SF Sg Instr => x + "hem";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0370: Str -> SubstForm => Str; --%
    oper mkNTable0370 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "siek";
      SF Sg Gen => x + "śka";
      SF Sg Dat => x + "śkowi";
      SF Sg Acc => x + "śka";
      SF Sg Instr => x + "śkiem";
      SF Sg Loc => x + "śku";
      SF Sg Voc => x + "śku";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0371: Str -> SubstForm => Str; --%
    oper mkNTable0371 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sna";
      SF Sg Gen => x + "sny";
      SF Sg Dat => x + "śnie";
      SF Sg Acc => x + "snę";
      SF Sg Instr => x + "sną";
      SF Sg Loc => x + "śnie";
      SF Sg Voc => x + "sno";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0372: Str -> SubstForm => Str; --%
    oper mkNTable0372 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0376: Str -> SubstForm => Str; --%
    oper mkNTable0376 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0380: Str -> SubstForm => Str; --%
    oper mkNTable0380 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ło";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łu";
      SF Sg Acc => x + "ło";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0384: Str -> SubstForm => Str; --%
    oper mkNTable0384 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ew";
      SF Sg Gen => x + "wi";
      SF Sg Dat => x + "wi";
      SF Sg Acc => x + "ew";
      SF Sg Instr => x + "wią";
      SF Sg Loc => x + "wi";
      SF Sg Voc => x + "wi";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0385: Str -> SubstForm => Str; --%
    oper mkNTable0385 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "y";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0389: Str -> SubstForm => Str; --%
    oper mkNTable0389 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "en";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "nowi";
      SF Sg Acc => x + "en";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "nie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0391: Str -> SubstForm => Str; --%
    oper mkNTable0391 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0392: Str -> SubstForm => Str; --%
    oper mkNTable0392 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ód";
      SF Sg Gen => x + "odu";
      SF Sg Dat => x + "odowi";
      SF Sg Acc => x + "ód";
      SF Sg Instr => x + "odem";
      SF Sg Loc => x + "odzie";
      SF Sg Voc => x + "odzie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0393: Str -> SubstForm => Str; --%
    oper mkNTable0393 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ią";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "i";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0394: Str -> SubstForm => Str; --%
    oper mkNTable0394 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0395: Str -> SubstForm => Str; --%
    oper mkNTable0395 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ja";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ję";
      SF Sg Instr => x + "ją";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "jo";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0396: Str -> SubstForm => Str; --%
    oper mkNTable0396 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sno";
      SF Sg Gen => x + "sna";
      SF Sg Dat => x + "snu";
      SF Sg Acc => x + "sno";
      SF Sg Instr => x + "snem";
      SF Sg Loc => x + "śnie";
      SF Sg Voc => x + "sno";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0397: Str -> SubstForm => Str; --%
    oper mkNTable0397 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "ka";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ka";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0401: Str -> SubstForm => Str; --%
    oper mkNTable0401 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ies";
      SF Sg Gen => x + "sa";
      SF Sg Dat => x + "sowi";
      SF Sg Acc => x + "sa";
      SF Sg Instr => x + "sem";
      SF Sg Loc => x + "sie";
      SF Sg Voc => x + "sie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0404: Str -> SubstForm => Str; --%
    oper mkNTable0404 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0405: Str -> SubstForm => Str; --%
    oper mkNTable0405 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0406: Str -> SubstForm => Str; --%
    oper mkNTable0406 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0407: Str -> SubstForm => Str; --%
    oper mkNTable0407 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0408: Str -> SubstForm => Str; --%
    oper mkNTable0408 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0409: Str -> SubstForm => Str; --%
    oper mkNTable0409 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "isa";
      SF Sg Gen => x + "isy";
      SF Sg Dat => x + "isie";
      SF Sg Acc => x + "isę";
      SF Sg Instr => x + "isą";
      SF Sg Loc => x + "isie";
      SF Sg Voc => x + "iso";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0412: Str -> SubstForm => Str; --%
    oper mkNTable0412 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "na";
      SF Sg Dat => x + "nowi";
      SF Sg Acc => x + "na";
      SF Sg Instr => x + "nem";
      SF Sg Loc => x + "nie";
      SF Sg Voc => x + "nie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0414: Str -> SubstForm => Str; --%
    oper mkNTable0414 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0415: Str -> SubstForm => Str; --%
    oper mkNTable0415 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0416: Str -> SubstForm => Str; --%
    oper mkNTable0416 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0417: Str -> SubstForm => Str; --%
    oper mkNTable0417 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0419: Str -> SubstForm => Str; --%
    oper mkNTable0419 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0422: Str -> SubstForm => Str; --%
    oper mkNTable0422 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0423: Str -> SubstForm => Str; --%
    oper mkNTable0423 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "siec";
      SF Sg Gen => x + "śca";
      SF Sg Dat => x + "ścowi";
      SF Sg Acc => x + "siec";
      SF Sg Instr => x + "ścem";
      SF Sg Loc => x + "ścu";
      SF Sg Voc => x + "ścu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0424: Str -> SubstForm => Str; --%
    oper mkNTable0424 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "si";
      SF Sg Dat => x + "si";
      SF Sg Acc => x + "ś";
      SF Sg Instr => x + "sią";
      SF Sg Loc => x + "si";
      SF Sg Voc => x + "si";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0425: Str -> SubstForm => Str; --%
    oper mkNTable0425 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "ły";
      SF Sg Dat => x + "le";
      SF Sg Acc => x + "łę";
      SF Sg Instr => x + "łą";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0426: Str -> SubstForm => Str; --%
    oper mkNTable0426 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0427: Str -> SubstForm => Str; --%
    oper mkNTable0427 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0430: Str -> SubstForm => Str; --%
    oper mkNTable0430 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0431: Str -> SubstForm => Str; --%
    oper mkNTable0431 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0434: Str -> SubstForm => Str; --%
    oper mkNTable0434 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ec";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0436: Str -> SubstForm => Str; --%
    oper mkNTable0436 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "er";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0437: Str -> SubstForm => Str; --%
    oper mkNTable0437 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "er";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "er";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0440: Str -> SubstForm => Str; --%
    oper mkNTable0440 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ór";
      SF Sg Gen => x + "oru";
      SF Sg Dat => x + "orowi";
      SF Sg Acc => x + "ór";
      SF Sg Instr => x + "orem";
      SF Sg Loc => x + "orze";
      SF Sg Voc => x + "orze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0442: Str -> SubstForm => Str; --%
    oper mkNTable0442 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0443: Str -> SubstForm => Str; --%
    oper mkNTable0443 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "ły";
      SF Sg Dat => x + "le";
      SF Sg Acc => x + "łę";
      SF Sg Instr => x + "łą";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0446: Str -> SubstForm => Str; --%
    oper mkNTable0446 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "ni";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0447: Str -> SubstForm => Str; --%
    oper mkNTable0447 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "sia";
      SF Sg Dat => x + "siowi";
      SF Sg Acc => x + "sia";
      SF Sg Instr => x + "siem";
      SF Sg Loc => x + "siu";
      SF Sg Voc => x + "siu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0449: Str -> SubstForm => Str; --%
    oper mkNTable0449 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ień";
      SF Sg Gen => x + "ienia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "ienia";
      SF Sg Instr => x + "ieniem";
      SF Sg Loc => x + "ieniu";
      SF Sg Voc => x + "ieniu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0450: Str -> SubstForm => Str; --%
    oper mkNTable0450 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0451: Str -> SubstForm => Str; --%
    oper mkNTable0451 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "i";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0452: Str -> SubstForm => Str; --%
    oper mkNTable0452 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0453: Str -> SubstForm => Str; --%
    oper mkNTable0453 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0454: Str -> SubstForm => Str; --%
    oper mkNTable0454 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0455: Str -> SubstForm => Str; --%
    oper mkNTable0455 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "ka";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ek";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0457: Str -> SubstForm => Str; --%
    oper mkNTable0457 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0462: Str -> SubstForm => Str; --%
    oper mkNTable0462 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0464: Str -> SubstForm => Str; --%
    oper mkNTable0464 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "er";
      SF Sg Gen => x + "ru";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "er";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0471: Str -> SubstForm => Str; --%
    oper mkNTable0471 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0473: Str -> SubstForm => Str; --%
    oper mkNTable0473 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0474: Str -> SubstForm => Str; --%
    oper mkNTable0474 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "ze";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0478: Str -> SubstForm => Str; --%
    oper mkNTable0478 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sła";
      SF Sg Gen => x + "sły";
      SF Sg Dat => x + "śle";
      SF Sg Acc => x + "słę";
      SF Sg Instr => x + "słą";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "sło";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0479: Str -> SubstForm => Str; --%
    oper mkNTable0479 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0480: Str -> SubstForm => Str; --%
    oper mkNTable0480 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ia";
      SF Sg Dat => x + "iowi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "iu";
      SF Sg Voc => x + "iu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0481: Str -> SubstForm => Str; --%
    oper mkNTable0481 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "sień";
      SF Sg Gen => x + "śnia";
      SF Sg Dat => x + "śniowi";
      SF Sg Acc => x + "śnia";
      SF Sg Instr => x + "śniem";
      SF Sg Loc => x + "śniu";
      SF Sg Voc => x + "śniu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0483: Str -> SubstForm => Str; --%
    oper mkNTable0483 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0484: Str -> SubstForm => Str; --%
    oper mkNTable0484 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "la";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0487: Str -> SubstForm => Str; --%
    oper mkNTable0487 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0489: Str -> SubstForm => Str; --%
    oper mkNTable0489 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0491: Str -> SubstForm => Str; --%
    oper mkNTable0491 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "e";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0515: Str -> SubstForm => Str; --%
    oper mkNTable0515 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0522: Str -> SubstForm => Str; --%
    oper mkNTable0522 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "u";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0528: Str -> SubstForm => Str; --%
    oper mkNTable0528 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0529: Str -> SubstForm => Str; --%
    oper mkNTable0529 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "m";
      SF Sg Loc => x + "m";
      SF Sg Voc => x + "";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0535: Str -> SubstForm => Str; --%
    oper mkNTable0535 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "st";
      SF Sg Gen => x + "sta";
      SF Sg Dat => x + "stowi";
      SF Sg Acc => x + "sta";
      SF Sg Instr => x + "stem";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "ście";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0540: Str -> SubstForm => Str; --%
    oper mkNTable0540 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0551: Str -> SubstForm => Str; --%
    oper mkNTable0551 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0556: Str -> SubstForm => Str; --%
    oper mkNTable0556 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0560: Str -> SubstForm => Str; --%
    oper mkNTable0560 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0569: Str -> SubstForm => Str; --%
    oper mkNTable0569 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "ły";
      SF Sg Dat => x + "le";
      SF Sg Acc => x + "łę";
      SF Sg Instr => x + "łą";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0586: Str -> SubstForm => Str; --%
    oper mkNTable0586 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0595: Str -> SubstForm => Str; --%
    oper mkNTable0595 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0596: Str -> SubstForm => Str; --%
    oper mkNTable0596 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "to";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "tu";
      SF Sg Acc => x + "to";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "to";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0598: Str -> SubstForm => Str; --%
    oper mkNTable0598 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ób";
      SF Sg Gen => x + "oba";
      SF Sg Dat => x + "obowi";
      SF Sg Acc => x + "oba";
      SF Sg Instr => x + "obem";
      SF Sg Loc => x + "obie";
      SF Sg Voc => x + "obie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0613: Str -> SubstForm => Str; --%
    oper mkNTable0613 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cha";
      SF Sg Gen => x + "chy";
      SF Sg Dat => x + "sze";
      SF Sg Acc => x + "chę";
      SF Sg Instr => x + "chą";
      SF Sg Loc => x + "sze";
      SF Sg Voc => x + "cho";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0616: Str -> SubstForm => Str; --%
    oper mkNTable0616 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "ym";
      SF Sg Loc => x + "ym";
      SF Sg Voc => x + "y";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0617: Str -> SubstForm => Str; --%
    oper mkNTable0617 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ś";
      SF Sg Gen => x + "sia";
      SF Sg Dat => x + "siowi";
      SF Sg Acc => x + "sia";
      SF Sg Instr => x + "siem";
      SF Sg Loc => x + "siu";
      SF Sg Voc => x + "siu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0623: Str -> SubstForm => Str; --%
    oper mkNTable0623 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ł";
      SF Sg Gen => x + "ła";
      SF Sg Dat => x + "łowi";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łem";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "le";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0627: Str -> SubstForm => Str; --%
    oper mkNTable0627 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "owi";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0637: Str -> SubstForm => Str; --%
    oper mkNTable0637 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0639: Str -> SubstForm => Str; --%
    oper mkNTable0639 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "ziec";
      SF Sg Gen => x + "źca";
      SF Sg Dat => x + "źcowi";
      SF Sg Acc => x + "źca";
      SF Sg Instr => x + "źcem";
      SF Sg Loc => x + "źcu";
      SF Sg Voc => x + "źcze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0641: Str -> SubstForm => Str; --%
    oper mkNTable0641 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0643: Str -> SubstForm => Str; --%
    oper mkNTable0643 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0647: Str -> SubstForm => Str; --%
    oper mkNTable0647 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ga";
      SF Sg Gen => x + "gi";
      SF Sg Dat => x + "dze";
      SF Sg Acc => x + "gę";
      SF Sg Instr => x + "gą";
      SF Sg Loc => x + "dze";
      SF Sg Voc => x + "go";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0656: Str -> SubstForm => Str; --%
    oper mkNTable0656 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0670: Str -> SubstForm => Str; --%
    oper mkNTable0670 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0672: Str -> SubstForm => Str; --%
    oper mkNTable0672 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0673: Str -> SubstForm => Str; --%
    oper mkNTable0673 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "ą";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "a";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0686: Str -> SubstForm => Str; --%
    oper mkNTable0686 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0687: Str -> SubstForm => Str; --%
    oper mkNTable0687 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0705: Str -> SubstForm => Str; --%
    oper mkNTable0705 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ąb";
      SF Sg Gen => x + "ęba";
      SF Sg Dat => x + "ębowi";
      SF Sg Acc => x + "ęba";
      SF Sg Instr => x + "ębem";
      SF Sg Loc => x + "ębie";
      SF Sg Voc => x + "ębie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0708: Str -> SubstForm => Str; --%
    oper mkNTable0708 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0709: Str -> SubstForm => Str; --%
    oper mkNTable0709 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0726: Str -> SubstForm => Str; --%
    oper mkNTable0726 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "e";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0735: Str -> SubstForm => Str; --%
    oper mkNTable0735 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0737: Str -> SubstForm => Str; --%
    oper mkNTable0737 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0739: Str -> SubstForm => Str; --%
    oper mkNTable0739 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "ziec";
      SF Sg Gen => x + "źca";
      SF Sg Dat => x + "źcowi";
      SF Sg Acc => x + "ziec";
      SF Sg Instr => x + "źcem";
      SF Sg Loc => x + "źcu";
      SF Sg Voc => x + "źcu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0744: Str -> SubstForm => Str; --%
    oper mkNTable0744 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0746: Str -> SubstForm => Str; --%
    oper mkNTable0746 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0758: Str -> SubstForm => Str; --%
    oper mkNTable0758 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "m";
      SF Sg Loc => x + "m";
      SF Sg Voc => x + "";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0759: Str -> SubstForm => Str; --%
    oper mkNTable0759 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "y";
      SF Sg Instr => x + "ym";
      SF Sg Loc => x + "ym";
      SF Sg Voc => x + "y";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0761: Str -> SubstForm => Str; --%
    oper mkNTable0761 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0765: Str -> SubstForm => Str; --%
    oper mkNTable0765 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0766: Str -> SubstForm => Str; --%
    oper mkNTable0766 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0772: Str -> SubstForm => Str; --%
    oper mkNTable0772 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "en";
      SF Sg Gen => x + "nego";
      SF Sg Dat => x + "nemu";
      SF Sg Acc => x + "nego";
      SF Sg Instr => x + "nym";
      SF Sg Loc => x + "nym";
      SF Sg Voc => x + "en";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0774: Str -> SubstForm => Str; --%
    oper mkNTable0774 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ier";
      SF Sg Gen => x + "ra";
      SF Sg Dat => x + "rowi";
      SF Sg Acc => x + "ra";
      SF Sg Instr => x + "rem";
      SF Sg Loc => x + "rze";
      SF Sg Voc => x + "rze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0786: Str -> SubstForm => Str; --%
    oper mkNTable0786 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iep";
      SF Sg Gen => x + "pa";
      SF Sg Dat => x + "powi";
      SF Sg Acc => x + "pa";
      SF Sg Instr => x + "pem";
      SF Sg Loc => x + "pie";
      SF Sg Voc => x + "pie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0788: Str -> SubstForm => Str; --%
    oper mkNTable0788 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0810: Str -> SubstForm => Str; --%
    oper mkNTable0810 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "i";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "i";
      SF Sg Voc => x + "i";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0820: Str -> SubstForm => Str; --%
    oper mkNTable0820 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0837: Str -> SubstForm => Str; --%
    oper mkNTable0837 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cie";
      SF Sg Gen => x + "cia";
      SF Sg Dat => x + "ciu";
      SF Sg Acc => x + "cie";
      SF Sg Instr => x + "ciem";
      SF Sg Loc => x + "ciu";
      SF Sg Voc => x + "cie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0845: Str -> SubstForm => Str; --%
    oper mkNTable0845 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0846: Str -> SubstForm => Str; --%
    oper mkNTable0846 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cha";
      SF Sg Gen => x + "chy";
      SF Sg Dat => x + "sze";
      SF Sg Acc => x + "chę";
      SF Sg Instr => x + "chą";
      SF Sg Loc => x + "sze";
      SF Sg Voc => x + "cho";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0850: Str -> SubstForm => Str; --%
    oper mkNTable0850 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0852: Str -> SubstForm => Str; --%
    oper mkNTable0852 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ego";
      SF Sg Dat => x + "emu";
      SF Sg Acc => x + "ego";
      SF Sg Instr => x + "ym";
      SF Sg Loc => x + "ym";
      SF Sg Voc => x + "y";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0856: Str -> SubstForm => Str; --%
    oper mkNTable0856 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0862: Str -> SubstForm => Str; --%
    oper mkNTable0862 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0864: Str -> SubstForm => Str; --%
    oper mkNTable0864 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "ci";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0865: Str -> SubstForm => Str; --%
    oper mkNTable0865 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "y";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0866: Str -> SubstForm => Str; --%
    oper mkNTable0866 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ód";
      SF Sg Gen => x + "oda";
      SF Sg Dat => x + "odowi";
      SF Sg Acc => x + "oda";
      SF Sg Instr => x + "odem";
      SF Sg Loc => x + "odzie";
      SF Sg Voc => x + "odzie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0867: Str -> SubstForm => Str; --%
    oper mkNTable0867 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0880: Str -> SubstForm => Str; --%
    oper mkNTable0880 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "iem";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0883: Str -> SubstForm => Str; --%
    oper mkNTable0883 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0884: Str -> SubstForm => Str; --%
    oper mkNTable0884 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0885: Str -> SubstForm => Str; --%
    oper mkNTable0885 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "um";
      SF Sg Gen => x + "um";
      SF Sg Dat => x + "um";
      SF Sg Acc => x + "um";
      SF Sg Instr => x + "um";
      SF Sg Loc => x + "um";
      SF Sg Voc => x + "um";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0892: Str -> SubstForm => Str; --%
    oper mkNTable0892 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "zie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0893: Str -> SubstForm => Str; --%
    oper mkNTable0893 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0901: Str -> SubstForm => Str; --%
    oper mkNTable0901 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0908: Str -> SubstForm => Str; --%
    oper mkNTable0908 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "sioł";
      SF Sg Gen => x + "sła";
      SF Sg Dat => x + "słowi";
      SF Sg Acc => x + "sła";
      SF Sg Instr => x + "słem";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "śle";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0914: Str -> SubstForm => Str; --%
    oper mkNTable0914 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ek";
      SF Sg Gen => x + "ku";
      SF Sg Dat => x + "kowi";
      SF Sg Acc => x + "ek";
      SF Sg Instr => x + "kiem";
      SF Sg Loc => x + "ku";
      SF Sg Voc => x + "ku";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0917: Str -> SubstForm => Str; --%
    oper mkNTable0917 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0920: Str -> SubstForm => Str; --%
    oper mkNTable0920 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0924: Str -> SubstForm => Str; --%
    oper mkNTable0924 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "zie";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "zie";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0928: Str -> SubstForm => Str; --%
    oper mkNTable0928 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ź";
      SF Sg Gen => x + "zia";
      SF Sg Dat => x + "ziowi";
      SF Sg Acc => x + "zia";
      SF Sg Instr => x + "ziem";
      SF Sg Loc => x + "ziu";
      SF Sg Voc => x + "ziu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0930: Str -> SubstForm => Str; --%
    oper mkNTable0930 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0933: Str -> SubstForm => Str; --%
    oper mkNTable0933 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ies";
      SF Sg Gen => x + "sa";
      SF Sg Dat => x + "su";
      SF Sg Acc => x + "sa";
      SF Sg Instr => x + "sem";
      SF Sg Loc => x + "sie";
      SF Sg Voc => x + "sie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0937: Str -> SubstForm => Str; --%
    oper mkNTable0937 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "niec";
      SF Sg Gen => x + "ńca";
      SF Sg Dat => x + "ńcowi";
      SF Sg Acc => x + "ńca";
      SF Sg Instr => x + "ńcem";
      SF Sg Loc => x + "ńcu";
      SF Sg Voc => x + "ńcu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0941: Str -> SubstForm => Str; --%
    oper mkNTable0941 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ór";
      SF Sg Gen => x + "ora";
      SF Sg Dat => x + "orowi";
      SF Sg Acc => x + "ora";
      SF Sg Instr => x + "orem";
      SF Sg Loc => x + "orze";
      SF Sg Voc => x + "orze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0949: Str -> SubstForm => Str; --%
    oper mkNTable0949 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "zień";
      SF Sg Gen => x + "nia";
      SF Sg Dat => x + "niowi";
      SF Sg Acc => x + "zień";
      SF Sg Instr => x + "niem";
      SF Sg Loc => x + "niu";
      SF Sg Voc => x + "niu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0952: Str -> SubstForm => Str; --%
    oper mkNTable0952 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "t";
      SF Sg Gen => x + "ta";
      SF Sg Dat => x + "tu";
      SF Sg Acc => x + "ta";
      SF Sg Instr => x + "tem";
      SF Sg Loc => x + "cie";
      SF Sg Voc => x + "cie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0954: Str -> SubstForm => Str; --%
    oper mkNTable0954 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ów";
      SF Sg Gen => x + "owa";
      SF Sg Dat => x + "owowi";
      SF Sg Acc => x + "owa";
      SF Sg Instr => x + "owem";
      SF Sg Loc => x + "owie";
      SF Sg Voc => x + "owie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0969: Str -> SubstForm => Str; --%
    oper mkNTable0969 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0973: Str -> SubstForm => Str; --%
    oper mkNTable0973 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ło";
      SF Sg Gen => x + "ły";
      SF Sg Dat => x + "le";
      SF Sg Acc => x + "łę";
      SF Sg Instr => x + "łą";
      SF Sg Loc => x + "le";
      SF Sg Voc => x + "ło";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0975: Str -> SubstForm => Str; --%
    oper mkNTable0975 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cie";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "cie";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "cie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0979: Str -> SubstForm => Str; --%
    oper mkNTable0979 lexem = 
      let x = lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "ę";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "u";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0982: Str -> SubstForm => Str; --%
    oper mkNTable0982 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "óz";
      SF Sg Gen => x + "oza";
      SF Sg Dat => x + "ozowi";
      SF Sg Acc => x + "oza";
      SF Sg Instr => x + "ozem";
      SF Sg Loc => x + "ozie";
      SF Sg Voc => x + "ozie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0987: Str -> SubstForm => Str; --%
    oper mkNTable0987 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ki";
      SF Sg Dat => x + "ce";
      SF Sg Acc => x + "kę";
      SF Sg Instr => x + "ką";
      SF Sg Loc => x + "ce";
      SF Sg Voc => x + "ko";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0994: Str -> SubstForm => Str; --%
    oper mkNTable0994 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "el";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "el";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1000: Str -> SubstForm => Str; --%
    oper mkNTable1000 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ń";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "ń";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "ni";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1002: Str -> SubstForm => Str; --%
    oper mkNTable1002 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sło";
      SF Sg Gen => x + "sła";
      SF Sg Dat => x + "słu";
      SF Sg Acc => x + "sło";
      SF Sg Instr => x + "słem";
      SF Sg Loc => x + "śle";
      SF Sg Voc => x + "sło";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1015: Str -> SubstForm => Str; --%
    oper mkNTable1015 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "sta";
      SF Sg Gen => x + "sty";
      SF Sg Dat => x + "ście";
      SF Sg Acc => x + "stę";
      SF Sg Instr => x + "stą";
      SF Sg Loc => x + "ście";
      SF Sg Voc => x + "sto";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1017: Str -> SubstForm => Str; --%
    oper mkNTable1017 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1018: Str -> SubstForm => Str; --%
    oper mkNTable1018 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1021: Str -> SubstForm => Str; --%
    oper mkNTable1021 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "nia";
      SF Sg Gen => x + "ni";
      SF Sg Dat => x + "ni";
      SF Sg Acc => x + "nię";
      SF Sg Instr => x + "nią";
      SF Sg Loc => x + "ni";
      SF Sg Voc => x + "nio";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1026: Str -> SubstForm => Str; --%
    oper mkNTable1026 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "y";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ą";
      SF Sg Loc => x + "y";
      SF Sg Voc => x + "y";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1033: Str -> SubstForm => Str; --%
    oper mkNTable1033 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ć";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ci";
      SF Sg Acc => x + "ć";
      SF Sg Instr => x + "cią";
      SF Sg Loc => x + "ci";
      SF Sg Voc => x + "ci";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1036: Str -> SubstForm => Str; --%
    oper mkNTable1036 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "[sg,loc]";
      SF Sg Voc => x + "[sg,voc]";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1037: Str -> SubstForm => Str; --%
    oper mkNTable1037 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "[sg,gen]";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "o";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "o";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1041: Str -> SubstForm => Str; --%
    oper mkNTable1041 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "[sg,acc]";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "ie";
      SF Sg Voc => x + "ie";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1042: Str -> SubstForm => Str; --%
    oper mkNTable1042 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ź";
      SF Sg Gen => x + "zi";
      SF Sg Dat => x + "zi";
      SF Sg Acc => x + "ź";
      SF Sg Instr => x + "zią";
      SF Sg Loc => x + "zi";
      SF Sg Voc => x + "zi";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1043: Str -> SubstForm => Str; --%
    oper mkNTable1043 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "ź";
      SF Sg Gen => x + "zi";
      SF Sg Dat => x + "zi";
      SF Sg Acc => x + "ź";
      SF Sg Instr => x + "zią";
      SF Sg Loc => x + "zi";
      SF Sg Voc => x + "zi";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1044: Str -> SubstForm => Str; --%
    oper mkNTable1044 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "órz";
      SF Sg Gen => x + "orza";
      SF Sg Dat => x + "orzowi";
      SF Sg Acc => x + "órz";
      SF Sg Instr => x + "orzem";
      SF Sg Loc => x + "orzu";
      SF Sg Voc => x + "orzu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1049: Str -> SubstForm => Str; --%
    oper mkNTable1049 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iel";
      SF Sg Gen => x + "la";
      SF Sg Dat => x + "lowi";
      SF Sg Acc => x + "iel";
      SF Sg Instr => x + "lem";
      SF Sg Loc => x + "lu";
      SF Sg Voc => x + "lu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1050: Str -> SubstForm => Str; --%
    oper mkNTable1050 lexem = 
      let x = Predef.tk 8 lexem in
    table { 
      SF Sg Nom => x + "[sg,nom]";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "[sg,dat]";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "[sg,inst]";
      SF Sg Loc => x + "ze";
      SF Sg Voc => x + "ze";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable1056: Str -> SubstForm => Str; --%
    oper mkNTable1056 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "iec";
      SF Sg Gen => x + "ca";
      SF Sg Dat => x + "cowi";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cem";
      SF Sg Loc => x + "cu";
      SF Sg Voc => x + "cu";
      SF Pl Nom => [];
      SF Pl Gen => [];
      SF Pl Dat => [];
      SF Pl Acc => [];
      SF Pl Instr => [];
      SF Pl Loc => [];
      SF Pl Voc => []
    };

    oper mkNTable0050: Str -> SubstForm => Str; --%
    oper mkNTable0050 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ów";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "y";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0058: Str -> SubstForm => Str; --%
    oper mkNTable0058 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "y";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "y";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0081: Str -> SubstForm => Str; --%
    oper mkNTable0081 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0087: Str -> SubstForm => Str; --%
    oper mkNTable0087 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ci";
      SF Sg Gen => x + "tów";
      SF Sg Dat => x + "tom";
      SF Sg Acc => x + "tów";
      SF Sg Instr => x + "tami";
      SF Sg Loc => x + "tach";
      SF Sg Voc => x + "ci";
      SF Pl Nom => x + "ci";
      SF Pl Gen => x + "tów";
      SF Pl Dat => x + "tom";
      SF Pl Acc => x + "tów";
      SF Pl Instr => x + "tami";
      SF Pl Loc => x + "tach";
      SF Pl Voc => x + "ci"
    };

    oper mkNTable0105: Str -> SubstForm => Str; --%
    oper mkNTable0105 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "";
      SF Sg Loc => x + "";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "";
      SF Pl Loc => x + "";
      SF Pl Voc => x + ""
    };

    oper mkNTable0107: Str -> SubstForm => Str; --%
    oper mkNTable0107 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0134: Str -> SubstForm => Str; --%
    oper mkNTable0134 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "i";
      SF Sg Gen => x + "ów";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "i";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "i";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0146: Str -> SubstForm => Str; --%
    oper mkNTable0146 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ęta";
      SF Sg Gen => x + "ąt";
      SF Sg Dat => x + "ętom";
      SF Sg Acc => x + "ęta";
      SF Sg Instr => x + "ętami";
      SF Sg Loc => x + "ętach";
      SF Sg Voc => x + "ęta";
      SF Pl Nom => x + "ęta";
      SF Pl Gen => x + "ąt";
      SF Pl Dat => x + "ętom";
      SF Pl Acc => x + "ęta";
      SF Pl Instr => x + "ętami";
      SF Pl Loc => x + "ętach";
      SF Pl Voc => x + "ęta"
    };

    oper mkNTable0147: Str -> SubstForm => Str; --%
    oper mkNTable0147 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "i";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "i";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "i";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "i";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0164: Str -> SubstForm => Str; --%
    oper mkNTable0164 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ćki";
      SF Sg Gen => x + "ciek";
      SF Sg Dat => x + "ćkom";
      SF Sg Acc => x + "ćki";
      SF Sg Instr => x + "ćkami";
      SF Sg Loc => x + "ćkach";
      SF Sg Voc => x + "ćki";
      SF Pl Nom => x + "ćki";
      SF Pl Gen => x + "ciek";
      SF Pl Dat => x + "ćkom";
      SF Pl Acc => x + "ćki";
      SF Pl Instr => x + "ćkami";
      SF Pl Loc => x + "ćkach";
      SF Pl Voc => x + "ćki"
    };

    oper mkNTable0186: Str -> SubstForm => Str; --%
    oper mkNTable0186 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "owy";
      SF Sg Gen => x + "ów";
      SF Sg Dat => x + "owom";
      SF Sg Acc => x + "owy";
      SF Sg Instr => x + "owami";
      SF Sg Loc => x + "owach";
      SF Sg Voc => x + "owy";
      SF Pl Nom => x + "owy";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "owom";
      SF Pl Acc => x + "owy";
      SF Pl Instr => x + "owami";
      SF Pl Loc => x + "owach";
      SF Pl Voc => x + "owy"
    };

    oper mkNTable0189: Str -> SubstForm => Str; --%
    oper mkNTable0189 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "a";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0195: Str -> SubstForm => Str; --%
    oper mkNTable0195 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ody";
      SF Sg Gen => x + "ód";
      SF Sg Dat => x + "odom";
      SF Sg Acc => x + "ody";
      SF Sg Instr => x + "odami";
      SF Sg Loc => x + "odach";
      SF Sg Voc => x + "ody";
      SF Pl Nom => x + "ody";
      SF Pl Gen => x + "ód";
      SF Pl Dat => x + "odom";
      SF Pl Acc => x + "ody";
      SF Pl Instr => x + "odami";
      SF Pl Loc => x + "odach";
      SF Pl Voc => x + "ody"
    };

    oper mkNTable0208: Str -> SubstForm => Str; --%
    oper mkNTable0208 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "owie";
      SF Sg Gen => x + "ów";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "owie";
      SF Pl Nom => x + "owie";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "owie"
    };

    oper mkNTable0214: Str -> SubstForm => Str; --%
    oper mkNTable0214 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "ów";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0256: Str -> SubstForm => Str; --%
    oper mkNTable0256 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ie";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "ie";
      SF Pl Nom => x + "ie";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "ie"
    };

    oper mkNTable0261: Str -> SubstForm => Str; --%
    oper mkNTable0261 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ki";
      SF Sg Gen => x + "ek";
      SF Sg Dat => x + "kom";
      SF Sg Acc => x + "ki";
      SF Sg Instr => x + "kami";
      SF Sg Loc => x + "kach";
      SF Sg Voc => x + "ki";
      SF Pl Nom => x + "ki";
      SF Pl Gen => x + "ek";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ki";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "ki"
    };

    oper mkNTable0287: Str -> SubstForm => Str; --%
    oper mkNTable0287 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "a";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0295: Str -> SubstForm => Str; --%
    oper mkNTable0295 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "o";
      SF Sg Gen => x + "a";
      SF Sg Dat => x + "u";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "em";
      SF Sg Loc => x + "u";
      SF Sg Voc => x + "o";
      SF Pl Nom => x + "o";
      SF Pl Gen => x + "a";
      SF Pl Dat => x + "u";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "em";
      SF Pl Loc => x + "u";
      SF Pl Voc => x + "o"
    };

    oper mkNTable0311: Str -> SubstForm => Str; --%
    oper mkNTable0311 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0345: Str -> SubstForm => Str; --%
    oper mkNTable0345 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ce";
      SF Sg Gen => x + "iec";
      SF Sg Dat => x + "com";
      SF Sg Acc => x + "ce";
      SF Sg Instr => x + "cami";
      SF Sg Loc => x + "cach";
      SF Sg Voc => x + "ce";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "iec";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0377: Str -> SubstForm => Str; --%
    oper mkNTable0377 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ńki";
      SF Sg Gen => x + "niek";
      SF Sg Dat => x + "ńkom";
      SF Sg Acc => x + "ńki";
      SF Sg Instr => x + "ńkami";
      SF Sg Loc => x + "ńkach";
      SF Sg Voc => x + "ńki";
      SF Pl Nom => x + "ńki";
      SF Pl Gen => x + "niek";
      SF Pl Dat => x + "ńkom";
      SF Pl Acc => x + "ńki";
      SF Pl Instr => x + "ńkami";
      SF Pl Loc => x + "ńkach";
      SF Pl Voc => x + "ńki"
    };

    oper mkNTable0381: Str -> SubstForm => Str; --%
    oper mkNTable0381 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "wy";
      SF Sg Gen => x + "ew";
      SF Sg Dat => x + "wom";
      SF Sg Acc => x + "wy";
      SF Sg Instr => x + "wami";
      SF Sg Loc => x + "wach";
      SF Sg Voc => x + "wy";
      SF Pl Nom => x + "wy";
      SF Pl Gen => x + "ew";
      SF Pl Dat => x + "wom";
      SF Pl Acc => x + "wy";
      SF Pl Instr => x + "wami";
      SF Pl Loc => x + "wach";
      SF Pl Voc => x + "wy"
    };

    oper mkNTable0387: Str -> SubstForm => Str; --%
    oper mkNTable0387 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "cy";
      SF Sg Gen => x + "iec";
      SF Sg Dat => x + "com";
      SF Sg Acc => x + "cy";
      SF Sg Instr => x + "cami";
      SF Sg Loc => x + "czech";
      SF Sg Voc => x + "cy";
      SF Pl Nom => x + "cy";
      SF Pl Gen => x + "iec";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "cy";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "czech";
      SF Pl Voc => x + "cy"
    };

    oper mkNTable0433: Str -> SubstForm => Str; --%
    oper mkNTable0433 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ce";
      SF Sg Gen => x + "ec";
      SF Sg Dat => x + "com";
      SF Sg Acc => x + "ce";
      SF Sg Instr => x + "cami";
      SF Sg Loc => x + "cach";
      SF Sg Voc => x + "ce";
      SF Pl Nom => x + "ce";
      SF Pl Gen => x + "ec";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ce";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ce"
    };

    oper mkNTable0445: Str -> SubstForm => Str; --%
    oper mkNTable0445 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ny";
      SF Sg Gen => x + "ien";
      SF Sg Dat => x + "nom";
      SF Sg Acc => x + "ny";
      SF Sg Instr => x + "nami";
      SF Sg Loc => x + "nach";
      SF Sg Voc => x + "ny";
      SF Pl Nom => x + "ny";
      SF Pl Gen => x + "ien";
      SF Pl Dat => x + "nom";
      SF Pl Acc => x + "ny";
      SF Pl Instr => x + "nami";
      SF Pl Loc => x + "nach";
      SF Pl Voc => x + "ny"
    };

    oper mkNTable0482: Str -> SubstForm => Str; --%
    oper mkNTable0482 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "chy";
      SF Sg Gen => x + "szech";
      SF Sg Dat => x + "chom";
      SF Sg Acc => x + "chy";
      SF Sg Instr => x + "chami";
      SF Sg Loc => x + "szech";
      SF Sg Voc => x + "chy";
      SF Pl Nom => x + "chy";
      SF Pl Gen => x + "szech";
      SF Pl Dat => x + "chom";
      SF Pl Acc => x + "chy";
      SF Pl Instr => x + "chami";
      SF Pl Loc => x + "szech";
      SF Pl Voc => x + "chy"
    };

    oper mkNTable0501: Str -> SubstForm => Str; --%
    oper mkNTable0501 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "ów";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "a";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0507: Str -> SubstForm => Str; --%
    oper mkNTable0507 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "nie";
      SF Sg Gen => x + "ń";
      SF Sg Dat => x + "niom";
      SF Sg Acc => x + "nie";
      SF Sg Instr => x + "ńmi";
      SF Sg Loc => x + "niach";
      SF Sg Voc => x + "nie";
      SF Pl Nom => x + "nie";
      SF Pl Gen => x + "ń";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nie";
      SF Pl Instr => x + "ńmi";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nie"
    };

    oper mkNTable0508: Str -> SubstForm => Str; --%
    oper mkNTable0508 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "ych";
      SF Sg Dat => x + "ym";
      SF Sg Acc => x + "e";
      SF Sg Instr => x + "ymi";
      SF Sg Loc => x + "ych";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "e";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0516: Str -> SubstForm => Str; --%
    oper mkNTable0516 lexem = 
      let x = Predef.tk 0 lexem in
    table { 
      SF Sg Nom => x + "";
      SF Sg Gen => x + "";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "";
      SF Pl Nom => x + "";
      SF Pl Gen => x + "";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + ""
    };

    oper mkNTable0576: Str -> SubstForm => Str; --%
    oper mkNTable0576 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "a";
      SF Sg Gen => x + "y";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "a";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "a";
      SF Pl Nom => x + "a";
      SF Pl Gen => x + "y";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "a";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "a"
    };

    oper mkNTable0669: Str -> SubstForm => Str; --%
    oper mkNTable0669 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ka";
      SF Sg Gen => x + "ek";
      SF Sg Dat => x + "kom";
      SF Sg Acc => x + "ka";
      SF Sg Instr => x + "kami";
      SF Sg Loc => x + "kach";
      SF Sg Voc => x + "ka";
      SF Pl Nom => x + "ka";
      SF Pl Gen => x + "ek";
      SF Pl Dat => x + "kom";
      SF Pl Acc => x + "ka";
      SF Pl Instr => x + "kami";
      SF Pl Loc => x + "kach";
      SF Pl Voc => x + "ka"
    };

    oper mkNTable0680: Str -> SubstForm => Str; --%
    oper mkNTable0680 lexem = 
      let x = Predef.tk 4 lexem in
    table { 
      SF Sg Nom => x + "obra";
      SF Sg Gen => x + "óbr";
      SF Sg Dat => x + "obrom";
      SF Sg Acc => x + "obra";
      SF Sg Instr => x + "obrami";
      SF Sg Loc => x + "obrach";
      SF Sg Voc => x + "obra";
      SF Pl Nom => x + "obra";
      SF Pl Gen => x + "óbr";
      SF Pl Dat => x + "obrom";
      SF Pl Acc => x + "obra";
      SF Pl Instr => x + "obrami";
      SF Pl Loc => x + "obrach";
      SF Pl Voc => x + "obra"
    };

    oper mkNTable0688: Str -> SubstForm => Str; --%
    oper mkNTable0688 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "nia";
      SF Sg Gen => x + "ń";
      SF Sg Dat => x + "niom";
      SF Sg Acc => x + "nia";
      SF Sg Instr => x + "niami";
      SF Sg Loc => x + "niach";
      SF Sg Voc => x + "nia";
      SF Pl Nom => x + "nia";
      SF Pl Gen => x + "ń";
      SF Pl Dat => x + "niom";
      SF Pl Acc => x + "nia";
      SF Pl Instr => x + "niami";
      SF Pl Loc => x + "niach";
      SF Pl Voc => x + "nia"
    };

    oper mkNTable0690: Str -> SubstForm => Str; --%
    oper mkNTable0690 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ogi";
      SF Sg Gen => x + "óg";
      SF Sg Dat => x + "ogom";
      SF Sg Acc => x + "ogi";
      SF Sg Instr => x + "ogami";
      SF Sg Loc => x + "ogach";
      SF Sg Voc => x + "ogi";
      SF Pl Nom => x + "ogi";
      SF Pl Gen => x + "óg";
      SF Pl Dat => x + "ogom";
      SF Pl Acc => x + "ogi";
      SF Pl Instr => x + "ogami";
      SF Pl Loc => x + "ogach";
      SF Pl Voc => x + "ogi"
    };

    oper mkNTable0693: Str -> SubstForm => Str; --%
    oper mkNTable0693 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "wa";
      SF Sg Gen => x + "ew";
      SF Sg Dat => x + "wom";
      SF Sg Acc => x + "wa";
      SF Sg Instr => x + "wami";
      SF Sg Loc => x + "wach";
      SF Sg Voc => x + "wa";
      SF Pl Nom => x + "wa";
      SF Pl Gen => x + "ew";
      SF Pl Dat => x + "wom";
      SF Pl Acc => x + "wa";
      SF Pl Instr => x + "wami";
      SF Pl Loc => x + "wach";
      SF Pl Voc => x + "wa"
    };

    oper mkNTable0747: Str -> SubstForm => Str; --%
    oper mkNTable0747 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "eł";
      SF Sg Dat => x + "łom";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łami";
      SF Sg Loc => x + "łach";
      SF Sg Voc => x + "ła";
      SF Pl Nom => x + "ła";
      SF Pl Gen => x + "eł";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ła";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ła"
    };

    oper mkNTable0764: Str -> SubstForm => Str; --%
    oper mkNTable0764 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "e";
      SF Sg Gen => x + "ów";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "e";
      SF Pl Nom => x + "e";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "e"
    };

    oper mkNTable0767: Str -> SubstForm => Str; --%
    oper mkNTable0767 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ca";
      SF Sg Gen => x + "ec";
      SF Sg Dat => x + "com";
      SF Sg Acc => x + "ca";
      SF Sg Instr => x + "cami";
      SF Sg Loc => x + "cach";
      SF Sg Voc => x + "ca";
      SF Pl Nom => x + "ca";
      SF Pl Gen => x + "ec";
      SF Pl Dat => x + "com";
      SF Pl Acc => x + "ca";
      SF Pl Instr => x + "cami";
      SF Pl Loc => x + "cach";
      SF Pl Voc => x + "ca"
    };

    oper mkNTable0800: Str -> SubstForm => Str; --%
    oper mkNTable0800 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "je";
      SF Sg Gen => x + "i";
      SF Sg Dat => x + "jom";
      SF Sg Acc => x + "je";
      SF Sg Instr => x + "jami";
      SF Sg Loc => x + "jach";
      SF Sg Voc => x + "je";
      SF Pl Nom => x + "je";
      SF Pl Gen => x + "i";
      SF Pl Dat => x + "jom";
      SF Pl Acc => x + "je";
      SF Pl Instr => x + "jami";
      SF Pl Loc => x + "jach";
      SF Pl Voc => x + "je"
    };

    oper mkNTable0809: Str -> SubstForm => Str; --%
    oper mkNTable0809 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oła";
      SF Sg Gen => x + "ół";
      SF Sg Dat => x + "ołom";
      SF Sg Acc => x + "oła";
      SF Sg Instr => x + "ołami";
      SF Sg Loc => x + "ołach";
      SF Sg Voc => x + "oła";
      SF Pl Nom => x + "oła";
      SF Pl Gen => x + "ół";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oła";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oła"
    };

    oper mkNTable0812: Str -> SubstForm => Str; --%
    oper mkNTable0812 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ci";
      SF Sg Gen => x + "ci";
      SF Sg Dat => x + "ciom";
      SF Sg Acc => x + "ci";
      SF Sg Instr => x + "ćmi";
      SF Sg Loc => x + "ciach";
      SF Sg Voc => x + "ci";
      SF Pl Nom => x + "ci";
      SF Pl Gen => x + "ci";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "ci";
      SF Pl Instr => x + "ćmi";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "ci"
    };

    oper mkNTable0825: Str -> SubstForm => Str; --%
    oper mkNTable0825 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "i";
      SF Sg Gen => x + "ów";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "i";
      SF Pl Nom => x + "i";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "i"
    };

    oper mkNTable0835: Str -> SubstForm => Str; --%
    oper mkNTable0835 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "zy";
      SF Sg Gen => x + "ów";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "zy";
      SF Pl Nom => x + "zy";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "zy"
    };

    oper mkNTable0841: Str -> SubstForm => Str; --%
    oper mkNTable0841 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "zie";
      SF Sg Gen => x + "zi";
      SF Sg Dat => x + "ziom";
      SF Sg Acc => x + "zi";
      SF Sg Instr => x + "źmi";
      SF Sg Loc => x + "ziach";
      SF Sg Voc => x + "zie";
      SF Pl Nom => x + "zie";
      SF Pl Gen => x + "zi";
      SF Pl Dat => x + "ziom";
      SF Pl Acc => x + "zi";
      SF Pl Instr => x + "źmi";
      SF Pl Loc => x + "ziach";
      SF Pl Voc => x + "zie"
    };

    oper mkNTable0871: Str -> SubstForm => Str; --%
    oper mkNTable0871 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "zi";
      SF Sg Gen => x + "ych";
      SF Sg Dat => x + "ym";
      SF Sg Acc => x + "ych";
      SF Sg Instr => x + "ymi";
      SF Sg Loc => x + "ych";
      SF Sg Voc => x + "zi";
      SF Pl Nom => x + "zi";
      SF Pl Gen => x + "ych";
      SF Pl Dat => x + "ym";
      SF Pl Acc => x + "ych";
      SF Pl Instr => x + "ymi";
      SF Pl Loc => x + "ych";
      SF Pl Voc => x + "zi"
    };

    oper mkNTable0872: Str -> SubstForm => Str; --%
    oper mkNTable0872 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ęki";
      SF Sg Gen => x + "ąk";
      SF Sg Dat => x + "ękom";
      SF Sg Acc => x + "ęki";
      SF Sg Instr => x + "ękami";
      SF Sg Loc => x + "ękach";
      SF Sg Voc => x + "ęki";
      SF Pl Nom => x + "ęki";
      SF Pl Gen => x + "ąk";
      SF Pl Dat => x + "ękom";
      SF Pl Acc => x + "ęki";
      SF Pl Instr => x + "ękami";
      SF Pl Loc => x + "ękach";
      SF Pl Voc => x + "ęki"
    };

    oper mkNTable0886: Str -> SubstForm => Str; --%
    oper mkNTable0886 lexem = 
      let x = Predef.tk 1 lexem in
    table { 
      SF Sg Nom => x + "y";
      SF Sg Gen => x + "ów";
      SF Sg Dat => x + "om";
      SF Sg Acc => x + "ów";
      SF Sg Instr => x + "ami";
      SF Sg Loc => x + "ach";
      SF Sg Voc => x + "y";
      SF Pl Nom => x + "y";
      SF Pl Gen => x + "ów";
      SF Pl Dat => x + "om";
      SF Pl Acc => x + "ów";
      SF Pl Instr => x + "ami";
      SF Pl Loc => x + "ach";
      SF Pl Voc => x + "y"
    };

    oper mkNTable0891: Str -> SubstForm => Str; --%
    oper mkNTable0891 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "cia";
      SF Sg Gen => x + "ć";
      SF Sg Dat => x + "ciom";
      SF Sg Acc => x + "cia";
      SF Sg Instr => x + "ciami";
      SF Sg Loc => x + "ciach";
      SF Sg Voc => x + "cia";
      SF Pl Nom => x + "cia";
      SF Pl Gen => x + "ć";
      SF Pl Dat => x + "ciom";
      SF Pl Acc => x + "cia";
      SF Pl Instr => x + "ciami";
      SF Pl Loc => x + "ciach";
      SF Pl Voc => x + "cia"
    };

    oper mkNTable0932: Str -> SubstForm => Str; --%
    oper mkNTable0932 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oły";
      SF Sg Gen => x + "ół";
      SF Sg Dat => x + "ołom";
      SF Sg Acc => x + "oły";
      SF Sg Instr => x + "ołami";
      SF Sg Loc => x + "ołach";
      SF Sg Voc => x + "oły";
      SF Pl Nom => x + "oły";
      SF Pl Gen => x + "ół";
      SF Pl Dat => x + "ołom";
      SF Pl Acc => x + "oły";
      SF Pl Instr => x + "ołami";
      SF Pl Loc => x + "ołach";
      SF Pl Voc => x + "oły"
    };

    oper mkNTable0967: Str -> SubstForm => Str; --%
    oper mkNTable0967 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "oty";
      SF Sg Gen => x + "ót";
      SF Sg Dat => x + "otom";
      SF Sg Acc => x + "oty";
      SF Sg Instr => x + "otami";
      SF Sg Loc => x + "otach";
      SF Sg Voc => x + "oty";
      SF Pl Nom => x + "oty";
      SF Pl Gen => x + "ót";
      SF Pl Dat => x + "otom";
      SF Pl Acc => x + "oty";
      SF Pl Instr => x + "otami";
      SF Pl Loc => x + "otach";
      SF Pl Voc => x + "oty"
    };

    oper mkNTable0968: Str -> SubstForm => Str; --%
    oper mkNTable0968 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "eni";
      SF Sg Gen => x + "ionych";
      SF Sg Dat => x + "ionym";
      SF Sg Acc => x + "ionych";
      SF Sg Instr => x + "ionymi";
      SF Sg Loc => x + "ionych";
      SF Sg Voc => x + "eni";
      SF Pl Nom => x + "eni";
      SF Pl Gen => x + "ionych";
      SF Pl Dat => x + "ionym";
      SF Pl Acc => x + "ionych";
      SF Pl Instr => x + "ionymi";
      SF Pl Loc => x + "ionych";
      SF Pl Voc => x + "eni"
    };

    oper mkNTable0992: Str -> SubstForm => Str; --%
    oper mkNTable0992 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ła";
      SF Sg Gen => x + "ieł";
      SF Sg Dat => x + "łom";
      SF Sg Acc => x + "ła";
      SF Sg Instr => x + "łami";
      SF Sg Loc => x + "łach";
      SF Sg Voc => x + "ła";
      SF Pl Nom => x + "ła";
      SF Pl Gen => x + "ieł";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ła";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ła"
    };

    oper mkNTable1019: Str -> SubstForm => Str; --%
    oper mkNTable1019 lexem = 
      let x = Predef.tk 2 lexem in
    table { 
      SF Sg Nom => x + "ły";
      SF Sg Gen => x + "eł";
      SF Sg Dat => x + "łom";
      SF Sg Acc => x + "ły";
      SF Sg Instr => x + "łami";
      SF Sg Loc => x + "łach";
      SF Sg Voc => x + "ły";
      SF Pl Nom => x + "ły";
      SF Pl Gen => x + "eł";
      SF Pl Dat => x + "łom";
      SF Pl Acc => x + "ły";
      SF Pl Instr => x + "łami";
      SF Pl Loc => x + "łach";
      SF Pl Voc => x + "ły"
    };

    oper mkNTable1024: Str -> SubstForm => Str; --%
    oper mkNTable1024 lexem = 
      let x = Predef.tk 3 lexem in
    table { 
      SF Sg Nom => x + "ota";
      SF Sg Gen => x + "ót";
      SF Sg Dat => x + "otom";
      SF Sg Acc => x + "ota";
      SF Sg Instr => x + "otami";
      SF Sg Loc => x + "otach";
      SF Sg Voc => x + "ota";
      SF Pl Nom => x + "ota";
      SF Pl Gen => x + "ót";
      SF Pl Dat => x + "otom";
      SF Pl Acc => x + "ota";
      SF Pl Instr => x + "otami";
      SF Pl Loc => x + "otach";
      SF Pl Voc => x + "ota"
    };

}
